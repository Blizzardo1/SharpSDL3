
// <auto-generated>
//  This code was generated by the following tool on 2024-08-08 00:13:12 GMT-07:00:
//      https://github.com/bottlenoselabs/c2cs (v0.0.0.0)
//
//  Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
// ReSharper disable All

#region Template
#nullable enable
#pragma warning disable CS1591
#pragma warning disable CS8981
using Bindgen.Runtime;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
#endregion

public static unsafe partial class SDL
{
    private const string LibraryName = "SDL";

    #region API

    [LibraryImport(LibraryName, EntryPoint = "SDL_AcquireCameraFrame")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_AcquireCameraFrame(SDL_Camera* camera, Uint64* timestampNS);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddEventWatch")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddEventWatch(SDL_EventFilter filter, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddGamepadMapping")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddGamepadMapping(CString mapping);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddGamepadMappingsFromFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddGamepadMappingsFromFile(CString file);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddGamepadMappingsFromIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddGamepadMappingsFromIO(SDL_IOStream* src, SDL_bool closeio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddHintCallback")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddHintCallback(CString name, SDL_HintCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddSurfaceAlternateImage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddSurfaceAlternateImage(SDL_Surface* surface, SDL_Surface* image);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddTimer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddTimerNS")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TimerID SDL_AddTimerNS(Uint64 interval, SDL_NSTimerCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AddVulkanRenderSemaphores")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AddVulkanRenderSemaphores(SDL_Renderer* renderer, Uint32 wait_stage_mask, Sint64 wait_semaphore, Sint64 signal_semaphore);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AtomicAdd")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AtomicAdd(SDL_AtomicInt* a, int v);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AtomicCompareAndSwap")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_AtomicCompareAndSwap(SDL_AtomicInt* a, int oldval, int newval);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AtomicCompareAndSwapPointer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_AtomicCompareAndSwapPointer(void** a, void* oldval, void* newval);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AtomicGet")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AtomicGet(SDL_AtomicInt* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AtomicGetPtr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_AtomicGetPtr(void** a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AtomicSet")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_AtomicSet(SDL_AtomicInt* a, int v);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AtomicSetPtr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_AtomicSetPtr(void** a, void* v);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AttachVirtualJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID SDL_AttachVirtualJoystick(SDL_VirtualJoystickDesc* desc);

    [LibraryImport(LibraryName, EntryPoint = "SDL_AudioDevicePaused")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_AudioDevicePaused(SDL_AudioDeviceID dev);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindAudioStream")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BindAudioStream(SDL_AudioDeviceID devid, SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BindAudioStreams")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BindAudioStreams(SDL_AudioDeviceID devid, SDL_AudioStream** streams, int num_streams);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BlitSurface(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurface9Grid")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BlitSurface9Grid(SDL_Surface* src, SDL_Rect* srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceScaled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BlitSurfaceScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect, SDL_ScaleMode scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceTiled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BlitSurfaceTiled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BlitSurfaceTiledWithScale(SDL_Surface* src, SDL_Rect* srcrect, float scale, SDL_ScaleMode scaleMode, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceUnchecked")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BlitSurfaceUnchecked(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BlitSurfaceUncheckedScaled(SDL_Surface* src, SDL_Rect* srcrect, SDL_Surface* dst, SDL_Rect* dstrect, SDL_ScaleMode scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_BroadcastCondition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_BroadcastCondition(SDL_Condition* cond);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CaptureMouse")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CaptureMouse(SDL_bool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CleanupTLS")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CleanupTLS();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearAudioStream")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ClearAudioStream(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearClipboardData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ClearClipboardData();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearComposition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ClearComposition(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearError")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ClearError();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ClearProperty(SDL_PropertiesID props, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ClearSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ClearSurface(SDL_Surface* surface, float r, float g, float b, float a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseAudioDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseAudioDevice(SDL_AudioDeviceID devid);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseCamera")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseCamera(SDL_Camera* camera);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseGamepad(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseHaptic(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CloseIO(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseJoystick(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseSensor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_CloseSensor(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CloseStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CloseStorage(SDL_Storage* storage);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ComposeCustomBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertAudioSamples")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ConvertAudioSamples(SDL_AudioSpec* src_spec, Uint8* src_data, int src_len, SDL_AudioSpec* dst_spec, Uint8** dst_data, int* dst_len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ConvertEventToRenderCoordinates(SDL_Renderer* renderer, SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertPixels")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, void* src, int src_pitch, SDL_PixelFormat dst_format, void* dst, int dst_pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertPixelsAndColorspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, SDL_PropertiesID src_properties, void* src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, SDL_PropertiesID dst_properties, void* dst, int dst_pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_ConvertSurface(SDL_Surface* surface, SDL_PixelFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_ConvertSurfaceAndColorspace(SDL_Surface* surface, SDL_PixelFormat format, SDL_Palette* palette, SDL_Colorspace colorspace, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CopyFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CopyFile(CString oldpath, CString newpath);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CopyProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CopyProperties(SDL_PropertiesID src, SDL_PropertiesID dst);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CopyStorageFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CopyStorageFile(SDL_Storage* storage, CString oldpath, CString newpath);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateAudioStream")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AudioStream* SDL_CreateAudioStream(SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateColorCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateCondition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Condition* SDL_CreateCondition();

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_CreateCursor(Uint8* data, Uint8* mask, int w, int h, int hot_x, int hot_y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CreateDirectory(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CreateHapticEffect(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateMutex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Mutex* SDL_CreateMutex();

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreatePalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Palette* SDL_CreatePalette(int ncolors);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreatePopupWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_CreatePopupWindow(SDL_Window* parent, int offset_x, int offset_y, int w, int h, SDL_WindowFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_CreateProperties();

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateRWLock")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_RWLock* SDL_CreateRWLock();

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_CreateRenderer(SDL_Window* window, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateRendererWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_CreateRendererWithProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSemaphore")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Semaphore* SDL_CreateSemaphore(Uint32 initial_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSoftwareRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_CreateSoftwareRenderer(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateStorageDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CreateStorageDirectory(SDL_Storage* storage, CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_CreateSurface(int width, int height, SDL_PixelFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSurfaceFrom")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, void* pixels, int pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSurfacePalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Palette* SDL_CreateSurfacePalette(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateSystemCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Texture* SDL_CreateTexture(SDL_Renderer* renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateTextureFromSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Texture* SDL_CreateTextureFromSurface(SDL_Renderer* renderer, SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateTextureWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Texture* SDL_CreateTextureWithProperties(SDL_Renderer* renderer, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateThreadRuntime")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Thread* SDL_CreateThreadRuntime(SDL_ThreadFunction fn, CString name, void* data, SDL_FunctionPointer pfnBeginThread, SDL_FunctionPointer pfnEndThread);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateThreadWithPropertiesRuntime")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Thread* SDL_CreateThreadWithPropertiesRuntime(SDL_PropertiesID props, SDL_FunctionPointer pfnBeginThread, SDL_FunctionPointer pfnEndThread);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_CreateWindow(CString title, int w, int h, SDL_WindowFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateWindowAndRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_CreateWindowAndRenderer(CString title, int width, int height, SDL_WindowFlags window_flags, SDL_Window** window, SDL_Renderer** renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CreateWindowWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_CreateWindowWithProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_CursorVisible")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_CursorVisible();

    [LibraryImport(LibraryName, EntryPoint = "SDL_DateTimeToTime")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_DateTimeToTime(SDL_DateTime* dt, SDL_Time* ticks);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DelEventWatch")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DelEventWatch(SDL_EventFilter filter, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DelHintCallback")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DelHintCallback(CString name, SDL_HintCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Delay")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_Delay(Uint32 ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DelayNS")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DelayNS(Uint64 ns);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyAudioStream")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyAudioStream(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyCondition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyCondition(SDL_Condition* cond);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyCursor(SDL_Cursor* cursor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyHapticEffect(SDL_Haptic* haptic, int effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyMutex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyMutex(SDL_Mutex* mutex);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyPalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyPalette(SDL_Palette* palette);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyRWLock")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyRWLock(SDL_RWLock* rwlock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyRenderer(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroySemaphore")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroySemaphore(SDL_Semaphore* sem);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroySurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroySurface(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyTexture(SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DestroyWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DestroyWindowSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_DestroyWindowSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DetachThread")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_DetachThread(SDL_Thread* thread);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DetachVirtualJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_DisableScreenSaver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_DisableScreenSaver();

    [LibraryImport(LibraryName, EntryPoint = "SDL_DuplicateSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_DuplicateSurface(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_GetCurrentConfig")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_EGLConfig SDL_EGL_GetCurrentConfig();

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_GetCurrentDisplay")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_EGLDisplay SDL_EGL_GetCurrentDisplay();

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_GetProcAddress")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_FunctionPointer SDL_EGL_GetProcAddress(CString proc);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_GetWindowSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_EGLSurface SDL_EGL_GetWindowSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_EGL_SetAttributeCallbacks(SDL_EGLAttribArrayCallback platformAttribCallback, SDL_EGLIntArrayCallback surfaceAttribCallback, SDL_EGLIntArrayCallback contextAttribCallback);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EnableScreenSaver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_EnableScreenSaver();

    [LibraryImport(LibraryName, EntryPoint = "SDL_EnumerateDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_EnumerateDirectory(CString path, SDL_EnumerateDirectoryCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EnumerateProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_EnumerateProperties(SDL_PropertiesID props, SDL_EnumeratePropertiesCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EnumerateStorageDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_EnumerateStorageDirectory(SDL_Storage* storage, CString path, SDL_EnumerateDirectoryCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_EventEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_EventEnabled(Uint32 type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FillSurfaceRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_FillSurfaceRect(SDL_Surface* dst, SDL_Rect* rect, Uint32 color);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FillSurfaceRects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_FillSurfaceRects(SDL_Surface* dst, SDL_Rect* rects, int count, Uint32 color);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FilterEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_FilterEvents(SDL_EventFilter filter, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlashWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_FlashWindow(SDL_Window* window, SDL_FlashOperation operation);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlipSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_FlipSurface(SDL_Surface* surface, SDL_FlipMode flip);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlushAudioStream")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_FlushAudioStream(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlushEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_FlushEvent(Uint32 type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlushEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_FlushEvents(Uint32 minType, Uint32 maxType);

    [LibraryImport(LibraryName, EntryPoint = "SDL_FlushRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_FlushRenderer(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_CreateContext")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GLContext SDL_GL_CreateContext(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_DestroyContext")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GL_DestroyContext(SDL_GLContext context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_ExtensionSupported")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GL_ExtensionSupported(CString extension);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetAttribute")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GL_GetAttribute(SDL_GLattr attr, int* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetCurrentContext")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GLContext SDL_GL_GetCurrentContext();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetCurrentWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GL_GetCurrentWindow();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetProcAddress")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_FunctionPointer SDL_GL_GetProcAddress(CString proc);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_GetSwapInterval")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GL_GetSwapInterval(int* interval);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_LoadLibrary")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GL_LoadLibrary(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_MakeCurrent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GL_MakeCurrent(SDL_Window* window, SDL_GLContext context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_ResetAttributes")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GL_ResetAttributes();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_SetAttribute")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GL_SetAttribute(SDL_GLattr attr, int value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_SetSwapInterval")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GL_SetSwapInterval(int interval);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_SwapWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GL_SwapWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GL_UnloadLibrary")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GL_UnloadLibrary();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GUIDToString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GUIDToString(SDL_GUID guid, CString pszGUID, int cbGUID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadConnected")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GamepadConnected(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadEventsEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GamepadEventsEnabled();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadHasAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GamepadHasAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadHasButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GamepadHasButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadHasSensor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GamepadHasSensor(SDL_Gamepad* gamepad, SDL_SensorType type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GamepadSensorEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GamepadSensorEnabled(SDL_Gamepad* gamepad, SDL_SensorType type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAppMetadataProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetAppMetadataProperty(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAssertionHandler")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AssertionHandler SDL_GetAssertionHandler(void** puserdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAssertionReport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AssertData* SDL_GetAssertionReport();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioDeviceChannelMap")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int* SDL_GetAudioDeviceChannelMap(SDL_AudioDeviceID devid, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioDeviceFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetAudioDeviceFormat(SDL_AudioDeviceID devid, SDL_AudioSpec* spec, int* sample_frames);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioDeviceGain")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetAudioDeviceGain(SDL_AudioDeviceID devid);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioDeviceName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetAudioDeviceName(SDL_AudioDeviceID devid);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetAudioDriver(int index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioPlaybackDevices")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AudioDeviceID* SDL_GetAudioPlaybackDevices(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioRecordingDevices")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AudioDeviceID* SDL_GetAudioRecordingDevices(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamAvailable")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetAudioStreamAvailable(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetAudioStreamData(SDL_AudioStream* stream, void* buf, int len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AudioDeviceID SDL_GetAudioStreamDevice(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetAudioStreamFormat(SDL_AudioStream* stream, SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetAudioStreamFrequencyRatio(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamGain")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetAudioStreamGain(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int* SDL_GetAudioStreamInputChannelMap(SDL_AudioStream* stream, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int* SDL_GetAudioStreamOutputChannelMap(SDL_AudioStream* stream, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetAudioStreamProperties(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetAudioStreamQueued")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetAudioStreamQueued(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetBasePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetBasePath();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetBooleanProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetBooleanProperty(SDL_PropertiesID props, CString name, SDL_bool default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCPUCacheLineSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetCPUCacheLineSize();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCPUCount")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetCPUCount();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCameraDriver(int index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetCameraFormat(SDL_Camera* camera, SDL_CameraSpec* spec);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_CameraID SDL_GetCameraID(SDL_Camera* camera);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCameraName(SDL_CameraID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraPermissionState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetCameraPermissionState(SDL_Camera* camera);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraPosition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_CameraPosition SDL_GetCameraPosition(SDL_CameraID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetCameraProperties(SDL_Camera* camera);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameraSupportedFormats")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_CameraSpec** SDL_GetCameraSupportedFormats(SDL_CameraID devid, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCameras")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_CameraID* SDL_GetCameras(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetClipboardData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetClipboardData(CString mime_type, ulong* size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetClipboardText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetClipboardText();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetClosestFullscreenDisplayMode(SDL_DisplayID displayID, int w, int h, float refresh_rate, SDL_bool include_high_density_modes, SDL_DisplayMode* mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentAudioDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCurrentAudioDriver();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentCameraDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCurrentCameraDriver();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentDisplayMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayMode* SDL_GetCurrentDisplayMode(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentDisplayOrientation")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentRenderOutputSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetCurrentRenderOutputSize(SDL_Renderer* renderer, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentThreadID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_ThreadID SDL_GetCurrentThreadID();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentTime")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetCurrentTime(SDL_Time* ticks);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCurrentVideoDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetCurrentVideoDriver();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_GetCursor();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDateTimeLocalePreferences")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetDateTimeLocalePreferences(SDL_DateFormat* dateFormat, SDL_TimeFormat* timeFormat);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDayOfWeek")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetDayOfWeek(int year, int month, int day);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDayOfYear")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetDayOfYear(int year, int month, int day);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDaysInMonth")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetDaysInMonth(int year, int month);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDefaultAssertionHandler")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AssertionHandler SDL_GetDefaultAssertionHandler();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDefaultCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Cursor* SDL_GetDefaultCursor();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDesktopDisplayMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayMode* SDL_GetDesktopDisplayMode(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayBounds")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetDisplayBounds(SDL_DisplayID displayID, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayContentScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetDisplayContentScale(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayForPoint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID SDL_GetDisplayForPoint(SDL_Point* point);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayForRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID SDL_GetDisplayForRect(SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayForWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID SDL_GetDisplayForWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetDisplayName(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetDisplayProperties(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplayUsableBounds")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetDisplayUsableBounds(SDL_DisplayID displayID, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetDisplays")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID* SDL_GetDisplays(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetError")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetError();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetEventFilter")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetEventFilter(SDL_EventFilter* filter, void** userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetFloatProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetFloatProperty(SDL_PropertiesID props, CString name, float default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetFullscreenDisplayModes")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayMode** SDL_GetFullscreenDisplayModes(SDL_DisplayID displayID, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Sint16 SDL_GetGamepadAxis(SDL_Gamepad* gamepad, SDL_GamepadAxis axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadAxisFromString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadAxis SDL_GetGamepadAxisFromString(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadBindings")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadBinding** SDL_GetGamepadBindings(SDL_Gamepad* gamepad, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint8 SDL_GetGamepadButton(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadButtonFromString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadButton SDL_GetGamepadButtonFromString(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadButtonLabel")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadButtonLabel SDL_GetGamepadButtonLabel(SDL_Gamepad* gamepad, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadButtonLabelForType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadButtonLabel SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadConnectionState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickConnectionState SDL_GetGamepadConnectionState(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadFirmwareVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetGamepadFirmwareVersion(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Gamepad* SDL_GetGamepadFromID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Gamepad* SDL_GetGamepadFromPlayerIndex(int player_index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadGUIDForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GUID SDL_GetGamepadGUIDForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID SDL_GetGamepadID(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Joystick* SDL_GetGamepadJoystick(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadMapping")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadMapping(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadMappingForGUID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadMappingForGUID(SDL_GUID guid);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadMappingForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadMappingForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadMappings")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString* SDL_GetGamepadMappings(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadName(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadNameForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadPath(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPathForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadPathForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetGamepadPlayerIndex(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPlayerIndexForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetGamepadPlayerIndexForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadPowerInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PowerState SDL_GetGamepadPowerInfo(SDL_Gamepad* gamepad, int* percent);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProduct")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetGamepadProduct(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProductForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetGamepadProductForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProductVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetGamepadProductVersion(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProductVersionForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetGamepadProductVersionForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetGamepadProperties(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadSensorData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetGamepadSensorData(SDL_Gamepad* gamepad, SDL_SensorType type, float* data, int num_values);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadSensorDataRate")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetGamepadSensorDataRate(SDL_Gamepad* gamepad, SDL_SensorType type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadSerial")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadSerial(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadSteamHandle")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint64 SDL_GetGamepadSteamHandle(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadStringForAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadStringForButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadStringForButton(SDL_GamepadButton button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadStringForType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetGamepadStringForType(SDL_GamepadType type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadTouchpadFinger")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetGamepadTouchpadFinger(SDL_Gamepad* gamepad, int touchpad, int finger, Uint8* state, float* x, float* y, float* pressure);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetGamepadType(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetGamepadTypeForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadTypeFromString")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetGamepadTypeFromString(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadVendor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetGamepadVendor(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepadVendorForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetGamepadVendorForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGamepads")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID* SDL_GetGamepads(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGlobalMouseState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MouseButtonFlags SDL_GetGlobalMouseState(float* x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGlobalProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetGlobalProperties();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetGrabbedWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetGrabbedWindow();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticEffectStatus")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetHapticEffectStatus(SDL_Haptic* haptic, int effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticFeatures")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_GetHapticFeatures(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Haptic* SDL_GetHapticFromID(SDL_HapticID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_HapticID SDL_GetHapticID(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetHapticName(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHapticNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetHapticNameForID(SDL_HapticID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHaptics")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_HapticID* SDL_GetHaptics(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetHint(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetHintBoolean")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetHintBoolean(CString name, SDL_bool default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetIOProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetIOProperties(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetIOSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Sint64 SDL_GetIOSize(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetIOStatus")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStatus SDL_GetIOStatus(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Sint16 SDL_GetJoystickAxis(SDL_Joystick* joystick, int axis);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickAxisInitialState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetJoystickAxisInitialState(SDL_Joystick* joystick, int axis, Sint16* state);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickBall")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetJoystickBall(SDL_Joystick* joystick, int ball, int* dx, int* dy);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint8 SDL_GetJoystickButton(SDL_Joystick* joystick, int button);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickConnectionState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickConnectionState SDL_GetJoystickConnectionState(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickFirmwareVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetJoystickFirmwareVersion(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Joystick* SDL_GetJoystickFromID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Joystick* SDL_GetJoystickFromPlayerIndex(int player_index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickGUID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GUID SDL_GetJoystickGUID(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickGUIDForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GUID SDL_GetJoystickGUIDForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickGUIDInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetJoystickGUIDInfo(SDL_GUID guid, Uint16* vendor, Uint16* product, Uint16* version, Uint16* crc16);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickHat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint8 SDL_GetJoystickHat(SDL_Joystick* joystick, int hat);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID SDL_GetJoystickID(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickName(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickNameForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickPath(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPathForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickPathForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetJoystickPlayerIndex(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPlayerIndexForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetJoystickPlayerIndexForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickPowerInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PowerState SDL_GetJoystickPowerInfo(SDL_Joystick* joystick, int* percent);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProduct")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetJoystickProduct(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProductForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetJoystickProductForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProductVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetJoystickProductVersion(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProductVersionForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetJoystickProductVersionForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetJoystickProperties(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickSerial")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetJoystickSerial(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickType SDL_GetJoystickType(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickType SDL_GetJoystickTypeForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickVendor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetJoystickVendor(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoystickVendorForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_GetJoystickVendorForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetJoysticks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_JoystickID* SDL_GetJoysticks(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyFromName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Keycode SDL_GetKeyFromName(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyFromScancode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode, SDL_Keymod modstate, SDL_bool key_event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetKeyName(SDL_Keycode key);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyboardFocus")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetKeyboardFocus();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyboardNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetKeyboardNameForID(SDL_KeyboardID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyboardState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint8* SDL_GetKeyboardState(int* numkeys);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetKeyboards")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_KeyboardID* SDL_GetKeyboards(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetLogOutputFunction")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetLogOutputFunction(SDL_LogOutputFunction* callback, void** userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetLogPriority")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_LogPriority SDL_GetLogPriority(int category);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMasksForPixelFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetMasksForPixelFormat(SDL_PixelFormat format, int* bpp, Uint32* Rmask, Uint32* Gmask, Uint32* Bmask, Uint32* Amask);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMaxHapticEffects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetMaxHapticEffects(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetMaxHapticEffectsPlaying(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMemoryFunctions")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MouseID* SDL_GetMice(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetModState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Keymod SDL_GetModState();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMouseFocus")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetMouseFocus();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMouseNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetMouseNameForID(SDL_MouseID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetMouseState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MouseButtonFlags SDL_GetMouseState(float* x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNaturalDisplayOrientation")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(SDL_DisplayID displayID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumAllocations")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumAllocations();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumAudioDrivers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumAudioDrivers();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumCameraDrivers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumCameraDrivers();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad* gamepad, int touchpad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumGamepadTouchpads")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumGamepadTouchpads(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumHapticAxes")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumHapticAxes(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumJoystickAxes")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumJoystickAxes(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumJoystickBalls")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumJoystickBalls(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumJoystickButtons")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumJoystickButtons(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumJoystickHats")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumJoystickHats(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumRenderDrivers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumRenderDrivers();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumVideoDrivers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetNumVideoDrivers();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetNumberProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Sint64 SDL_GetNumberProperty(SDL_PropertiesID props, CString name, Sint64 default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetOriginalMemoryFunctions")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetOriginalMemoryFunctions(SDL_malloc_func* malloc_func, SDL_calloc_func* calloc_func, SDL_realloc_func* realloc_func, SDL_free_func* free_func);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPathInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetPathInfo(CString path, SDL_PathInfo* info);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPenCapabilities")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PenCapabilityFlags SDL_GetPenCapabilities(SDL_PenID instance_id, SDL_PenCapabilityInfo* capabilities);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPenFromGUID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PenID SDL_GetPenFromGUID(SDL_GUID guid);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPenGUID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GUID SDL_GetPenGUID(SDL_PenID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPenName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetPenName(SDL_PenID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPenStatus")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_GetPenStatus(SDL_PenID instance_id, float* x, float* y, float* axes, ulong num_axes);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPenType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PenSubtype SDL_GetPenType(SDL_PenID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPens")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PenID* SDL_GetPens(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPerformanceCounter")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint64 SDL_GetPerformanceCounter();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPerformanceFrequency")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint64 SDL_GetPerformanceFrequency();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPixelFormatDetails")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PixelFormatDetails* SDL_GetPixelFormatDetails(SDL_PixelFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPixelFormatForMasks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PixelFormat SDL_GetPixelFormatForMasks(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPixelFormatName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetPixelFormatName(SDL_PixelFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPlatform")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetPlatform();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPointerProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetPointerProperty(SDL_PropertiesID props, CString name, void* default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPowerInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PowerState SDL_GetPowerInfo(int* seconds, int* percent);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPrefPath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetPrefPath(CString org, CString app);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPreferredLocales")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Locale** SDL_GetPreferredLocales(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPrimaryDisplay")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayID SDL_GetPrimaryDisplay();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPrimarySelectionText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetPrimarySelectionText();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetPropertyType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertyType SDL_GetPropertyType(SDL_PropertiesID props, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRGB")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetRGB(Uint32 pixel, SDL_PixelFormatDetails* format, SDL_Palette* palette, Uint8* r, Uint8* g, Uint8* b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRGBA")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_GetRGBA(Uint32 pixel, SDL_PixelFormatDetails* format, SDL_Palette* palette, Uint8* r, Uint8* g, Uint8* b, Uint8* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRealGamepadType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetRealGamepadType(SDL_Gamepad* gamepad);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRealGamepadTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GamepadType SDL_GetRealGamepadTypeForID(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectAndLineIntersection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetRectAndLineIntersection(SDL_Rect* rect, int* X1, int* Y1, int* X2, int* Y2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetRectAndLineIntersectionFloat(SDL_FRect* rect, float* X1, float* Y1, float* X2, float* Y2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectEnclosingPoints")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetRectEnclosingPoints(SDL_Point* points, int count, SDL_Rect* clip, SDL_Rect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetRectEnclosingPointsFloat(SDL_FPoint* points, int count, SDL_FRect* clip, SDL_FRect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectIntersection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetRectIntersection(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectIntersectionFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetRectIntersectionFloat(SDL_FRect* A, SDL_FRect* B, SDL_FRect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectUnion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRectUnion(SDL_Rect* A, SDL_Rect* B, SDL_Rect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRectUnionFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRectUnionFloat(SDL_FRect* A, SDL_FRect* B, SDL_FRect* result);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRelativeMouseState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MouseButtonFlags SDL_GetRelativeMouseState(float* x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderClipRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderColorScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderColorScale(SDL_Renderer* renderer, float* scale);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderDrawBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode* blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderDrawColor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderDrawColor(SDL_Renderer* renderer, Uint8* r, Uint8* g, Uint8* b, Uint8* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderDrawColorFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderDrawColorFloat(SDL_Renderer* renderer, float* r, float* g, float* b, float* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetRenderDriver(int index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderLogicalPresentation")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderLogicalPresentation(SDL_Renderer* renderer, int* w, int* h, SDL_RendererLogicalPresentation* mode, SDL_ScaleMode* scale_mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderLogicalPresentationRect(SDL_Renderer* renderer, SDL_FRect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetRenderMetalCommandEncoder(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderMetalLayer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetRenderMetalLayer(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderOutputSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderOutputSize(SDL_Renderer* renderer, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderSafeArea")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderSafeArea(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderScale(SDL_Renderer* renderer, float* scaleX, float* scaleY);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderTarget")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Texture* SDL_GetRenderTarget(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderVSync")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderVSync(SDL_Renderer* renderer, int* vsync);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderViewport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetRenderViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetRenderWindow(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRenderer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_GetRenderer(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRendererFromTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Renderer* SDL_GetRendererFromTexture(SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRendererName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetRendererName(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRendererProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetRendererProperties(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetRevision")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetRevision();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSIMDAlignment")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_GetSIMDAlignment();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetScancodeFromKey")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key, SDL_Keymod* modstate);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetScancodeFromName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Scancode SDL_GetScancodeFromName(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetScancodeName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetScancodeName(SDL_Scancode scancode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSemaphoreValue")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_GetSemaphoreValue(SDL_Semaphore* sem);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSensorData(SDL_Sensor* sensor, float* data, int num_values);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Sensor* SDL_GetSensorFromID(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SensorID SDL_GetSensorID(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetSensorName(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorNameForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetSensorNameForID(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorNonPortableType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSensorNonPortableType(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorNonPortableTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSensorNonPortableTypeForID(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetSensorProperties(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SensorType SDL_GetSensorType(SDL_Sensor* sensor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensorTypeForID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SensorType SDL_GetSensorTypeForID(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSensors")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SensorID* SDL_GetSensors(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSilenceValueForFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSilenceValueForFormat(SDL_AudioFormat format);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetStorageFileSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetStorageFileSize(SDL_Storage* storage, CString path, Uint64* length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetStoragePathInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetStoragePathInfo(SDL_Storage* storage, CString path, SDL_PathInfo* info);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetStorageSpaceRemaining")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint64 SDL_GetStorageSpaceRemaining(SDL_Storage* storage);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetStringProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetStringProperty(SDL_PropertiesID props, CString name, CString default_value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceAlphaMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSurfaceAlphaMod(SDL_Surface* surface, Uint8* alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceClipRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSurfaceClipRect(SDL_Surface* surface, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceColorKey")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSurfaceColorKey(SDL_Surface* surface, Uint32* key);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceColorMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSurfaceColorMod(SDL_Surface* surface, Uint8* r, Uint8* g, Uint8* b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceColorspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Colorspace SDL_GetSurfaceColorspace(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceImages")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface** SDL_GetSurfaceImages(SDL_Surface* surface, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfacePalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Palette* SDL_GetSurfacePalette(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSurfaceProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetSurfaceProperties(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSystemRAM")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetSystemRAM();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetSystemTheme")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_SystemTheme SDL_GetSystemTheme();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTLS")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetTLS(SDL_TLSID* id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextInputArea")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetTextInputArea(SDL_Window* window, SDL_Rect* rect, int* cursor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureAlphaMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetTextureAlphaMod(SDL_Texture* texture, Uint8* alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureAlphaModFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetTextureAlphaModFloat(SDL_Texture* texture, float* alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode* blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureColorMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetTextureColorMod(SDL_Texture* texture, Uint8* r, Uint8* g, Uint8* b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureColorModFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetTextureColorModFloat(SDL_Texture* texture, float* r, float* g, float* b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetTextureProperties(SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureScaleMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode* scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTextureSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetTextureSize(SDL_Texture* texture, float* w, float* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetThreadID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_ThreadID SDL_GetThreadID(SDL_Thread* thread);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetThreadName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetThreadName(SDL_Thread* thread);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTicks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint64 SDL_GetTicks();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTicksNS")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint64 SDL_GetTicksNS();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTouchDeviceName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetTouchDeviceName(SDL_TouchID touchID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTouchDeviceType")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTouchDevices")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_TouchID* SDL_GetTouchDevices(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetTouchFingers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Finger** SDL_GetTouchFingers(SDL_TouchID touchID, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetUserFolder")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetUserFolder(SDL_Folder folder);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetVersion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetVersion();

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetVideoDriver")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetVideoDriver(int index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowAspectRatio")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetWindowAspectRatio(SDL_Window* window, float* min_aspect, float* max_aspect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowBordersSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetWindowBordersSize(SDL_Window* window, int* top, int* left, int* bottom, int* right);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowDisplayScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetWindowDisplayScale(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowFlags")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_WindowFlags SDL_GetWindowFlags(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowFromEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetWindowFromEvent(SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowFromID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetWindowFromID(SDL_WindowID id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowFullscreenMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_DisplayMode* SDL_GetWindowFullscreenMode(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowICCProfile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_GetWindowICCProfile(SDL_Window* window, ulong* size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_WindowID SDL_GetWindowID(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowKeyboardGrab")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetWindowKeyboardGrab(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowMaximumSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetWindowMaximumSize(SDL_Window* window, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowMinimumSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetWindowMinimumSize(SDL_Window* window, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowMouseGrab")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetWindowMouseGrab(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowMouseRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Rect* SDL_GetWindowMouseRect(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowOpacity")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetWindowOpacity(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowParent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window* SDL_GetWindowParent(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowPixelDensity")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_GetWindowPixelDensity(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowPixelFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PixelFormat SDL_GetWindowPixelFormat(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowPosition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetWindowPosition(SDL_Window* window, int* x, int* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_PropertiesID SDL_GetWindowProperties(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowRelativeMouseMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_GetWindowRelativeMouseMode(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSafeArea")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetWindowSafeArea(SDL_Window* window, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetWindowSize(SDL_Window* window, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSizeInPixels")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetWindowSizeInPixels(SDL_Window* window, int* w, int* h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_GetWindowSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowSurfaceVSync")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_GetWindowSurfaceVSync(SDL_Window* window, int* vsync);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindowTitle")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_GetWindowTitle(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GetWindows")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Window** SDL_GetWindows(int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GlobDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString* SDL_GlobDirectory(CString path, CString pattern, SDL_GlobFlags flags, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_GlobStorageDirectory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString* SDL_GlobStorageDirectory(SDL_Storage* storage, CString path, CString pattern, SDL_GlobFlags flags, int* count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HapticEffectSupported")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HapticEffectSupported(SDL_Haptic* haptic, SDL_HapticEffect* effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HapticRumbleSupported")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HapticRumbleSupported(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasARMSIMD")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasARMSIMD();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasAVX")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasAVX();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasAVX2")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasAVX2();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasAVX512F")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasAVX512F();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasAltiVec")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasAltiVec();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasClipboardData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasClipboardData(CString mime_type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasClipboardText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasClipboardText();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasEvent(Uint32 type);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasEvents(Uint32 minType, Uint32 maxType);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasGamepad();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasJoystick();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasKeyboard")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasKeyboard();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasLASX")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasLASX();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasLSX")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasLSX();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasMMX")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasMMX();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasMouse")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasMouse();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasNEON")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasNEON();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasPrimarySelectionText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasPrimarySelectionText();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasProperty(SDL_PropertiesID props, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasRectIntersection")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasRectIntersection(SDL_Rect* A, SDL_Rect* B);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasRectIntersectionFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasRectIntersectionFloat(SDL_FRect* A, SDL_FRect* B);

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasSSE();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE2")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasSSE2();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE3")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasSSE3();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE41")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasSSE41();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasSSE42")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasSSE42();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HasScreenKeyboardSupport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_HasScreenKeyboardSupport();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HideCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_HideCursor();

    [LibraryImport(LibraryName, EntryPoint = "SDL_HideWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_HideWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOFromConstMem")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_IOFromConstMem(void* mem, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOFromDynamicMem")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_IOFromDynamicMem();

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOFromFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_IOFromFile(CString file, CString mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOFromMem")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_IOFromMem(void* mem, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_IOprintf(SDL_IOStream* context, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IOvprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_IOvprintf(SDL_IOStream* context, CString fmt, IntPtr ap);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Init")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_Init(SDL_InitFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_InitHapticRumble")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_InitHapticRumble(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_InitSubSystem")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_InitSubSystem(SDL_InitFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_IsGamepad(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsJoystickHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_IsJoystickHaptic(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsJoystickVirtual")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_IsJoystickVirtual(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsMouseHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_IsMouseHaptic();

    [LibraryImport(LibraryName, EntryPoint = "SDL_IsTablet")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_IsTablet();

    [LibraryImport(LibraryName, EntryPoint = "SDL_JoystickConnected")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_JoystickConnected(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_JoystickEventsEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_JoystickEventsEnabled();

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadBMP")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_LoadBMP(CString file);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadBMP_IO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_LoadBMP_IO(SDL_IOStream* src, SDL_bool closeio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_LoadFile(CString file, ulong* datasize);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadFile_IO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_LoadFile_IO(SDL_IOStream* src, ulong* datasize, SDL_bool closeio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadFunction")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_FunctionPointer SDL_LoadFunction(void* handle, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadObject")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_LoadObject(CString sofile);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadWAV")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_LoadWAV(CString path, SDL_AudioSpec* spec, Uint8** audio_buf, Uint32* audio_len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LoadWAV_IO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_LoadWAV_IO(SDL_IOStream* src, SDL_bool closeio, SDL_AudioSpec* spec, Uint8** audio_buf, Uint32* audio_len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockAudioStream")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_LockAudioStream(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockJoysticks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LockJoysticks();

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockMutex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LockMutex(SDL_Mutex* mutex);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_LockProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockRWLockForReading")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LockRWLockForReading(SDL_RWLock* rwlock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockRWLockForWriting")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LockRWLockForWriting(SDL_RWLock* rwlock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockSpinlock")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LockSpinlock(SDL_SpinLock* @lock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_LockSurface(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_LockTexture(SDL_Texture* texture, SDL_Rect* rect, void** pixels, int* pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LockTextureToSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_LockTextureToSurface(SDL_Texture* texture, SDL_Rect* rect, SDL_Surface** surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Log")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_Log(CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogCritical")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogCritical(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogDebug")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogDebug(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogError")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogError(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogInfo")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogInfo(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogMessage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogMessage(int category, SDL_LogPriority priority, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogMessageV")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogMessageV(int category, SDL_LogPriority priority, CString fmt, IntPtr ap);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogVerbose")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogVerbose(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_LogWarn")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_LogWarn(int category, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MapRGB")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_MapRGB(SDL_PixelFormatDetails* format, SDL_Palette* palette, Uint8 r, Uint8 g, Uint8 b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MapRGBA")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_MapRGBA(SDL_PixelFormatDetails* format, SDL_Palette* palette, Uint8 r, Uint8 g, Uint8 b, Uint8 a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MapSurfaceRGB")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_MapSurfaceRGB(SDL_Surface* surface, Uint8 r, Uint8 g, Uint8 b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MapSurfaceRGBA")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_MapSurfaceRGBA(SDL_Surface* surface, Uint8 r, Uint8 g, Uint8 b, Uint8 a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MaximizeWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_MaximizeWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MemoryBarrierAcquireFunction")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_MemoryBarrierAcquireFunction();

    [LibraryImport(LibraryName, EntryPoint = "SDL_MemoryBarrierReleaseFunction")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_MemoryBarrierReleaseFunction();

    [LibraryImport(LibraryName, EntryPoint = "SDL_Metal_CreateView")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_MetalView SDL_Metal_CreateView(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Metal_DestroyView")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_Metal_DestroyView(SDL_MetalView view);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Metal_GetLayer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_Metal_GetLayer(SDL_MetalView view);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MinimizeWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_MinimizeWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_MixAudio")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_MixAudio(Uint8* dst, Uint8* src, SDL_AudioFormat format, Uint32 len, float volume);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OnApplicationDidEnterBackground")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_OnApplicationDidEnterBackground();

    [LibraryImport(LibraryName, EntryPoint = "SDL_OnApplicationDidEnterForeground")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_OnApplicationDidEnterForeground();

    [LibraryImport(LibraryName, EntryPoint = "SDL_OnApplicationDidReceiveMemoryWarning")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_OnApplicationDidReceiveMemoryWarning();

    [LibraryImport(LibraryName, EntryPoint = "SDL_OnApplicationWillEnterBackground")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_OnApplicationWillEnterBackground();

    [LibraryImport(LibraryName, EntryPoint = "SDL_OnApplicationWillEnterForeground")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_OnApplicationWillEnterForeground();

    [LibraryImport(LibraryName, EntryPoint = "SDL_OnApplicationWillTerminate")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_OnApplicationWillTerminate();

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenAudioDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AudioDeviceID SDL_OpenAudioDevice(SDL_AudioDeviceID devid, SDL_AudioSpec* spec);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenAudioDeviceStream")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AudioStream* SDL_OpenAudioDeviceStream(SDL_AudioDeviceID devid, SDL_AudioSpec* spec, SDL_AudioStreamCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenCamera")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Camera* SDL_OpenCamera(SDL_CameraID instance_id, SDL_CameraSpec* spec);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenFileStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Storage* SDL_OpenFileStorage(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Gamepad* SDL_OpenGamepad(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Haptic* SDL_OpenHaptic(SDL_HapticID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenHapticFromJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Haptic* SDL_OpenHapticFromJoystick(SDL_Joystick* joystick);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenHapticFromMouse")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Haptic* SDL_OpenHapticFromMouse();

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_IOStream* SDL_OpenIO(SDL_IOStreamInterface* iface, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Joystick* SDL_OpenJoystick(SDL_JoystickID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenSensor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Sensor* SDL_OpenSensor(SDL_SensorID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Storage* SDL_OpenStorage(SDL_StorageInterface* iface, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenTitleStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Storage* SDL_OpenTitleStorage(CString @override, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenURL")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_OpenURL(CString url);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OpenUserStorage")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Storage* SDL_OpenUserStorage(CString org, CString app, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_OutOfMemory")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_OutOfMemory();

    [LibraryImport(LibraryName, EntryPoint = "SDL_PauseAudioDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PauseAudioDevice(SDL_AudioDeviceID dev);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PauseAudioStreamDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PauseAudioStreamDevice(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PauseHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PauseHaptic(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PeepEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_EventAction action, Uint32 minType, Uint32 maxType);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PenConnected")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_PenConnected(SDL_PenID instance_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PlayHapticRumble")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PlayHapticRumble(SDL_Haptic* haptic, float strength, Uint32 length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PollEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_PollEvent(SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PremultiplyAlpha")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, void* src, int src_pitch, SDL_PixelFormat dst_format, void* dst, int dst_pitch, SDL_bool linear);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PremultiplySurfaceAlpha")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PremultiplySurfaceAlpha(SDL_Surface* surface, SDL_bool linear);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PumpEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_PumpEvents();

    [LibraryImport(LibraryName, EntryPoint = "SDL_PushEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PushEvent(SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_PutAudioStreamData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_PutAudioStreamData(SDL_AudioStream* stream, void* buf, int len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_Quit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_Quit();

    [LibraryImport(LibraryName, EntryPoint = "SDL_QuitSubSystem")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_QuitSubSystem(SDL_InitFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RaiseWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RaiseWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_ReadIO(SDL_IOStream* context, void* ptr, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS16BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadS16BE(SDL_IOStream* src, Sint16* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS16LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadS16LE(SDL_IOStream* src, Sint16* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS32BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadS32BE(SDL_IOStream* src, Sint32* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS32LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadS32LE(SDL_IOStream* src, Sint32* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS64BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadS64BE(SDL_IOStream* src, Sint64* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS64LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadS64LE(SDL_IOStream* src, Sint64* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadS8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadS8(SDL_IOStream* src, Sint8* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadStorageFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ReadStorageFile(SDL_Storage* storage, CString path, void* destination, Uint64 length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadSurfacePixel")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ReadSurfacePixel(SDL_Surface* surface, int x, int y, Uint8* r, Uint8* g, Uint8* b, Uint8* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadSurfacePixelFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ReadSurfacePixelFloat(SDL_Surface* surface, int x, int y, float* r, float* g, float* b, float* a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU16BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadU16BE(SDL_IOStream* src, Uint16* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU16LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadU16LE(SDL_IOStream* src, Uint16* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU32BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadU32BE(SDL_IOStream* src, Uint32* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU32LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadU32LE(SDL_IOStream* src, Uint32* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU64BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadU64BE(SDL_IOStream* src, Uint64* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU64LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadU64LE(SDL_IOStream* src, Uint64* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReadU8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ReadU8(SDL_IOStream* src, Uint8* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RegisterEvents")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_RegisterEvents(int numevents);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReleaseCameraFrame")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ReleaseCameraFrame(SDL_Camera* camera, SDL_Surface* frame);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReloadGamepadMappings")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ReloadGamepadMappings();

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemovePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RemovePath(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemoveStoragePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RemoveStoragePath(SDL_Storage* storage, CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_RemoveSurfaceAlternateImages(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RemoveTimer")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RemoveTimer(SDL_TimerID id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenamePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenamePath(CString oldpath, CString newpath);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenameStoragePath")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenameStoragePath(SDL_Storage* storage, CString oldpath, CString newpath);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderClear")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderClear(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderClipEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_RenderClipEnabled(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderCoordinatesFromWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderCoordinatesFromWindow(SDL_Renderer* renderer, float window_x, float window_y, float* x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderCoordinatesToWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderCoordinatesToWindow(SDL_Renderer* renderer, float x, float y, float* window_x, float* window_y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderFillRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderFillRect(SDL_Renderer* renderer, SDL_FRect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderFillRects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderFillRects(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderGeometry")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderGeometry(SDL_Renderer* renderer, SDL_Texture* texture, SDL_Vertex* vertices, int num_vertices, int* indices, int num_indices);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderGeometryRaw")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderGeometryRaw(SDL_Renderer* renderer, SDL_Texture* texture, float* xy, int xy_stride, SDL_FColor* color, int color_stride, float* uv, int uv_stride, int num_vertices, void* indices, int num_indices, int size_indices);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderLine")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderLine(SDL_Renderer* renderer, float x1, float y1, float x2, float y2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderLines")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderLines(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderPoint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderPoint(SDL_Renderer* renderer, float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderPoints")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderPoints(SDL_Renderer* renderer, SDL_FPoint* points, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderPresent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderPresent(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderReadPixels")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_RenderReadPixels(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderRect(SDL_Renderer* renderer, SDL_FRect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderRects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderRects(SDL_Renderer* renderer, SDL_FRect* rects, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderTexture(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, SDL_FRect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderTexture9Grid")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderTexture9Grid(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, SDL_FRect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderTextureRotated")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderTextureRotated(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, SDL_FRect* dstrect, double angle, SDL_FPoint* center, SDL_FlipMode flip);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderTextureTiled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RenderTextureTiled(SDL_Renderer* renderer, SDL_Texture* texture, SDL_FRect* srcrect, float scale, SDL_FRect* dstrect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RenderViewportSet")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_RenderViewportSet(SDL_Renderer* renderer);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ReportAssertion")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_AssertState SDL_ReportAssertion(SDL_AssertData* data, CString func, CString file, int line);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetAssertionReport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ResetAssertionReport();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetHint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ResetHint(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetHints")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ResetHints();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetKeyboard")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ResetKeyboard();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResetLogPriorities")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ResetLogPriorities();

    [LibraryImport(LibraryName, EntryPoint = "SDL_RestoreWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RestoreWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResumeAudioDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ResumeAudioDevice(SDL_AudioDeviceID dev);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResumeAudioStreamDevice")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ResumeAudioStreamDevice(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ResumeHaptic")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ResumeHaptic(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RumbleGamepad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RumbleGamepad(SDL_Gamepad* gamepad, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RumbleGamepadTriggers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RumbleGamepadTriggers(SDL_Gamepad* gamepad, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RumbleJoystick")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RumbleJoystick(SDL_Joystick* joystick, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RumbleJoystickTriggers")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RumbleJoystickTriggers(SDL_Joystick* joystick, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms);

    [LibraryImport(LibraryName, EntryPoint = "SDL_RunHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_RunHapticEffect(SDL_Haptic* haptic, int effect, Uint32 iterations);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SaveBMP")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SaveBMP(SDL_Surface* surface, CString file);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SaveBMP_IO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SaveBMP_IO(SDL_Surface* surface, SDL_IOStream* dst, SDL_bool closeio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ScaleSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Surface* SDL_ScaleSurface(SDL_Surface* surface, int width, int height, SDL_ScaleMode scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ScreenKeyboardShown")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ScreenKeyboardShown(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ScreenSaverEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_ScreenSaverEnabled();

    [LibraryImport(LibraryName, EntryPoint = "SDL_SeekIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Sint64 SDL_SeekIO(SDL_IOStream* context, Sint64 offset, SDL_IOWhence whence);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SendGamepadEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SendGamepadEffect(SDL_Gamepad* gamepad, void* data, int size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SendJoystickEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SendJoystickEffect(SDL_Joystick* joystick, void* data, int size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SendJoystickVirtualSensorData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SendJoystickVirtualSensorData(SDL_Joystick* joystick, SDL_SensorType type, Uint64 sensor_timestamp, float* data, int num_values);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAppMetadata")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAppMetadata(CString appname, CString appversion, CString appidentifier);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAppMetadataProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAppMetadataProperty(CString name, CString value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAssertionHandler")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetAssertionHandler(SDL_AssertionHandler handler, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAudioDeviceGain")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAudioDeviceGain(SDL_AudioDeviceID devid, float gain);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAudioPostmixCallback")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAudioPostmixCallback(SDL_AudioDeviceID devid, SDL_AudioPostmixCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAudioStreamFormat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAudioStreamFormat(SDL_AudioStream* stream, SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAudioStreamFrequencyRatio(SDL_AudioStream* stream, float ratio);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAudioStreamGain")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAudioStreamGain(SDL_AudioStream* stream, float gain);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAudioStreamGetCallback")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAudioStreamGetCallback(SDL_AudioStream* stream, SDL_AudioStreamCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAudioStreamInputChannelMap(SDL_AudioStream* stream, int* chmap, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAudioStreamOutputChannelMap(SDL_AudioStream* stream, int* chmap, int count);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetAudioStreamPutCallback")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetAudioStreamPutCallback(SDL_AudioStream* stream, SDL_AudioStreamCallback callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetBooleanProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetBooleanProperty(SDL_PropertiesID props, CString name, SDL_bool value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetClipboardData")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, void* userdata, CString* mime_types, ulong num_mime_types);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetClipboardText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetClipboardText(CString text);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetCursor(SDL_Cursor* cursor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetError")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetError(CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetEventEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetEventEnabled(Uint32 type, SDL_bool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetEventFilter")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetEventFilter(SDL_EventFilter filter, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetFloatProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetFloatProperty(SDL_PropertiesID props, CString name, float value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadEventsEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetGamepadEventsEnabled(SDL_bool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadLED")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetGamepadLED(SDL_Gamepad* gamepad, Uint8 red, Uint8 green, Uint8 blue);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadMapping")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetGamepadMapping(SDL_JoystickID instance_id, CString mapping);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetGamepadPlayerIndex(SDL_Gamepad* gamepad, int player_index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetGamepadSensorEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetGamepadSensorEnabled(SDL_Gamepad* gamepad, SDL_SensorType type, SDL_bool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetHapticAutocenter")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetHapticAutocenter(SDL_Haptic* haptic, int autocenter);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetHapticGain")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetHapticGain(SDL_Haptic* haptic, int gain);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetHint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetHint(CString name, CString value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetHintWithPriority")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetHintWithPriority(CString name, CString value, SDL_HintPriority priority);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickEventsEnabled")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetJoystickEventsEnabled(SDL_bool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickLED")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetJoystickLED(SDL_Joystick* joystick, Uint8 red, Uint8 green, Uint8 blue);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickPlayerIndex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetJoystickPlayerIndex(SDL_Joystick* joystick, int player_index);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualAxis")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetJoystickVirtualAxis(SDL_Joystick* joystick, int axis, Sint16 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualBall")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetJoystickVirtualBall(SDL_Joystick* joystick, int ball, Sint16 xrel, Sint16 yrel);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualButton")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetJoystickVirtualButton(SDL_Joystick* joystick, int button, Uint8 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualHat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetJoystickVirtualHat(SDL_Joystick* joystick, int hat, Uint8 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetJoystickVirtualTouchpad(SDL_Joystick* joystick, int touchpad, int finger, Uint8 state, float x, float y, float pressure);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetLogOutputFunction")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetLogOutputFunction(SDL_LogOutputFunction callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetLogPriorities")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetLogPriorities(SDL_LogPriority priority);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetLogPriority")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetLogPriority(int category, SDL_LogPriority priority);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetLogPriorityPrefix")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetLogPriorityPrefix(SDL_LogPriority priority, CString prefix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetMemoryFunctions")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetMemoryFunctions(SDL_malloc_func malloc_func, SDL_calloc_func calloc_func, SDL_realloc_func realloc_func, SDL_free_func free_func);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetModState")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetModState(SDL_Keymod modstate);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetNumberProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetNumberProperty(SDL_PropertiesID props, CString name, Sint64 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetPaletteColors")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetPaletteColors(SDL_Palette* palette, SDL_Color* colors, int firstcolor, int ncolors);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetPointerProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetPointerProperty(SDL_PropertiesID props, CString name, void* value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetPointerPropertyWithCleanup(SDL_PropertiesID props, CString name, void* value, SDL_CleanupPropertyCallback cleanup, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetPrimarySelectionText")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetPrimarySelectionText(CString text);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderClipRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderClipRect(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderColorScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderColorScale(SDL_Renderer* renderer, float scale);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderDrawBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderDrawBlendMode(SDL_Renderer* renderer, SDL_BlendMode blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderDrawColor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderDrawColor(SDL_Renderer* renderer, Uint8 r, Uint8 g, Uint8 b, Uint8 a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderDrawColorFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderDrawColorFloat(SDL_Renderer* renderer, float r, float g, float b, float a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderLogicalPresentation")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderLogicalPresentation(SDL_Renderer* renderer, int w, int h, SDL_RendererLogicalPresentation mode, SDL_ScaleMode scale_mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderScale")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderScale(SDL_Renderer* renderer, float scaleX, float scaleY);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderTarget")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderTarget(SDL_Renderer* renderer, SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderVSync")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderVSync(SDL_Renderer* renderer, int vsync);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetRenderViewport")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetRenderViewport(SDL_Renderer* renderer, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetScancodeName")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetScancodeName(SDL_Scancode scancode, CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetStringProperty")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetStringProperty(SDL_PropertiesID props, CString name, CString value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceAlphaMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetSurfaceAlphaMod(SDL_Surface* surface, Uint8 alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceClipRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_SetSurfaceClipRect(SDL_Surface* surface, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceColorKey")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetSurfaceColorKey(SDL_Surface* surface, SDL_bool enabled, Uint32 key);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceColorMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetSurfaceColorMod(SDL_Surface* surface, Uint8 r, Uint8 g, Uint8 b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceColorspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetSurfaceColorspace(SDL_Surface* surface, SDL_Colorspace colorspace);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfacePalette")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetSurfaceRLE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetSurfaceRLE(SDL_Surface* surface, SDL_bool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTLS")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetTLS(SDL_TLSID* id, void* value, SDL_TLSDestructorCallback destructor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextInputArea")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetTextInputArea(SDL_Window* window, SDL_Rect* rect, int cursor);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureAlphaMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetTextureAlphaMod(SDL_Texture* texture, Uint8 alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureAlphaModFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetTextureAlphaModFloat(SDL_Texture* texture, float alpha);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureBlendMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetTextureBlendMode(SDL_Texture* texture, SDL_BlendMode blendMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureColorMod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetTextureColorMod(SDL_Texture* texture, Uint8 r, Uint8 g, Uint8 b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureColorModFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetTextureColorModFloat(SDL_Texture* texture, float r, float g, float b);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetTextureScaleMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetTextureScaleMode(SDL_Texture* texture, SDL_ScaleMode scaleMode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetThreadPriority")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetThreadPriority(SDL_ThreadPriority priority);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowAlwaysOnTop")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowAlwaysOnTop(SDL_Window* window, SDL_bool on_top);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowAspectRatio")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowAspectRatio(SDL_Window* window, float min_aspect, float max_aspect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowBordered")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowBordered(SDL_Window* window, SDL_bool bordered);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowFocusable")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowFocusable(SDL_Window* window, SDL_bool focusable);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowFullscreen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowFullscreen(SDL_Window* window, SDL_bool fullscreen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowFullscreenMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowFullscreenMode(SDL_Window* window, SDL_DisplayMode* mode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowHitTest")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowHitTest(SDL_Window* window, SDL_HitTest callback, void* callback_data);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowIcon")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowIcon(SDL_Window* window, SDL_Surface* icon);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowKeyboardGrab")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowKeyboardGrab(SDL_Window* window, SDL_bool grabbed);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowMaximumSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowMaximumSize(SDL_Window* window, int max_w, int max_h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowMinimumSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowMinimumSize(SDL_Window* window, int min_w, int min_h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowModalFor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowModalFor(SDL_Window* modal_window, SDL_Window* parent_window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowMouseGrab")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowMouseGrab(SDL_Window* window, SDL_bool grabbed);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowMouseRect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowMouseRect(SDL_Window* window, SDL_Rect* rect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowOpacity")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowOpacity(SDL_Window* window, float opacity);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowPosition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowPosition(SDL_Window* window, int x, int y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowRelativeMouseMode")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowRelativeMouseMode(SDL_Window* window, SDL_bool enabled);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowResizable")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowResizable(SDL_Window* window, SDL_bool resizable);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowShape")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowShape(SDL_Window* window, SDL_Surface* shape);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowSize")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowSize(SDL_Window* window, int w, int h);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowSurfaceVSync")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowSurfaceVSync(SDL_Window* window, int vsync);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetWindowTitle")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SetWindowTitle(SDL_Window* window, CString title);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SetX11EventHook")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_SetX11EventHook(SDL_X11EventHook callback, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowCursor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ShowCursor();

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowMessageBox")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ShowMessageBox(SDL_MessageBoxData* messageboxdata, int* buttonid);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowOpenFileDialog")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ShowOpenFileDialog(SDL_DialogFileCallback callback, void* userdata, SDL_Window* window, SDL_DialogFileFilter* filters, int nfilters, CString default_location, SDL_bool allow_many);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowOpenFolderDialog")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ShowOpenFolderDialog(SDL_DialogFileCallback callback, void* userdata, SDL_Window* window, CString default_location, SDL_bool allow_many);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowSaveFileDialog")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_ShowSaveFileDialog(SDL_DialogFileCallback callback, void* userdata, SDL_Window* window, SDL_DialogFileFilter* filters, int nfilters, CString default_location);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowSimpleMessageBox")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, CString title, CString message, SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ShowWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ShowWindowSystemMenu")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ShowWindowSystemMenu(SDL_Window* window, int x, int y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SignalCondition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SignalCondition(SDL_Condition* cond);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SignalSemaphore")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SignalSemaphore(SDL_Semaphore* sem);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StartTextInput")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_StartTextInput(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StartTextInputWithProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_StartTextInputWithProperties(SDL_Window* window, SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StepUTF8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_StepUTF8(CString* pstr, ulong* pslen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StopHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_StopHapticEffect(SDL_Haptic* haptic, int effect);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StopHapticEffects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_StopHapticEffects(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StopHapticRumble")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_StopHapticRumble(SDL_Haptic* haptic);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StopTextInput")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_StopTextInput(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StorageReady")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_StorageReady(SDL_Storage* storage);

    [LibraryImport(LibraryName, EntryPoint = "SDL_StringToGUID")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_GUID SDL_StringToGUID(CString pchGUID);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SurfaceHasAlternateImages")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_SurfaceHasAlternateImages(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SurfaceHasColorKey")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_SurfaceHasColorKey(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SurfaceHasRLE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_SurfaceHasRLE(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_SyncWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_SyncWindow(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TellIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Sint64 SDL_TellIO(SDL_IOStream* context);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TextInputActive")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_TextInputActive(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TimeFromWindows")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_Time SDL_TimeFromWindows(Uint32 dwLowDateTime, Uint32 dwHighDateTime);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TimeToDateTime")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_TimeToDateTime(SDL_Time ticks, SDL_DateTime* dt, SDL_bool localTime);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TimeToWindows")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_TimeToWindows(SDL_Time ticks, Uint32* dwLowDateTime, Uint32* dwHighDateTime);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TryLockMutex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_TryLockMutex(SDL_Mutex* mutex);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TryLockRWLockForReading")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_TryLockRWLockForReading(SDL_RWLock* rwlock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TryLockRWLockForWriting")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_TryLockRWLockForWriting(SDL_RWLock* rwlock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TryLockSpinlock")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_TryLockSpinlock(SDL_SpinLock* @lock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_TryWaitSemaphore")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_TryWaitSemaphore(SDL_Semaphore* sem);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UCS4ToUTF8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_UCS4ToUTF8(Uint32 codepoint, CString dst);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnbindAudioStream")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnbindAudioStream(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnbindAudioStreams")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnbindAudioStreams(SDL_AudioStream** streams, int num_streams);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnloadObject")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnloadObject(void* handle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockAudioStream")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_UnlockAudioStream(SDL_AudioStream* stream);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockJoysticks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockJoysticks();

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockMutex")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockMutex(SDL_Mutex* mutex);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockProperties")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockProperties(SDL_PropertiesID props);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockRWLock")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockRWLock(SDL_RWLock* rwlock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockSpinlock")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockSpinlock(SDL_SpinLock* @lock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockSurface(SDL_Surface* surface);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UnlockTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UnlockTexture(SDL_Texture* texture);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateGamepads")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UpdateGamepads();

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateHapticEffect")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_UpdateHapticEffect(SDL_Haptic* haptic, int effect, SDL_HapticEffect* data);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateJoysticks")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UpdateJoysticks();

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateNVTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_UpdateNVTexture(SDL_Texture* texture, SDL_Rect* rect, Uint8* Yplane, int Ypitch, Uint8* UVplane, int UVpitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateSensors")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_UpdateSensors();

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_UpdateTexture(SDL_Texture* texture, SDL_Rect* rect, void* pixels, int pitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateWindowSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_UpdateWindowSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateWindowSurfaceRects")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_UpdateWindowSurfaceRects(SDL_Window* window, SDL_Rect* rects, int numrects);

    [LibraryImport(LibraryName, EntryPoint = "SDL_UpdateYUVTexture")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_UpdateYUVTexture(SDL_Texture* texture, SDL_Rect* rect, Uint8* Yplane, int Ypitch, Uint8* Uplane, int Upitch, Uint8* Vplane, int Vpitch);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitCondition")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_WaitCondition(SDL_Condition* cond, SDL_Mutex* mutex);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitConditionTimeout")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_WaitConditionTimeout(SDL_Condition* cond, SDL_Mutex* mutex, Sint32 timeoutMS);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitEvent")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WaitEvent(SDL_Event* @event);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitEventTimeout")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WaitEventTimeout(SDL_Event* @event, Sint32 timeoutMS);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitSemaphore")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_WaitSemaphore(SDL_Semaphore* sem);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitSemaphoreTimeout")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_WaitSemaphoreTimeout(SDL_Semaphore* sem, Sint32 timeoutMS);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WaitThread")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_WaitThread(SDL_Thread* thread, int* status);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WarpMouseGlobal")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_WarpMouseGlobal(float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WarpMouseInWindow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_WarpMouseInWindow(SDL_Window* window, float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WasInit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_InitFlags SDL_WasInit(SDL_InitFlags flags);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WindowHasSurface")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WindowHasSurface(SDL_Window* window);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteIO")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_WriteIO(SDL_IOStream* context, void* ptr, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS16BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteS16BE(SDL_IOStream* dst, Sint16 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS16LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteS16LE(SDL_IOStream* dst, Sint16 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS32BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteS32BE(SDL_IOStream* dst, Sint32 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS32LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteS32LE(SDL_IOStream* dst, Sint32 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS64BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteS64BE(SDL_IOStream* dst, Sint64 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS64LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteS64LE(SDL_IOStream* dst, Sint64 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteS8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteS8(SDL_IOStream* dst, Sint8 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteStorageFile")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_WriteStorageFile(SDL_Storage* storage, CString path, void* source, Uint64 length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteSurfacePixel")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_WriteSurfacePixel(SDL_Surface* surface, int x, int y, Uint8 r, Uint8 g, Uint8 b, Uint8 a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteSurfacePixelFloat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_WriteSurfacePixelFloat(SDL_Surface* surface, int x, int y, float r, float g, float b, float a);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU16BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteU16BE(SDL_IOStream* dst, Uint16 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU16LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteU16LE(SDL_IOStream* dst, Uint16 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU32BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteU32BE(SDL_IOStream* dst, Uint32 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU32LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteU32LE(SDL_IOStream* dst, Uint32 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU64BE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteU64BE(SDL_IOStream* dst, Uint64 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU64LE")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteU64LE(SDL_IOStream* dst, Uint64 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_WriteU8")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_bool SDL_WriteU8(SDL_IOStream* dst, Uint8 value);

    [LibraryImport(LibraryName, EntryPoint = "SDL_abs")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_abs(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_acos")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_acos(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_acosf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_acosf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_aligned_alloc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_aligned_alloc(ulong alignment, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_aligned_free")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_aligned_free(void* mem);

    [LibraryImport(LibraryName, EntryPoint = "SDL_asin")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_asin(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_asinf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_asinf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_asprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_asprintf(CString* strp, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atan")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_atan(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atan2")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_atan2(double y, double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atan2f")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_atan2f(float y, float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atanf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_atanf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atof")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_atof(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_atoi")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_atoi(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_bsearch")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_bsearch(void* key, void* @base, ulong nmemb, ulong size, SDL_CompareCallback compare);

    [LibraryImport(LibraryName, EntryPoint = "SDL_bsearch_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_bsearch_r(void* key, void* @base, ulong nmemb, ulong size, SDL_CompareCallback_r compare, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_calloc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_calloc(ulong nmemb, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ceil")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_ceil(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ceilf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_ceilf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_copysign")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_copysign(double x, double y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_copysignf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_copysignf(float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_cos")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_cos(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_cosf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_cosf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_crc16")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint16 SDL_crc16(Uint16 crc, void* data, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_crc32")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_crc32(Uint32 crc, void* data, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_exp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_exp(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_expf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_expf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_fabs")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_fabs(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_fabsf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_fabsf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_floor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_floor(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_floorf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_floorf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_fmod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_fmod(double x, double y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_fmodf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_fmodf(float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_free")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_free(void* mem);

    [LibraryImport(LibraryName, EntryPoint = "SDL_getenv")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_getenv(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_ble_scan")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_hid_ble_scan(SDL_bool active);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_close")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_close(SDL_hid_device* dev);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_device_change_count")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_hid_device_change_count();

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_enumerate")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_hid_device_info* SDL_hid_enumerate(ushort vendor_id, ushort product_id);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_exit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_exit();

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_free_enumeration")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_hid_free_enumeration(SDL_hid_device_info* devs);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_device_info")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_hid_device_info* SDL_hid_get_device_info(SDL_hid_device* dev);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_feature_report")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_feature_report(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_indexed_string", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_indexed_string(SDL_hid_device* dev, int string_index, CStringWide @string, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_input_report")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_input_report(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_manufacturer_string", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_manufacturer_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_product_string", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_product_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_report_descriptor")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_report_descriptor(SDL_hid_device* dev, byte* buf, ulong buf_size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_get_serial_number_string", StringMarshalling = StringMarshalling.Utf8)]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_get_serial_number_string(SDL_hid_device* dev, CStringWide @string, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_init")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_init();

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_open")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_hid_device* SDL_hid_open(ushort vendor_id, ushort product_id, CStringWide serial_number);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_open_path")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_hid_device* SDL_hid_open_path(CString path);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_read")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_read(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_read_timeout")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_read_timeout(SDL_hid_device* dev, byte* data, ulong length, int milliseconds);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_send_feature_report")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_send_feature_report(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_set_nonblocking")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_set_nonblocking(SDL_hid_device* dev, int nonblock);

    [LibraryImport(LibraryName, EntryPoint = "SDL_hid_write")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_hid_write(SDL_hid_device* dev, byte* data, ulong length);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iconv")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_iconv(SDL_iconv_t cd, CString* inbuf, ulong* inbytesleft, CString* outbuf, ulong* outbytesleft);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iconv_close")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_iconv_close(SDL_iconv_t cd);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iconv_open")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial SDL_iconv_t SDL_iconv_open(CString tocode, CString fromcode);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iconv_string")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_iconv_string(CString tocode, CString fromcode, CString inbuf, ulong inbytesleft);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isalnum")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isalnum(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isalpha")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isalpha(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isblank")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isblank(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_iscntrl")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_iscntrl(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isdigit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isdigit(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isgraph")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isgraph(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isinf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isinf(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isinff")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isinff(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_islower")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_islower(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isnan")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isnan(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isnanf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isnanf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isprint")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isprint(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ispunct")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_ispunct(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isspace")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isspace(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isupper")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isupper(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_isxdigit")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_isxdigit(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_itoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_itoa(int value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_lltoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_lltoa(Sint64 value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_log")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_log(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_log10")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_log10(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_log10f")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_log10f(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_logf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_logf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_lround")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_lround(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_lroundf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_lroundf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ltoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_ltoa(long value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_malloc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_malloc(ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memcmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_memcmp(void* s1, void* s2, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memcpy")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_memcpy(void* dst, void* src, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memmove")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_memmove(void* dst, void* src, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memset")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_memset(void* dst, int c, ulong len);

    [LibraryImport(LibraryName, EntryPoint = "SDL_memset4")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_memset4(void* dst, Uint32 val, ulong dwords);

    [LibraryImport(LibraryName, EntryPoint = "SDL_modf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_modf(double x, double* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_modff")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_modff(float x, float* y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_pow")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_pow(double x, double y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_powf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_powf(float x, float y);

    [LibraryImport(LibraryName, EntryPoint = "SDL_qsort")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_qsort(void* @base, ulong nmemb, ulong size, SDL_CompareCallback compare);

    [LibraryImport(LibraryName, EntryPoint = "SDL_qsort_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_qsort_r(void* @base, ulong nmemb, ulong size, SDL_CompareCallback_r compare, void* userdata);

    [LibraryImport(LibraryName, EntryPoint = "SDL_rand")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Sint32 SDL_rand(Sint32 n);

    [LibraryImport(LibraryName, EntryPoint = "SDL_rand_bits")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_rand_bits();

    [LibraryImport(LibraryName, EntryPoint = "SDL_rand_bits_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint32 SDL_rand_bits_r(Uint64* state);

    [LibraryImport(LibraryName, EntryPoint = "SDL_rand_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Sint32 SDL_rand_r(Uint64* state, Sint32 n);

    [LibraryImport(LibraryName, EntryPoint = "SDL_randf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_randf();

    [LibraryImport(LibraryName, EntryPoint = "SDL_randf_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_randf_r(Uint64* state);

    [LibraryImport(LibraryName, EntryPoint = "SDL_realloc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void* SDL_realloc(void* mem, ulong size);

    [LibraryImport(LibraryName, EntryPoint = "SDL_round")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_round(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_roundf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_roundf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_scalbn")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_scalbn(double x, int n);

    [LibraryImport(LibraryName, EntryPoint = "SDL_scalbnf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_scalbnf(float x, int n);

    [LibraryImport(LibraryName, EntryPoint = "SDL_setenv")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_setenv(CString name, CString value, int overwrite);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sin")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_sin(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sinf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_sinf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_snprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_snprintf(CString text, ulong maxlen, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sqrt")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_sqrt(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sqrtf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_sqrtf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_srand")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial void SDL_srand(Uint64 seed);

    [LibraryImport(LibraryName, EntryPoint = "SDL_sscanf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_sscanf(CString text, CString fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strcasecmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_strcasecmp(CString str1, CString str2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strcasestr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strcasestr(CString haystack, CString needle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strchr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strchr(CString str, int c);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strcmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_strcmp(CString str1, CString str2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strdup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strdup(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strlcat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strlcat(CString dst, CString src, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strlcpy")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strlcpy(CString dst, CString src, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strlen(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strlwr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strlwr(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strncasecmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_strncasecmp(CString str1, CString str2, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strncmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_strncmp(CString str1, CString str2, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strndup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strndup(CString str, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strnlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strnlen(CString str, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strnstr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strnstr(CString haystack, CString needle, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strrchr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strrchr(CString str, int c);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strrev")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strrev(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strstr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strstr(CString haystack, CString needle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtod")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_strtod(CString str, CString* endp);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtok_r")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strtok_r(CString s1, CString s2, CString* saveptr);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtol")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_strtol(CString str, CString* endp, int @base);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtoll")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Sint64 SDL_strtoll(CString str, CString* endp, int @base);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtoul")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_strtoul(CString str, CString* endp, int @base);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strtoull")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial Uint64 SDL_strtoull(CString str, CString* endp, int @base);

    [LibraryImport(LibraryName, EntryPoint = "SDL_strupr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_strupr(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_swprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_swprintf(CStringWide text, ulong maxlen, CStringWide fmt);

    [LibraryImport(LibraryName, EntryPoint = "SDL_tan")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_tan(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_tanf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_tanf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_tolower")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_tolower(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_toupper")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_toupper(int x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_trunc")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial double SDL_trunc(double x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_truncf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial float SDL_truncf(float x);

    [LibraryImport(LibraryName, EntryPoint = "SDL_uitoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_uitoa(uint value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ulltoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_ulltoa(Uint64 value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_ultoa")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CString SDL_ultoa(ulong value, CString str, int radix);

    [LibraryImport(LibraryName, EntryPoint = "SDL_unsetenv")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_unsetenv(CString name);

    [LibraryImport(LibraryName, EntryPoint = "SDL_utf8strlcpy")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_utf8strlcpy(CString dst, CString src, ulong dst_bytes);

    [LibraryImport(LibraryName, EntryPoint = "SDL_utf8strlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_utf8strlen(CString str);

    [LibraryImport(LibraryName, EntryPoint = "SDL_utf8strnlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_utf8strnlen(CString str, ulong bytes);

    [LibraryImport(LibraryName, EntryPoint = "SDL_vasprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_vasprintf(CString* strp, CString fmt, IntPtr ap);

    [LibraryImport(LibraryName, EntryPoint = "SDL_vsnprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_vsnprintf(CString text, ulong maxlen, CString fmt, IntPtr ap);

    [LibraryImport(LibraryName, EntryPoint = "SDL_vsscanf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_vsscanf(CString text, CString fmt, IntPtr ap);

    [LibraryImport(LibraryName, EntryPoint = "SDL_vswprintf")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_vswprintf(CStringWide text, ulong maxlen, CStringWide fmt, IntPtr ap);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcscasecmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_wcscasecmp(CStringWide str1, CStringWide str2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcscmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_wcscmp(CStringWide str1, CStringWide str2);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsdup")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CStringWide SDL_wcsdup(CStringWide wstr);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcslcat")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_wcslcat(CStringWide dst, CStringWide src, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcslcpy")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_wcslcpy(CStringWide dst, CStringWide src, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcslen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_wcslen(CStringWide wstr);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsncasecmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_wcsncasecmp(CStringWide str1, CStringWide str2, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsncmp")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial int SDL_wcsncmp(CStringWide str1, CStringWide str2, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsnlen")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial ulong SDL_wcsnlen(CStringWide wstr, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsnstr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CStringWide SDL_wcsnstr(CStringWide haystack, CStringWide needle, ulong maxlen);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcsstr")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial CStringWide SDL_wcsstr(CStringWide haystack, CStringWide needle);

    [LibraryImport(LibraryName, EntryPoint = "SDL_wcstol")]
    [UnmanagedCallConv(CallConvs = new[] { typeof(CallConvCdecl) })]
    public static partial long SDL_wcstol(CStringWide str, CStringWide* endp, int @base);

    #endregion

    #region Types

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState
    {
        public delegate* unmanaged<SDL_AssertData*, void*, SDL_AssertState> Pointer;

        public FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState(delegate* unmanaged<SDL_AssertData*, void*, SDL_AssertState> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDLEGLAttribPtr
    {
        public delegate* unmanaged<SDL_EGLAttrib*> Pointer;

        public FnPtr_SDLEGLAttribPtr(delegate* unmanaged<SDL_EGLAttrib*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDLEGLintPtr
    {
        public delegate* unmanaged<SDL_EGLint*> Pointer;

        public FnPtr_SDLEGLintPtr(delegate* unmanaged<SDL_EGLint*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult
    {
        public delegate* unmanaged<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> Pointer;

        public FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult(delegate* unmanaged<SDL_Window*, SDL_Point*, void*, SDL_HitTestResult> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Ulong_Ulong_VoidPtr
    {
        public delegate* unmanaged<ulong, ulong, void*> Pointer;

        public FnPtr_Ulong_Ulong_VoidPtr(delegate* unmanaged<ulong, ulong, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Ulong_VoidPtr
    {
        public delegate* unmanaged<ulong, void*> Pointer;

        public FnPtr_Ulong_VoidPtr(delegate* unmanaged<ulong, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_Void
    {
        public delegate* unmanaged<void> Pointer;

        public FnPtr_Void(delegate* unmanaged<void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CStringPtr_Int_Void
    {
        public delegate* unmanaged<void*, CString*, int, void> Pointer;

        public FnPtr_VoidPtr_CStringPtr_Int_Void(delegate* unmanaged<void*, CString*, int, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CString_CString_CString_Void
    {
        public delegate* unmanaged<void*, CString, CString, CString, void> Pointer;

        public FnPtr_VoidPtr_CString_CString_CString_Void(delegate* unmanaged<void*, CString, CString, CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CString_CString_Int
    {
        public delegate* unmanaged<void*, CString, CString, int> Pointer;

        public FnPtr_VoidPtr_CString_CString_Int(delegate* unmanaged<void*, CString, CString, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CString_Int
    {
        public delegate* unmanaged<void*, CString, int> Pointer;

        public FnPtr_VoidPtr_CString_Int(delegate* unmanaged<void*, CString, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CString_SDLEnumerateDirectoryCallback_VoidPtr_Int
    {
        public delegate* unmanaged<void*, CString, SDL_EnumerateDirectoryCallback, void*, int> Pointer;

        public FnPtr_VoidPtr_CString_SDLEnumerateDirectoryCallback_VoidPtr_Int(delegate* unmanaged<void*, CString, SDL_EnumerateDirectoryCallback, void*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CString_SDLPathInfoPtr_Int
    {
        public delegate* unmanaged<void*, CString, SDL_PathInfo*, int> Pointer;

        public FnPtr_VoidPtr_CString_SDLPathInfoPtr_Int(delegate* unmanaged<void*, CString, SDL_PathInfo*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CString_UlongPtr_VoidPtr
    {
        public delegate* unmanaged<void*, CString, ulong*, void*> Pointer;

        public FnPtr_VoidPtr_CString_UlongPtr_VoidPtr(delegate* unmanaged<void*, CString, ulong*, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_CString_VoidPtr_Uint64_Int
    {
        public delegate* unmanaged<void*, CString, void*, Uint64, int> Pointer;

        public FnPtr_VoidPtr_CString_VoidPtr_Uint64_Int(delegate* unmanaged<void*, CString, void*, Uint64, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Int
    {
        public delegate* unmanaged<void*, int> Pointer;

        public FnPtr_VoidPtr_Int(delegate* unmanaged<void*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void
    {
        public delegate* unmanaged<void*, int, SDL_LogPriority, CString, void> Pointer;

        public FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void(delegate* unmanaged<void*, int, SDL_LogPriority, CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Int_Void
    {
        public delegate* unmanaged<void*, int, void> Pointer;

        public FnPtr_VoidPtr_Int_Void(delegate* unmanaged<void*, int, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLAudioSpecPtr_FloatPtr_Int_Void
    {
        public delegate* unmanaged<void*, SDL_AudioSpec*, float*, int, void> Pointer;

        public FnPtr_VoidPtr_SDLAudioSpecPtr_FloatPtr_Int_Void(delegate* unmanaged<void*, SDL_AudioSpec*, float*, int, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLAudioStreamPtr_Int_Int_Void
    {
        public delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> Pointer;

        public FnPtr_VoidPtr_SDLAudioStreamPtr_Int_Int_Void(delegate* unmanaged<void*, SDL_AudioStream*, int, int, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLBool
    {
        public delegate* unmanaged<void*, SDL_bool> Pointer;

        public FnPtr_VoidPtr_SDLBool(delegate* unmanaged<void*, SDL_bool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLBool_Int
    {
        public delegate* unmanaged<void*, SDL_bool, int> Pointer;

        public FnPtr_VoidPtr_SDLBool_Int(delegate* unmanaged<void*, SDL_bool, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLEventPtr_SDLBool
    {
        public delegate* unmanaged<void*, SDL_Event*, SDL_bool> Pointer;

        public FnPtr_VoidPtr_SDLEventPtr_SDLBool(delegate* unmanaged<void*, SDL_Event*, SDL_bool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLPropertiesID_CString_Void
    {
        public delegate* unmanaged<void*, SDL_PropertiesID, CString, void> Pointer;

        public FnPtr_VoidPtr_SDLPropertiesID_CString_Void(delegate* unmanaged<void*, SDL_PropertiesID, CString, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLTimerID_Uint32_Uint32
    {
        public delegate* unmanaged<void*, SDL_TimerID, Uint32, Uint32> Pointer;

        public FnPtr_VoidPtr_SDLTimerID_Uint32_Uint32(delegate* unmanaged<void*, SDL_TimerID, Uint32, Uint32> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_SDLTimerID_Uint64_Uint64
    {
        public delegate* unmanaged<void*, SDL_TimerID, Uint64, Uint64> Pointer;

        public FnPtr_VoidPtr_SDLTimerID_Uint64_Uint64(delegate* unmanaged<void*, SDL_TimerID, Uint64, Uint64> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Sint64
    {
        public delegate* unmanaged<void*, Sint64> Pointer;

        public FnPtr_VoidPtr_Sint64(delegate* unmanaged<void*, Sint64> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Sint64_SDLIOWhence_Sint64
    {
        public delegate* unmanaged<void*, Sint64, SDL_IOWhence, Sint64> Pointer;

        public FnPtr_VoidPtr_Sint64_SDLIOWhence_Sint64(delegate* unmanaged<void*, Sint64, SDL_IOWhence, Sint64> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Uint16_Uint16_Int
    {
        public delegate* unmanaged<void*, Uint16, Uint16, int> Pointer;

        public FnPtr_VoidPtr_Uint16_Uint16_Int(delegate* unmanaged<void*, Uint16, Uint16, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Uint64
    {
        public delegate* unmanaged<void*, Uint64> Pointer;

        public FnPtr_VoidPtr_Uint64(delegate* unmanaged<void*, Uint64> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Uint8_Uint8_Uint8_Int
    {
        public delegate* unmanaged<void*, Uint8, Uint8, Uint8, int> Pointer;

        public FnPtr_VoidPtr_Uint8_Uint8_Uint8_Int(delegate* unmanaged<void*, Uint8, Uint8, Uint8, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Ulong_VoidPtr
    {
        public delegate* unmanaged<void*, ulong, void*> Pointer;

        public FnPtr_VoidPtr_Ulong_VoidPtr(delegate* unmanaged<void*, ulong, void*> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_Void
    {
        public delegate* unmanaged<void*, void> Pointer;

        public FnPtr_VoidPtr_Void(delegate* unmanaged<void*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr_Int
    {
        public delegate* unmanaged<void*, void*, int> Pointer;

        public FnPtr_VoidPtr_VoidPtr_Int(delegate* unmanaged<void*, void*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr_Int_Int
    {
        public delegate* unmanaged<void*, void*, int, int> Pointer;

        public FnPtr_VoidPtr_VoidPtr_Int_Int(delegate* unmanaged<void*, void*, int, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr_Ulong_SDLIOStatusPtr_Ulong
    {
        public delegate* unmanaged<void*, void*, ulong, SDL_IOStatus*, ulong> Pointer;

        public FnPtr_VoidPtr_VoidPtr_Ulong_SDLIOStatusPtr_Ulong(delegate* unmanaged<void*, void*, ulong, SDL_IOStatus*, ulong> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr_Void
    {
        public delegate* unmanaged<void*, void*, void> Pointer;

        public FnPtr_VoidPtr_VoidPtr_Void(delegate* unmanaged<void*, void*, void> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_VoidPtr_VoidPtr_Int
    {
        public delegate* unmanaged<void*, void*, void*, int> Pointer;

        public FnPtr_VoidPtr_VoidPtr_VoidPtr_Int(delegate* unmanaged<void*, void*, void*, int> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct FnPtr_VoidPtr_XEventPtr_SDLBool
    {
        public delegate* unmanaged<void*, XEvent*, SDL_bool> Pointer;

        public FnPtr_VoidPtr_XEventPtr_SDLBool(delegate* unmanaged<void*, XEvent*, SDL_bool> pointer)
        {
            Pointer = pointer;
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_AssertData
    {
        [FieldOffset(0)] // size = 4
        public SDL_bool always_ignore;

        [FieldOffset(4)] // size = 4
        public uint trigger_count;

        [FieldOffset(8)] // size = 8
        public CString _condition;

        public string condition
        {
            get
            {
                return CString.ToString(_condition);
            }
            set
            {
                _condition = CString.FromString(value);
            }
        }

        [FieldOffset(16)] // size = 8
        public CString _filename;

        public string filename
        {
            get
            {
                return CString.ToString(_filename);
            }
            set
            {
                _filename = CString.FromString(value);
            }
        }

        [FieldOffset(24)] // size = 4
        public int linenum;

        [FieldOffset(32)] // size = 8
        public CString _function;

        public string function
        {
            get
            {
                return CString.ToString(_function);
            }
            set
            {
                _function = CString.FromString(value);
            }
        }

        [FieldOffset(40)] // size = 8
        public SDL_AssertData* next;
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_AtomicInt
    {
        [FieldOffset(0)] // size = 4
        public int value;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_AudioDeviceEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_AudioDeviceID which;

        [FieldOffset(20)] // size = 1
        public Uint8 recording;

        [FieldOffset(21)] // size = 1
        public Uint8 padding1;

        [FieldOffset(22)] // size = 1
        public Uint8 padding2;

        [FieldOffset(23)] // size = 1
        public Uint8 padding3;
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_AudioSpec
    {
        [FieldOffset(0)] // size = 4
        public SDL_AudioFormat format;

        [FieldOffset(4)] // size = 4
        public int channels;

        [FieldOffset(8)] // size = 4
        public int freq;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_CameraDeviceEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_CameraID which;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 4)]
    public struct SDL_CameraSpec
    {
        [FieldOffset(0)] // size = 4
        public SDL_PixelFormat format;

        [FieldOffset(4)] // size = 4
        public SDL_Colorspace colorspace;

        [FieldOffset(8)] // size = 4
        public int width;

        [FieldOffset(12)] // size = 4
        public int height;

        [FieldOffset(16)] // size = 4
        public int framerate_numerator;

        [FieldOffset(20)] // size = 4
        public int framerate_denominator;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_ClipboardEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 1)]
    public struct SDL_Color
    {
        [FieldOffset(0)] // size = 1
        public Uint8 r;

        [FieldOffset(1)] // size = 1
        public Uint8 g;

        [FieldOffset(2)] // size = 1
        public Uint8 b;

        [FieldOffset(3)] // size = 1
        public Uint8 a;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_CommonEvent
    {
        [FieldOffset(0)] // size = 4
        public Uint32 type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 36, Pack = 4)]
    public struct SDL_DateTime
    {
        [FieldOffset(0)] // size = 4
        public int year;

        [FieldOffset(4)] // size = 4
        public int month;

        [FieldOffset(8)] // size = 4
        public int day;

        [FieldOffset(12)] // size = 4
        public int hour;

        [FieldOffset(16)] // size = 4
        public int minute;

        [FieldOffset(20)] // size = 4
        public int second;

        [FieldOffset(24)] // size = 4
        public int nanosecond;

        [FieldOffset(28)] // size = 4
        public int day_of_week;

        [FieldOffset(32)] // size = 4
        public int utc_offset;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_DialogFileFilter
    {
        [FieldOffset(0)] // size = 8
        public CString _name;

        public string name
        {
            get
            {
                return CString.ToString(_name);
            }
            set
            {
                _name = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CString _pattern;

        public string pattern
        {
            get
            {
                return CString.ToString(_pattern);
            }
            set
            {
                _pattern = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_DisplayEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_DisplayID displayID;

        [FieldOffset(20)] // size = 4
        public Sint32 data1;

        [FieldOffset(24)] // size = 4
        public Sint32 data2;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_DisplayMode
    {
        [FieldOffset(0)] // size = 4
        public SDL_DisplayID displayID;

        [FieldOffset(4)] // size = 4
        public SDL_PixelFormat format;

        [FieldOffset(8)] // size = 4
        public int w;

        [FieldOffset(12)] // size = 4
        public int h;

        [FieldOffset(16)] // size = 4
        public float pixel_density;

        [FieldOffset(20)] // size = 4
        public float refresh_rate;

        [FieldOffset(24)] // size = 4
        public int refresh_rate_numerator;

        [FieldOffset(28)] // size = 4
        public int refresh_rate_denominator;

        [FieldOffset(32)] // size = 8
        public SDL_DisplayModeData* @internal;
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_DropEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public float x;

        [FieldOffset(24)] // size = 4
        public float y;

        [FieldOffset(32)] // size = 8
        public CString _source;

        public string source
        {
            get
            {
                return CString.ToString(_source);
            }
            set
            {
                _source = CString.FromString(value);
            }
        }

        [FieldOffset(40)] // size = 8
        public CString _data;

        public string data
        {
            get
            {
                return CString.ToString(_data);
            }
            set
            {
                _data = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 128, Pack = 8)]
    public struct SDL_Event
    {
        [FieldOffset(0)] // size = 4
        public Uint32 type;

        [FieldOffset(0)] // size = 16
        public SDL_CommonEvent common;

        [FieldOffset(0)] // size = 32
        public SDL_DisplayEvent display;

        [FieldOffset(0)] // size = 32
        public SDL_WindowEvent window;

        [FieldOffset(0)] // size = 24
        public SDL_KeyboardDeviceEvent kdevice;

        [FieldOffset(0)] // size = 40
        public SDL_KeyboardEvent key;

        [FieldOffset(0)] // size = 40
        public SDL_TextEditingEvent edit;

        [FieldOffset(0)] // size = 48
        public SDL_TextEditingCandidatesEvent edit_candidates;

        [FieldOffset(0)] // size = 32
        public SDL_TextInputEvent text;

        [FieldOffset(0)] // size = 24
        public SDL_MouseDeviceEvent mdevice;

        [FieldOffset(0)] // size = 48
        public SDL_MouseMotionEvent motion;

        [FieldOffset(0)] // size = 40
        public SDL_MouseButtonEvent button;

        [FieldOffset(0)] // size = 48
        public SDL_MouseWheelEvent wheel;

        [FieldOffset(0)] // size = 24
        public SDL_JoyDeviceEvent jdevice;

        [FieldOffset(0)] // size = 32
        public SDL_JoyAxisEvent jaxis;

        [FieldOffset(0)] // size = 32
        public SDL_JoyBallEvent jball;

        [FieldOffset(0)] // size = 24
        public SDL_JoyHatEvent jhat;

        [FieldOffset(0)] // size = 24
        public SDL_JoyButtonEvent jbutton;

        [FieldOffset(0)] // size = 32
        public SDL_JoyBatteryEvent jbattery;

        [FieldOffset(0)] // size = 24
        public SDL_GamepadDeviceEvent gdevice;

        [FieldOffset(0)] // size = 32
        public SDL_GamepadAxisEvent gaxis;

        [FieldOffset(0)] // size = 24
        public SDL_GamepadButtonEvent gbutton;

        [FieldOffset(0)] // size = 40
        public SDL_GamepadTouchpadEvent gtouchpad;

        [FieldOffset(0)] // size = 48
        public SDL_GamepadSensorEvent gsensor;

        [FieldOffset(0)] // size = 24
        public SDL_AudioDeviceEvent adevice;

        [FieldOffset(0)] // size = 24
        public SDL_CameraDeviceEvent cdevice;

        [FieldOffset(0)] // size = 56
        public SDL_SensorEvent sensor;

        [FieldOffset(0)] // size = 16
        public SDL_QuitEvent quit;

        [FieldOffset(0)] // size = 40
        public SDL_UserEvent user;

        [FieldOffset(0)] // size = 56
        public SDL_TouchFingerEvent tfinger;

        [FieldOffset(0)] // size = 64
        public SDL_PenTipEvent ptip;

        [FieldOffset(0)] // size = 64
        public SDL_PenMotionEvent pmotion;

        [FieldOffset(0)] // size = 64
        public SDL_PenButtonEvent pbutton;

        [FieldOffset(0)] // size = 48
        public SDL_DropEvent drop;

        [FieldOffset(0)] // size = 16
        public SDL_ClipboardEvent clipboard;

        [FieldOffset(0)] // size = 128
        public fixed byte _padding[128]; // Uint8[128]

        public readonly Span<Uint8> padding
        {
            get
            {
                fixed (SDL_Event* @this = &this)
                {
                    var pointer = &@this->_padding[0];
                    var span = new Span<Uint8>(pointer, 128);
                    return span;
                }
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_FColor
    {
        [FieldOffset(0)] // size = 4
        public float r;

        [FieldOffset(4)] // size = 4
        public float g;

        [FieldOffset(8)] // size = 4
        public float b;

        [FieldOffset(12)] // size = 4
        public float a;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_FPoint
    {
        [FieldOffset(0)] // size = 4
        public float x;

        [FieldOffset(4)] // size = 4
        public float y;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_FRect
    {
        [FieldOffset(0)] // size = 4
        public float x;

        [FieldOffset(4)] // size = 4
        public float y;

        [FieldOffset(8)] // size = 4
        public float w;

        [FieldOffset(12)] // size = 4
        public float h;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_Finger
    {
        [FieldOffset(0)] // size = 8
        public SDL_FingerID id;

        [FieldOffset(8)] // size = 4
        public float x;

        [FieldOffset(12)] // size = 4
        public float y;

        [FieldOffset(16)] // size = 4
        public float pressure;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 1)]
    public struct SDL_GUID
    {
        [FieldOffset(0)] // size = 16
        public fixed byte _data[16]; // Uint8[16]

        public readonly Span<Uint8> data
        {
            get
            {
                fixed (SDL_GUID* @this = &this)
                {
                    var pointer = &@this->_data[0];
                    var span = new Span<Uint8>(pointer, 16);
                    return span;
                }
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_GamepadAxisEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public Uint8 axis;

        [FieldOffset(21)] // size = 1
        public Uint8 padding1;

        [FieldOffset(22)] // size = 1
        public Uint8 padding2;

        [FieldOffset(23)] // size = 1
        public Uint8 padding3;

        [FieldOffset(24)] // size = 2
        public Sint16 value;

        [FieldOffset(26)] // size = 2
        public Uint16 padding4;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct SDL_GamepadBinding
    {
        [FieldOffset(0)] // size = 4
        public SDL_GamepadBindingType input_type;

        [FieldOffset(4)] // size = 12
        public SDL_GamepadBinding_ANONYMOUS_1 input;

        [FieldOffset(16)] // size = 4
        public SDL_GamepadBindingType output_type;

        [FieldOffset(20)] // size = 12
        public SDL_GamepadBinding_ANONYMOUS_3 output;
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_GamepadBinding_ANONYMOUS_1
    {
        [FieldOffset(0)] // size = 4
        public int button;

        [FieldOffset(0)] // size = 12
        public SDL_GamepadBinding_ANONYMOUS_1_ANONYMOUS_1 axis;

        [FieldOffset(0)] // size = 8
        public SDL_GamepadBinding_ANONYMOUS_1_ANONYMOUS_2 hat;
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_GamepadBinding_ANONYMOUS_1_ANONYMOUS_1
    {
        [FieldOffset(0)] // size = 4
        public int axis;

        [FieldOffset(4)] // size = 4
        public int axis_min;

        [FieldOffset(8)] // size = 4
        public int axis_max;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_GamepadBinding_ANONYMOUS_1_ANONYMOUS_2
    {
        [FieldOffset(0)] // size = 4
        public int hat;

        [FieldOffset(4)] // size = 4
        public int hat_mask;
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_GamepadBinding_ANONYMOUS_3
    {
        [FieldOffset(0)] // size = 4
        public SDL_GamepadButton button;

        [FieldOffset(0)] // size = 12
        public SDL_GamepadBinding_ANONYMOUS_3_ANONYMOUS_1 axis;
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_GamepadBinding_ANONYMOUS_3_ANONYMOUS_1
    {
        [FieldOffset(0)] // size = 4
        public SDL_GamepadAxis axis;

        [FieldOffset(4)] // size = 4
        public int axis_min;

        [FieldOffset(8)] // size = 4
        public int axis_max;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_GamepadButtonEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public Uint8 button;

        [FieldOffset(21)] // size = 1
        public Uint8 state;

        [FieldOffset(22)] // size = 1
        public Uint8 padding1;

        [FieldOffset(23)] // size = 1
        public Uint8 padding2;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_GamepadDeviceEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_GamepadSensorEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 4
        public Sint32 sensor;

        [FieldOffset(24)] // size = 12
        public fixed float data[3];

        [FieldOffset(40)] // size = 8
        public Uint64 sensor_timestamp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_GamepadTouchpadEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 4
        public Sint32 touchpad;

        [FieldOffset(24)] // size = 4
        public Sint32 finger;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;

        [FieldOffset(36)] // size = 4
        public float pressure;
    }

    [StructLayout(LayoutKind.Explicit, Size = 68, Pack = 4)]
    public struct SDL_HapticCondition
    {
        [FieldOffset(0)] // size = 2
        public Uint16 type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public Uint32 length;

        [FieldOffset(24)] // size = 2
        public Uint16 delay;

        [FieldOffset(26)] // size = 2
        public Uint16 button;

        [FieldOffset(28)] // size = 2
        public Uint16 interval;

        [FieldOffset(30)] // size = 6
        public fixed byte _right_sat[6]; // Uint16[3]

        public readonly Span<Uint16> right_sat
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_right_sat[0];
                    var span = new Span<Uint16>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(36)] // size = 6
        public fixed byte _left_sat[6]; // Uint16[3]

        public readonly Span<Uint16> left_sat
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_left_sat[0];
                    var span = new Span<Uint16>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(42)] // size = 6
        public fixed byte _right_coeff[6]; // Sint16[3]

        public readonly Span<Sint16> right_coeff
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_right_coeff[0];
                    var span = new Span<Sint16>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(48)] // size = 6
        public fixed byte _left_coeff[6]; // Sint16[3]

        public readonly Span<Sint16> left_coeff
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_left_coeff[0];
                    var span = new Span<Sint16>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(54)] // size = 6
        public fixed byte _deadband[6]; // Uint16[3]

        public readonly Span<Uint16> deadband
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_deadband[0];
                    var span = new Span<Uint16>(pointer, 3);
                    return span;
                }
            }
        }

        [FieldOffset(60)] // size = 6
        public fixed byte _center[6]; // Sint16[3]

        public readonly Span<Sint16> center
        {
            get
            {
                fixed (SDL_HapticCondition* @this = &this)
                {
                    var pointer = &@this->_center[0];
                    var span = new Span<Sint16>(pointer, 3);
                    return span;
                }
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 4)]
    public struct SDL_HapticConstant
    {
        [FieldOffset(0)] // size = 2
        public Uint16 type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public Uint32 length;

        [FieldOffset(24)] // size = 2
        public Uint16 delay;

        [FieldOffset(26)] // size = 2
        public Uint16 button;

        [FieldOffset(28)] // size = 2
        public Uint16 interval;

        [FieldOffset(30)] // size = 2
        public Sint16 level;

        [FieldOffset(32)] // size = 2
        public Uint16 attack_length;

        [FieldOffset(34)] // size = 2
        public Uint16 attack_level;

        [FieldOffset(36)] // size = 2
        public Uint16 fade_length;

        [FieldOffset(38)] // size = 2
        public Uint16 fade_level;
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_HapticCustom
    {
        [FieldOffset(0)] // size = 2
        public Uint16 type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public Uint32 length;

        [FieldOffset(24)] // size = 2
        public Uint16 delay;

        [FieldOffset(26)] // size = 2
        public Uint16 button;

        [FieldOffset(28)] // size = 2
        public Uint16 interval;

        [FieldOffset(30)] // size = 1
        public Uint8 channels;

        [FieldOffset(32)] // size = 2
        public Uint16 period;

        [FieldOffset(34)] // size = 2
        public Uint16 samples;

        [FieldOffset(40)] // size = 8
        public Uint16* data;

        [FieldOffset(48)] // size = 2
        public Uint16 attack_length;

        [FieldOffset(50)] // size = 2
        public Uint16 attack_level;

        [FieldOffset(52)] // size = 2
        public Uint16 fade_length;

        [FieldOffset(54)] // size = 2
        public Uint16 fade_level;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_HapticDirection
    {
        [FieldOffset(0)] // size = 1
        public Uint8 type;

        [FieldOffset(4)] // size = 12
        public fixed byte _dir[12]; // Sint32[3]

        public readonly Span<Sint32> dir
        {
            get
            {
                fixed (SDL_HapticDirection* @this = &this)
                {
                    var pointer = &@this->_dir[0];
                    var span = new Span<Sint32>(pointer, 3);
                    return span;
                }
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 72, Pack = 8)]
    public struct SDL_HapticEffect
    {
        [FieldOffset(0)] // size = 2
        public Uint16 type;

        [FieldOffset(0)] // size = 40
        public SDL_HapticConstant constant;

        [FieldOffset(0)] // size = 48
        public SDL_HapticPeriodic periodic;

        [FieldOffset(0)] // size = 68
        public SDL_HapticCondition condition;

        [FieldOffset(0)] // size = 44
        public SDL_HapticRamp ramp;

        [FieldOffset(0)] // size = 12
        public SDL_HapticLeftRight leftright;

        [FieldOffset(0)] // size = 56
        public SDL_HapticCustom custom;
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_HapticLeftRight
    {
        [FieldOffset(0)] // size = 2
        public Uint16 type;

        [FieldOffset(4)] // size = 4
        public Uint32 length;

        [FieldOffset(8)] // size = 2
        public Uint16 large_magnitude;

        [FieldOffset(10)] // size = 2
        public Uint16 small_magnitude;
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 4)]
    public struct SDL_HapticPeriodic
    {
        [FieldOffset(0)] // size = 2
        public Uint16 type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public Uint32 length;

        [FieldOffset(24)] // size = 2
        public Uint16 delay;

        [FieldOffset(26)] // size = 2
        public Uint16 button;

        [FieldOffset(28)] // size = 2
        public Uint16 interval;

        [FieldOffset(30)] // size = 2
        public Uint16 period;

        [FieldOffset(32)] // size = 2
        public Sint16 magnitude;

        [FieldOffset(34)] // size = 2
        public Sint16 offset;

        [FieldOffset(36)] // size = 2
        public Uint16 phase;

        [FieldOffset(38)] // size = 2
        public Uint16 attack_length;

        [FieldOffset(40)] // size = 2
        public Uint16 attack_level;

        [FieldOffset(42)] // size = 2
        public Uint16 fade_length;

        [FieldOffset(44)] // size = 2
        public Uint16 fade_level;
    }

    [StructLayout(LayoutKind.Explicit, Size = 44, Pack = 4)]
    public struct SDL_HapticRamp
    {
        [FieldOffset(0)] // size = 2
        public Uint16 type;

        [FieldOffset(4)] // size = 16
        public SDL_HapticDirection direction;

        [FieldOffset(20)] // size = 4
        public Uint32 length;

        [FieldOffset(24)] // size = 2
        public Uint16 delay;

        [FieldOffset(26)] // size = 2
        public Uint16 button;

        [FieldOffset(28)] // size = 2
        public Uint16 interval;

        [FieldOffset(30)] // size = 2
        public Sint16 start;

        [FieldOffset(32)] // size = 2
        public Sint16 end;

        [FieldOffset(34)] // size = 2
        public Uint16 attack_length;

        [FieldOffset(36)] // size = 2
        public Uint16 attack_level;

        [FieldOffset(38)] // size = 2
        public Uint16 fade_length;

        [FieldOffset(40)] // size = 2
        public Uint16 fade_level;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_IOStreamInterface
    {
        [FieldOffset(0)] // size = 8
        public FnPtr_VoidPtr_Sint64 size;

        [FieldOffset(8)] // size = 8
        public FnPtr_VoidPtr_Sint64_SDLIOWhence_Sint64 seek;

        [FieldOffset(16)] // size = 8
        public FnPtr_VoidPtr_VoidPtr_Ulong_SDLIOStatusPtr_Ulong read;

        [FieldOffset(24)] // size = 8
        public FnPtr_VoidPtr_VoidPtr_Ulong_SDLIOStatusPtr_Ulong write;

        [FieldOffset(32)] // size = 8
        public FnPtr_VoidPtr_Int close;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_JoyAxisEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public Uint8 axis;

        [FieldOffset(21)] // size = 1
        public Uint8 padding1;

        [FieldOffset(22)] // size = 1
        public Uint8 padding2;

        [FieldOffset(23)] // size = 1
        public Uint8 padding3;

        [FieldOffset(24)] // size = 2
        public Sint16 value;

        [FieldOffset(26)] // size = 2
        public Uint16 padding4;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_JoyBallEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public Uint8 ball;

        [FieldOffset(21)] // size = 1
        public Uint8 padding1;

        [FieldOffset(22)] // size = 1
        public Uint8 padding2;

        [FieldOffset(23)] // size = 1
        public Uint8 padding3;

        [FieldOffset(24)] // size = 2
        public Sint16 xrel;

        [FieldOffset(26)] // size = 2
        public Sint16 yrel;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_JoyBatteryEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 4
        public SDL_PowerState state;

        [FieldOffset(24)] // size = 4
        public int percent;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_JoyButtonEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public Uint8 button;

        [FieldOffset(21)] // size = 1
        public Uint8 state;

        [FieldOffset(22)] // size = 1
        public Uint8 padding1;

        [FieldOffset(23)] // size = 1
        public Uint8 padding2;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_JoyDeviceEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_JoyHatEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_JoystickID which;

        [FieldOffset(20)] // size = 1
        public Uint8 hat;

        [FieldOffset(21)] // size = 1
        public Uint8 value;

        [FieldOffset(22)] // size = 1
        public Uint8 padding1;

        [FieldOffset(23)] // size = 1
        public Uint8 padding2;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_KeyboardDeviceEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_KeyboardID which;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_KeyboardEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_KeyboardID which;

        [FieldOffset(24)] // size = 4
        public SDL_Scancode scancode;

        [FieldOffset(28)] // size = 4
        public SDL_Keycode key;

        [FieldOffset(32)] // size = 2
        public SDL_Keymod mod;

        [FieldOffset(34)] // size = 2
        public Uint16 raw;

        [FieldOffset(36)] // size = 1
        public Uint8 state;

        [FieldOffset(37)] // size = 1
        public Uint8 repeat;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_Locale
    {
        [FieldOffset(0)] // size = 8
        public CString _language;

        public string language
        {
            get
            {
                return CString.ToString(_language);
            }
            set
            {
                _language = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 8
        public CString _country;

        public string country
        {
            get
            {
                return CString.ToString(_country);
            }
            set
            {
                _country = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_MessageBoxButtonData
    {
        [FieldOffset(0)] // size = 4
        public SDL_MessageBoxButtonFlags flags;

        [FieldOffset(4)] // size = 4
        public int buttonID;

        [FieldOffset(8)] // size = 8
        public CString _text;

        public string text
        {
            get
            {
                return CString.ToString(_text);
            }
            set
            {
                _text = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 3, Pack = 1)]
    public struct SDL_MessageBoxColor
    {
        [FieldOffset(0)] // size = 1
        public Uint8 r;

        [FieldOffset(1)] // size = 1
        public Uint8 g;

        [FieldOffset(2)] // size = 1
        public Uint8 b;
    }

    [StructLayout(LayoutKind.Explicit, Size = 15, Pack = 1)]
    public struct SDL_MessageBoxColorScheme
    {
        [FieldOffset(0)] // size = 15
        public fixed byte _colors[15]; // SDL_MessageBoxColor[5]

        public readonly Span<SDL_MessageBoxColor> colors
        {
            get
            {
                fixed (SDL_MessageBoxColorScheme* @this = &this)
                {
                    var pointer = &@this->_colors[0];
                    var span = new Span<SDL_MessageBoxColor>(pointer, 5);
                    return span;
                }
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_MessageBoxData
    {
        [FieldOffset(0)] // size = 4
        public SDL_MessageBoxFlags flags;

        [FieldOffset(8)] // size = 8
        public SDL_Window* window;

        [FieldOffset(16)] // size = 8
        public CString _title;

        public string title
        {
            get
            {
                return CString.ToString(_title);
            }
            set
            {
                _title = CString.FromString(value);
            }
        }

        [FieldOffset(24)] // size = 8
        public CString _message;

        public string message
        {
            get
            {
                return CString.ToString(_message);
            }
            set
            {
                _message = CString.FromString(value);
            }
        }

        [FieldOffset(32)] // size = 4
        public int numbuttons;

        [FieldOffset(40)] // size = 8
        public SDL_MessageBoxButtonData* buttons;

        [FieldOffset(48)] // size = 8
        public SDL_MessageBoxColorScheme* colorScheme;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_MouseButtonEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_MouseID which;

        [FieldOffset(24)] // size = 1
        public Uint8 button;

        [FieldOffset(25)] // size = 1
        public Uint8 state;

        [FieldOffset(26)] // size = 1
        public Uint8 clicks;

        [FieldOffset(27)] // size = 1
        public Uint8 padding;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_MouseDeviceEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_MouseID which;
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_MouseMotionEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_MouseID which;

        [FieldOffset(24)] // size = 4
        public SDL_MouseButtonFlags state;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;

        [FieldOffset(36)] // size = 4
        public float xrel;

        [FieldOffset(40)] // size = 4
        public float yrel;
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_MouseWheelEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_MouseID which;

        [FieldOffset(24)] // size = 4
        public float x;

        [FieldOffset(28)] // size = 4
        public float y;

        [FieldOffset(32)] // size = 4
        public SDL_MouseWheelDirection direction;

        [FieldOffset(36)] // size = 4
        public float mouse_x;

        [FieldOffset(40)] // size = 4
        public float mouse_y;
    }

    [StructLayout(LayoutKind.Explicit, Size = 24, Pack = 8)]
    public struct SDL_Palette
    {
        [FieldOffset(0)] // size = 4
        public int ncolors;

        [FieldOffset(8)] // size = 8
        public SDL_Color* colors;

        [FieldOffset(16)] // size = 4
        public Uint32 version;

        [FieldOffset(20)] // size = 4
        public int refcount;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_PathInfo
    {
        [FieldOffset(0)] // size = 4
        public SDL_PathType type;

        [FieldOffset(8)] // size = 8
        public Uint64 size;

        [FieldOffset(16)] // size = 8
        public SDL_Time create_time;

        [FieldOffset(24)] // size = 8
        public SDL_Time modify_time;

        [FieldOffset(32)] // size = 8
        public SDL_Time access_time;
    }

    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct SDL_PenButtonEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_PenID which;

        [FieldOffset(24)] // size = 1
        public Uint8 button;

        [FieldOffset(25)] // size = 1
        public Uint8 state;

        [FieldOffset(26)] // size = 2
        public Uint16 pen_state;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;

        [FieldOffset(36)] // size = 24
        public fixed float axes[6];
    }

    [StructLayout(LayoutKind.Explicit, Size = 12, Pack = 4)]
    public struct SDL_PenCapabilityInfo
    {
        [FieldOffset(0)] // size = 4
        public float max_tilt;

        [FieldOffset(4)] // size = 4
        public Uint32 wacom_id;

        [FieldOffset(8)] // size = 1
        public Sint8 num_buttons;
    }

    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct SDL_PenMotionEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_PenID which;

        [FieldOffset(24)] // size = 1
        public Uint8 padding1;

        [FieldOffset(25)] // size = 1
        public Uint8 padding2;

        [FieldOffset(26)] // size = 2
        public Uint16 pen_state;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;

        [FieldOffset(36)] // size = 24
        public fixed float axes[6];
    }

    [StructLayout(LayoutKind.Explicit, Size = 64, Pack = 8)]
    public struct SDL_PenTipEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public SDL_PenID which;

        [FieldOffset(24)] // size = 1
        public Uint8 tip;

        [FieldOffset(25)] // size = 1
        public Uint8 state;

        [FieldOffset(26)] // size = 2
        public Uint16 pen_state;

        [FieldOffset(28)] // size = 4
        public float x;

        [FieldOffset(32)] // size = 4
        public float y;

        [FieldOffset(36)] // size = 24
        public fixed float axes[6];
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct SDL_PixelFormatDetails
    {
        [FieldOffset(0)] // size = 4
        public SDL_PixelFormat format;

        [FieldOffset(4)] // size = 1
        public Uint8 bits_per_pixel;

        [FieldOffset(5)] // size = 1
        public Uint8 bytes_per_pixel;

        [FieldOffset(6)] // size = 2
        public fixed byte _padding[2]; // Uint8[2]

        public readonly Span<Uint8> padding
        {
            get
            {
                fixed (SDL_PixelFormatDetails* @this = &this)
                {
                    var pointer = &@this->_padding[0];
                    var span = new Span<Uint8>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(8)] // size = 4
        public Uint32 Rmask;

        [FieldOffset(12)] // size = 4
        public Uint32 Gmask;

        [FieldOffset(16)] // size = 4
        public Uint32 Bmask;

        [FieldOffset(20)] // size = 4
        public Uint32 Amask;

        [FieldOffset(24)] // size = 1
        public Uint8 Rbits;

        [FieldOffset(25)] // size = 1
        public Uint8 Gbits;

        [FieldOffset(26)] // size = 1
        public Uint8 Bbits;

        [FieldOffset(27)] // size = 1
        public Uint8 Abits;

        [FieldOffset(28)] // size = 1
        public Uint8 Rshift;

        [FieldOffset(29)] // size = 1
        public Uint8 Gshift;

        [FieldOffset(30)] // size = 1
        public Uint8 Bshift;

        [FieldOffset(31)] // size = 1
        public Uint8 Ashift;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_Point
    {
        [FieldOffset(0)] // size = 4
        public int x;

        [FieldOffset(4)] // size = 4
        public int y;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 8)]
    public struct SDL_QuitEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 16, Pack = 4)]
    public struct SDL_Rect
    {
        [FieldOffset(0)] // size = 4
        public int x;

        [FieldOffset(4)] // size = 4
        public int y;

        [FieldOffset(8)] // size = 4
        public int w;

        [FieldOffset(12)] // size = 4
        public int h;
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_SensorEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_SensorID which;

        [FieldOffset(20)] // size = 24
        public fixed float data[6];

        [FieldOffset(48)] // size = 8
        public Uint64 sensor_timestamp;
    }

    [StructLayout(LayoutKind.Explicit, Size = 88, Pack = 8)]
    public struct SDL_StorageInterface
    {
        [FieldOffset(0)] // size = 8
        public FnPtr_VoidPtr_Int close;

        [FieldOffset(8)] // size = 8
        public FnPtr_VoidPtr_SDLBool ready;

        [FieldOffset(16)] // size = 8
        public FnPtr_VoidPtr_CString_SDLEnumerateDirectoryCallback_VoidPtr_Int enumerate;

        [FieldOffset(24)] // size = 8
        public FnPtr_VoidPtr_CString_SDLPathInfoPtr_Int info;

        [FieldOffset(32)] // size = 8
        public FnPtr_VoidPtr_CString_VoidPtr_Uint64_Int read_file;

        [FieldOffset(40)] // size = 8
        public FnPtr_VoidPtr_CString_VoidPtr_Uint64_Int write_file;

        [FieldOffset(48)] // size = 8
        public FnPtr_VoidPtr_CString_Int mkdir;

        [FieldOffset(56)] // size = 8
        public FnPtr_VoidPtr_CString_Int remove;

        [FieldOffset(64)] // size = 8
        public FnPtr_VoidPtr_CString_CString_Int rename;

        [FieldOffset(72)] // size = 8
        public FnPtr_VoidPtr_CString_CString_Int copy;

        [FieldOffset(80)] // size = 8
        public FnPtr_VoidPtr_Uint64 space_remaining;
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_Surface
    {
        [FieldOffset(0)] // size = 4
        public SDL_SurfaceFlags flags;

        [FieldOffset(4)] // size = 4
        public SDL_PixelFormat format;

        [FieldOffset(8)] // size = 4
        public int w;

        [FieldOffset(12)] // size = 4
        public int h;

        [FieldOffset(16)] // size = 4
        public int pitch;

        [FieldOffset(24)] // size = 8
        public void* pixels;

        [FieldOffset(32)] // size = 4
        public int refcount;

        [FieldOffset(40)] // size = 8
        public SDL_SurfaceData* @internal;
    }

    [StructLayout(LayoutKind.Explicit, Size = 48, Pack = 8)]
    public struct SDL_TextEditingCandidatesEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(24)] // size = 8
        public CString* candidates;

        [FieldOffset(32)] // size = 4
        public Sint32 num_candidates;

        [FieldOffset(36)] // size = 4
        public Sint32 selected_candidate;

        [FieldOffset(40)] // size = 4
        public SDL_bool horizontal;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_TextEditingEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(24)] // size = 8
        public CString _text;

        public string text
        {
            get
            {
                return CString.ToString(_text);
            }
            set
            {
                _text = CString.FromString(value);
            }
        }

        [FieldOffset(32)] // size = 4
        public Sint32 start;

        [FieldOffset(36)] // size = 4
        public Sint32 length;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_TextInputEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(24)] // size = 8
        public CString _text;

        public string text
        {
            get
            {
                return CString.ToString(_text);
            }
            set
            {
                _text = CString.FromString(value);
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 56, Pack = 8)]
    public struct SDL_TouchFingerEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 8
        public SDL_TouchID touchID;

        [FieldOffset(24)] // size = 8
        public SDL_FingerID fingerID;

        [FieldOffset(32)] // size = 4
        public float x;

        [FieldOffset(36)] // size = 4
        public float y;

        [FieldOffset(40)] // size = 4
        public float dx;

        [FieldOffset(44)] // size = 4
        public float dy;

        [FieldOffset(48)] // size = 4
        public float pressure;

        [FieldOffset(52)] // size = 4
        public SDL_WindowID windowID;
    }

    [StructLayout(LayoutKind.Explicit, Size = 40, Pack = 8)]
    public struct SDL_UserEvent
    {
        [FieldOffset(0)] // size = 4
        public Uint32 type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public Sint32 code;

        [FieldOffset(24)] // size = 8
        public void* data1;

        [FieldOffset(32)] // size = 8
        public void* data2;
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 4)]
    public struct SDL_Vertex
    {
        [FieldOffset(0)] // size = 8
        public SDL_FPoint position;

        [FieldOffset(8)] // size = 16
        public SDL_FColor color;

        [FieldOffset(24)] // size = 8
        public SDL_FPoint tex_coord;
    }

    [StructLayout(LayoutKind.Explicit, Size = 120, Pack = 8)]
    public struct SDL_VirtualJoystickDesc
    {
        [FieldOffset(0)] // size = 2
        public Uint16 type;

        [FieldOffset(2)] // size = 2
        public Uint16 padding;

        [FieldOffset(4)] // size = 2
        public Uint16 vendor_id;

        [FieldOffset(6)] // size = 2
        public Uint16 product_id;

        [FieldOffset(8)] // size = 2
        public Uint16 naxes;

        [FieldOffset(10)] // size = 2
        public Uint16 nbuttons;

        [FieldOffset(12)] // size = 2
        public Uint16 nballs;

        [FieldOffset(14)] // size = 2
        public Uint16 nhats;

        [FieldOffset(16)] // size = 2
        public Uint16 ntouchpads;

        [FieldOffset(18)] // size = 2
        public Uint16 nsensors;

        [FieldOffset(20)] // size = 4
        public fixed byte _padding2[4]; // Uint16[2]

        public readonly Span<Uint16> padding2
        {
            get
            {
                fixed (SDL_VirtualJoystickDesc* @this = &this)
                {
                    var pointer = &@this->_padding2[0];
                    var span = new Span<Uint16>(pointer, 2);
                    return span;
                }
            }
        }

        [FieldOffset(24)] // size = 4
        public Uint32 button_mask;

        [FieldOffset(28)] // size = 4
        public Uint32 axis_mask;

        [FieldOffset(32)] // size = 8
        public CString _name;

        public string name
        {
            get
            {
                return CString.ToString(_name);
            }
            set
            {
                _name = CString.FromString(value);
            }
        }

        [FieldOffset(40)] // size = 8
        public SDL_VirtualJoystickTouchpadDesc* touchpads;

        [FieldOffset(48)] // size = 8
        public SDL_VirtualJoystickSensorDesc* sensors;

        [FieldOffset(56)] // size = 8
        public void* userdata;

        [FieldOffset(64)] // size = 8
        public FnPtr_VoidPtr_Void Update;

        [FieldOffset(72)] // size = 8
        public FnPtr_VoidPtr_Int_Void SetPlayerIndex;

        [FieldOffset(80)] // size = 8
        public FnPtr_VoidPtr_Uint16_Uint16_Int Rumble;

        [FieldOffset(88)] // size = 8
        public FnPtr_VoidPtr_Uint16_Uint16_Int RumbleTriggers;

        [FieldOffset(96)] // size = 8
        public FnPtr_VoidPtr_Uint8_Uint8_Uint8_Int SetLED;

        [FieldOffset(104)] // size = 8
        public FnPtr_VoidPtr_VoidPtr_Int_Int SendEffect;

        [FieldOffset(112)] // size = 8
        public FnPtr_VoidPtr_SDLBool_Int SetSensorsEnabled;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 4)]
    public struct SDL_VirtualJoystickSensorDesc
    {
        [FieldOffset(0)] // size = 4
        public SDL_SensorType type;

        [FieldOffset(4)] // size = 4
        public float rate;
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 2)]
    public struct SDL_VirtualJoystickTouchpadDesc
    {
        [FieldOffset(0)] // size = 2
        public Uint16 nfingers;

        [FieldOffset(2)] // size = 6
        public fixed byte _padding[6]; // Uint16[3]

        public readonly Span<Uint16> padding
        {
            get
            {
                fixed (SDL_VirtualJoystickTouchpadDesc* @this = &this)
                {
                    var pointer = &@this->_padding[0];
                    var span = new Span<Uint16>(pointer, 3);
                    return span;
                }
            }
        }
    }

    [StructLayout(LayoutKind.Explicit, Size = 32, Pack = 8)]
    public struct SDL_WindowEvent
    {
        [FieldOffset(0)] // size = 4
        public SDL_EventType type;

        [FieldOffset(4)] // size = 4
        public Uint32 reserved;

        [FieldOffset(8)] // size = 8
        public Uint64 timestamp;

        [FieldOffset(16)] // size = 4
        public SDL_WindowID windowID;

        [FieldOffset(20)] // size = 4
        public Sint32 data1;

        [FieldOffset(24)] // size = 4
        public Sint32 data2;
    }

    [StructLayout(LayoutKind.Explicit, Size = 80, Pack = 8)]
    public struct SDL_hid_device_info
    {
        [FieldOffset(0)] // size = 8
        public CString _path;

        public string path
        {
            get
            {
                return CString.ToString(_path);
            }
            set
            {
                _path = CString.FromString(value);
            }
        }

        [FieldOffset(8)] // size = 2
        public ushort vendor_id;

        [FieldOffset(10)] // size = 2
        public ushort product_id;

        [FieldOffset(16)] // size = 8
        public CStringWide serial_number;

        [FieldOffset(24)] // size = 2
        public ushort release_number;

        [FieldOffset(32)] // size = 8
        public CStringWide manufacturer_string;

        [FieldOffset(40)] // size = 8
        public CStringWide product_string;

        [FieldOffset(48)] // size = 2
        public ushort usage_page;

        [FieldOffset(50)] // size = 2
        public ushort usage;

        [FieldOffset(52)] // size = 4
        public int interface_number;

        [FieldOffset(56)] // size = 4
        public int interface_class;

        [FieldOffset(60)] // size = 4
        public int interface_subclass;

        [FieldOffset(64)] // size = 4
        public int interface_protocol;

        [FieldOffset(68)] // size = 4
        public SDL_hid_bus_type bus_type;

        [FieldOffset(72)] // size = 8
        public SDL_hid_device_info* next;
    }

    public enum SDL_AssertState : int
    {
        SDL_ASSERTION_RETRY = 0,
        SDL_ASSERTION_BREAK = 1,
        SDL_ASSERTION_ABORT = 2,
        SDL_ASSERTION_IGNORE = 3,
        SDL_ASSERTION_ALWAYS_IGNORE = 4
    }

    public enum SDL_AudioFormat : int
    {
        SDL_AUDIO_U8 = 8,
        SDL_AUDIO_S8 = 32776,
        SDL_AUDIO_S16LE = 32784,
        SDL_AUDIO_S16BE = 36880,
        SDL_AUDIO_S32LE = 32800,
        SDL_AUDIO_S32BE = 36896,
        SDL_AUDIO_F32LE = 33056,
        SDL_AUDIO_F32BE = 37152
    }

    public enum SDL_BlendFactor : int
    {
        SDL_BLENDFACTOR_ZERO = 1,
        SDL_BLENDFACTOR_ONE = 2,
        SDL_BLENDFACTOR_SRC_COLOR = 3,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
        SDL_BLENDFACTOR_SRC_ALPHA = 5,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
        SDL_BLENDFACTOR_DST_COLOR = 7,
        SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
        SDL_BLENDFACTOR_DST_ALPHA = 9,
        SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10
    }

    public enum SDL_BlendOperation : int
    {
        SDL_BLENDOPERATION_ADD = 1,
        SDL_BLENDOPERATION_SUBTRACT = 2,
        SDL_BLENDOPERATION_REV_SUBTRACT = 3,
        SDL_BLENDOPERATION_MINIMUM = 4,
        SDL_BLENDOPERATION_MAXIMUM = 5
    }

    public enum SDL_CameraPosition : int
    {
        SDL_CAMERA_POSITION_UNKNOWN = 0,
        SDL_CAMERA_POSITION_FRONT_FACING = 1,
        SDL_CAMERA_POSITION_BACK_FACING = 2
    }

    public enum SDL_Colorspace : int
    {
        SDL_COLORSPACE_UNKNOWN = 0,
        SDL_COLORSPACE_SRGB = 301991328,
        SDL_COLORSPACE_SRGB_LINEAR = 301991168,
        SDL_COLORSPACE_HDR10 = 301999616,
        SDL_COLORSPACE_JPEG = 570426566,
        SDL_COLORSPACE_BT601_LIMITED = 554703046,
        SDL_COLORSPACE_BT601_FULL = 571480262,
        SDL_COLORSPACE_BT709_LIMITED = 554697761,
        SDL_COLORSPACE_BT709_FULL = 571474977,
        SDL_COLORSPACE_BT2020_LIMITED = 554706441,
        SDL_COLORSPACE_BT2020_FULL = 571483657
    }

    public enum SDL_DateFormat : int
    {
        SDL_DATE_FORMAT_YYYYMMDD = 0,
        SDL_DATE_FORMAT_DDMMYYYY = 1,
        SDL_DATE_FORMAT_MMDDYYYY = 2
    }

    public enum SDL_DisplayOrientation : int
    {
        SDL_ORIENTATION_UNKNOWN = 0,
        SDL_ORIENTATION_LANDSCAPE = 1,
        SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2,
        SDL_ORIENTATION_PORTRAIT = 3,
        SDL_ORIENTATION_PORTRAIT_FLIPPED = 4
    }

    public enum SDL_EventAction : int
    {
        SDL_ADDEVENT = 0,
        SDL_PEEKEVENT = 1,
        SDL_GETEVENT = 2
    }

    public enum SDL_EventType : int
    {
        SDL_EVENT_FIRST = 0,
        SDL_EVENT_QUIT = 256,
        SDL_EVENT_TERMINATING = 257,
        SDL_EVENT_LOW_MEMORY = 258,
        SDL_EVENT_WILL_ENTER_BACKGROUND = 259,
        SDL_EVENT_DID_ENTER_BACKGROUND = 260,
        SDL_EVENT_WILL_ENTER_FOREGROUND = 261,
        SDL_EVENT_DID_ENTER_FOREGROUND = 262,
        SDL_EVENT_LOCALE_CHANGED = 263,
        SDL_EVENT_SYSTEM_THEME_CHANGED = 264,
        SDL_EVENT_DISPLAY_ORIENTATION = 337,
        SDL_EVENT_DISPLAY_ADDED = 338,
        SDL_EVENT_DISPLAY_REMOVED = 339,
        SDL_EVENT_DISPLAY_MOVED = 340,
        SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED = 341,
        SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED = 342,
        SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = 343,
        SDL_EVENT_DISPLAY_FIRST = 337,
        SDL_EVENT_DISPLAY_LAST = 343,
        SDL_EVENT_WINDOW_SHOWN = 514,
        SDL_EVENT_WINDOW_HIDDEN = 515,
        SDL_EVENT_WINDOW_EXPOSED = 516,
        SDL_EVENT_WINDOW_MOVED = 517,
        SDL_EVENT_WINDOW_RESIZED = 518,
        SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = 519,
        SDL_EVENT_WINDOW_METAL_VIEW_RESIZED = 520,
        SDL_EVENT_WINDOW_MINIMIZED = 521,
        SDL_EVENT_WINDOW_MAXIMIZED = 522,
        SDL_EVENT_WINDOW_RESTORED = 523,
        SDL_EVENT_WINDOW_MOUSE_ENTER = 524,
        SDL_EVENT_WINDOW_MOUSE_LEAVE = 525,
        SDL_EVENT_WINDOW_FOCUS_GAINED = 526,
        SDL_EVENT_WINDOW_FOCUS_LOST = 527,
        SDL_EVENT_WINDOW_CLOSE_REQUESTED = 528,
        SDL_EVENT_WINDOW_HIT_TEST = 529,
        SDL_EVENT_WINDOW_ICCPROF_CHANGED = 530,
        SDL_EVENT_WINDOW_DISPLAY_CHANGED = 531,
        SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = 532,
        SDL_EVENT_WINDOW_SAFE_AREA_CHANGED = 533,
        SDL_EVENT_WINDOW_OCCLUDED = 534,
        SDL_EVENT_WINDOW_ENTER_FULLSCREEN = 535,
        SDL_EVENT_WINDOW_LEAVE_FULLSCREEN = 536,
        SDL_EVENT_WINDOW_DESTROYED = 537,
        SDL_EVENT_WINDOW_PEN_ENTER = 538,
        SDL_EVENT_WINDOW_PEN_LEAVE = 539,
        SDL_EVENT_WINDOW_HDR_STATE_CHANGED = 540,
        SDL_EVENT_WINDOW_FIRST = 514,
        SDL_EVENT_WINDOW_LAST = 540,
        SDL_EVENT_KEY_DOWN = 768,
        SDL_EVENT_KEY_UP = 769,
        SDL_EVENT_TEXT_EDITING = 770,
        SDL_EVENT_TEXT_INPUT = 771,
        SDL_EVENT_KEYMAP_CHANGED = 772,
        SDL_EVENT_KEYBOARD_ADDED = 773,
        SDL_EVENT_KEYBOARD_REMOVED = 774,
        SDL_EVENT_TEXT_EDITING_CANDIDATES = 775,
        SDL_EVENT_MOUSE_MOTION = 1024,
        SDL_EVENT_MOUSE_BUTTON_DOWN = 1025,
        SDL_EVENT_MOUSE_BUTTON_UP = 1026,
        SDL_EVENT_MOUSE_WHEEL = 1027,
        SDL_EVENT_MOUSE_ADDED = 1028,
        SDL_EVENT_MOUSE_REMOVED = 1029,
        SDL_EVENT_JOYSTICK_AXIS_MOTION = 1536,
        SDL_EVENT_JOYSTICK_BALL_MOTION = 1537,
        SDL_EVENT_JOYSTICK_HAT_MOTION = 1538,
        SDL_EVENT_JOYSTICK_BUTTON_DOWN = 1539,
        SDL_EVENT_JOYSTICK_BUTTON_UP = 1540,
        SDL_EVENT_JOYSTICK_ADDED = 1541,
        SDL_EVENT_JOYSTICK_REMOVED = 1542,
        SDL_EVENT_JOYSTICK_BATTERY_UPDATED = 1543,
        SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = 1544,
        SDL_EVENT_GAMEPAD_AXIS_MOTION = 1616,
        SDL_EVENT_GAMEPAD_BUTTON_DOWN = 1617,
        SDL_EVENT_GAMEPAD_BUTTON_UP = 1618,
        SDL_EVENT_GAMEPAD_ADDED = 1619,
        SDL_EVENT_GAMEPAD_REMOVED = 1620,
        SDL_EVENT_GAMEPAD_REMAPPED = 1621,
        SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = 1622,
        SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = 1623,
        SDL_EVENT_GAMEPAD_TOUCHPAD_UP = 1624,
        SDL_EVENT_GAMEPAD_SENSOR_UPDATE = 1625,
        SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = 1626,
        SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED = 1627,
        SDL_EVENT_FINGER_DOWN = 1792,
        SDL_EVENT_FINGER_UP = 1793,
        SDL_EVENT_FINGER_MOTION = 1794,
        SDL_EVENT_CLIPBOARD_UPDATE = 2304,
        SDL_EVENT_DROP_FILE = 4096,
        SDL_EVENT_DROP_TEXT = 4097,
        SDL_EVENT_DROP_BEGIN = 4098,
        SDL_EVENT_DROP_COMPLETE = 4099,
        SDL_EVENT_DROP_POSITION = 4100,
        SDL_EVENT_AUDIO_DEVICE_ADDED = 4352,
        SDL_EVENT_AUDIO_DEVICE_REMOVED = 4353,
        SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED = 4354,
        SDL_EVENT_SENSOR_UPDATE = 4608,
        SDL_EVENT_PEN_DOWN = 4864,
        SDL_EVENT_PEN_UP = 4865,
        SDL_EVENT_PEN_MOTION = 4866,
        SDL_EVENT_PEN_BUTTON_DOWN = 4867,
        SDL_EVENT_PEN_BUTTON_UP = 4868,
        SDL_EVENT_CAMERA_DEVICE_ADDED = 5120,
        SDL_EVENT_CAMERA_DEVICE_REMOVED = 5121,
        SDL_EVENT_CAMERA_DEVICE_APPROVED = 5122,
        SDL_EVENT_CAMERA_DEVICE_DENIED = 5123,
        SDL_EVENT_RENDER_TARGETS_RESET = 8192,
        SDL_EVENT_RENDER_DEVICE_RESET = 8193,
        SDL_EVENT_POLL_SENTINEL = 32512,
        SDL_EVENT_USER = 32768,
        SDL_EVENT_LAST = 65535,
        SDL_EVENT_ENUM_PADDING = 2147483647
    }

    public enum SDL_FlashOperation : int
    {
        SDL_FLASH_CANCEL = 0,
        SDL_FLASH_BRIEFLY = 1,
        SDL_FLASH_UNTIL_FOCUSED = 2
    }

    public enum SDL_FlipMode : int
    {
        SDL_FLIP_NONE = 0,
        SDL_FLIP_HORIZONTAL = 1,
        SDL_FLIP_VERTICAL = 2
    }

    public enum SDL_Folder : int
    {
        SDL_FOLDER_HOME = 0,
        SDL_FOLDER_DESKTOP = 1,
        SDL_FOLDER_DOCUMENTS = 2,
        SDL_FOLDER_DOWNLOADS = 3,
        SDL_FOLDER_MUSIC = 4,
        SDL_FOLDER_PICTURES = 5,
        SDL_FOLDER_PUBLICSHARE = 6,
        SDL_FOLDER_SAVEDGAMES = 7,
        SDL_FOLDER_SCREENSHOTS = 8,
        SDL_FOLDER_TEMPLATES = 9,
        SDL_FOLDER_VIDEOS = 10,
        SDL_FOLDER_TOTAL = 11
    }

    public enum SDL_GLattr : int
    {
        SDL_GL_RED_SIZE = 0,
        SDL_GL_GREEN_SIZE = 1,
        SDL_GL_BLUE_SIZE = 2,
        SDL_GL_ALPHA_SIZE = 3,
        SDL_GL_BUFFER_SIZE = 4,
        SDL_GL_DOUBLEBUFFER = 5,
        SDL_GL_DEPTH_SIZE = 6,
        SDL_GL_STENCIL_SIZE = 7,
        SDL_GL_ACCUM_RED_SIZE = 8,
        SDL_GL_ACCUM_GREEN_SIZE = 9,
        SDL_GL_ACCUM_BLUE_SIZE = 10,
        SDL_GL_ACCUM_ALPHA_SIZE = 11,
        SDL_GL_STEREO = 12,
        SDL_GL_MULTISAMPLEBUFFERS = 13,
        SDL_GL_MULTISAMPLESAMPLES = 14,
        SDL_GL_ACCELERATED_VISUAL = 15,
        SDL_GL_RETAINED_BACKING = 16,
        SDL_GL_CONTEXT_MAJOR_VERSION = 17,
        SDL_GL_CONTEXT_MINOR_VERSION = 18,
        SDL_GL_CONTEXT_FLAGS = 19,
        SDL_GL_CONTEXT_PROFILE_MASK = 20,
        SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 21,
        SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 22,
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 23,
        SDL_GL_CONTEXT_RESET_NOTIFICATION = 24,
        SDL_GL_CONTEXT_NO_ERROR = 25,
        SDL_GL_FLOATBUFFERS = 26,
        SDL_GL_EGL_PLATFORM = 27
    }

    public enum SDL_GamepadAxis : int
    {
        SDL_GAMEPAD_AXIS_INVALID = -1,
        SDL_GAMEPAD_AXIS_LEFTX = 0,
        SDL_GAMEPAD_AXIS_LEFTY = 1,
        SDL_GAMEPAD_AXIS_RIGHTX = 2,
        SDL_GAMEPAD_AXIS_RIGHTY = 3,
        SDL_GAMEPAD_AXIS_LEFT_TRIGGER = 4,
        SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = 5,
        SDL_GAMEPAD_AXIS_MAX = 6
    }

    public enum SDL_GamepadBindingType : int
    {
        SDL_GAMEPAD_BINDTYPE_NONE = 0,
        SDL_GAMEPAD_BINDTYPE_BUTTON = 1,
        SDL_GAMEPAD_BINDTYPE_AXIS = 2,
        SDL_GAMEPAD_BINDTYPE_HAT = 3
    }

    public enum SDL_GamepadButton : int
    {
        SDL_GAMEPAD_BUTTON_INVALID = -1,
        SDL_GAMEPAD_BUTTON_SOUTH = 0,
        SDL_GAMEPAD_BUTTON_EAST = 1,
        SDL_GAMEPAD_BUTTON_WEST = 2,
        SDL_GAMEPAD_BUTTON_NORTH = 3,
        SDL_GAMEPAD_BUTTON_BACK = 4,
        SDL_GAMEPAD_BUTTON_GUIDE = 5,
        SDL_GAMEPAD_BUTTON_START = 6,
        SDL_GAMEPAD_BUTTON_LEFT_STICK = 7,
        SDL_GAMEPAD_BUTTON_RIGHT_STICK = 8,
        SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = 9,
        SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = 10,
        SDL_GAMEPAD_BUTTON_DPAD_UP = 11,
        SDL_GAMEPAD_BUTTON_DPAD_DOWN = 12,
        SDL_GAMEPAD_BUTTON_DPAD_LEFT = 13,
        SDL_GAMEPAD_BUTTON_DPAD_RIGHT = 14,
        SDL_GAMEPAD_BUTTON_MISC1 = 15,
        SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = 16,
        SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = 17,
        SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = 18,
        SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = 19,
        SDL_GAMEPAD_BUTTON_TOUCHPAD = 20,
        SDL_GAMEPAD_BUTTON_MISC2 = 21,
        SDL_GAMEPAD_BUTTON_MISC3 = 22,
        SDL_GAMEPAD_BUTTON_MISC4 = 23,
        SDL_GAMEPAD_BUTTON_MISC5 = 24,
        SDL_GAMEPAD_BUTTON_MISC6 = 25,
        SDL_GAMEPAD_BUTTON_MAX = 26
    }

    public enum SDL_GamepadButtonLabel : int
    {
        SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN = 0,
        SDL_GAMEPAD_BUTTON_LABEL_A = 1,
        SDL_GAMEPAD_BUTTON_LABEL_B = 2,
        SDL_GAMEPAD_BUTTON_LABEL_X = 3,
        SDL_GAMEPAD_BUTTON_LABEL_Y = 4,
        SDL_GAMEPAD_BUTTON_LABEL_CROSS = 5,
        SDL_GAMEPAD_BUTTON_LABEL_CIRCLE = 6,
        SDL_GAMEPAD_BUTTON_LABEL_SQUARE = 7,
        SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE = 8
    }

    public enum SDL_GamepadType : int
    {
        SDL_GAMEPAD_TYPE_UNKNOWN = 0,
        SDL_GAMEPAD_TYPE_STANDARD = 1,
        SDL_GAMEPAD_TYPE_XBOX360 = 2,
        SDL_GAMEPAD_TYPE_XBOXONE = 3,
        SDL_GAMEPAD_TYPE_PS3 = 4,
        SDL_GAMEPAD_TYPE_PS4 = 5,
        SDL_GAMEPAD_TYPE_PS5 = 6,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = 7,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 8,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 9,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 10,
        SDL_GAMEPAD_TYPE_MAX = 11
    }

    public enum SDL_HintPriority : int
    {
        SDL_HINT_DEFAULT = 0,
        SDL_HINT_NORMAL = 1,
        SDL_HINT_OVERRIDE = 2
    }

    public enum SDL_HitTestResult : int
    {
        SDL_HITTEST_NORMAL = 0,
        SDL_HITTEST_DRAGGABLE = 1,
        SDL_HITTEST_RESIZE_TOPLEFT = 2,
        SDL_HITTEST_RESIZE_TOP = 3,
        SDL_HITTEST_RESIZE_TOPRIGHT = 4,
        SDL_HITTEST_RESIZE_RIGHT = 5,
        SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6,
        SDL_HITTEST_RESIZE_BOTTOM = 7,
        SDL_HITTEST_RESIZE_BOTTOMLEFT = 8,
        SDL_HITTEST_RESIZE_LEFT = 9
    }

    public enum SDL_IOStatus : int
    {
        SDL_IO_STATUS_READY = 0,
        SDL_IO_STATUS_ERROR = 1,
        SDL_IO_STATUS_EOF = 2,
        SDL_IO_STATUS_NOT_READY = 3,
        SDL_IO_STATUS_READONLY = 4,
        SDL_IO_STATUS_WRITEONLY = 5
    }

    public enum SDL_IOWhence : int
    {
        SDL_IO_SEEK_SET = 0,
        SDL_IO_SEEK_CUR = 1,
        SDL_IO_SEEK_END = 2
    }

    public enum SDL_JoystickConnectionState : int
    {
        SDL_JOYSTICK_CONNECTION_INVALID = -1,
        SDL_JOYSTICK_CONNECTION_UNKNOWN = 0,
        SDL_JOYSTICK_CONNECTION_WIRED = 1,
        SDL_JOYSTICK_CONNECTION_WIRELESS = 2
    }

    public enum SDL_JoystickType : int
    {
        SDL_JOYSTICK_TYPE_UNKNOWN = 0,
        SDL_JOYSTICK_TYPE_GAMEPAD = 1,
        SDL_JOYSTICK_TYPE_WHEEL = 2,
        SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
        SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4,
        SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
        SDL_JOYSTICK_TYPE_GUITAR = 6,
        SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
        SDL_JOYSTICK_TYPE_ARCADE_PAD = 8,
        SDL_JOYSTICK_TYPE_THROTTLE = 9
    }

    public enum SDL_LogPriority : int
    {
        SDL_LOG_PRIORITY_VERBOSE = 1,
        SDL_LOG_PRIORITY_DEBUG = 2,
        SDL_LOG_PRIORITY_INFO = 3,
        SDL_LOG_PRIORITY_WARN = 4,
        SDL_LOG_PRIORITY_ERROR = 5,
        SDL_LOG_PRIORITY_CRITICAL = 6,
        SDL_NUM_LOG_PRIORITIES = 7
    }

    public enum SDL_MouseWheelDirection : int
    {
        SDL_MOUSEWHEEL_NORMAL = 0,
        SDL_MOUSEWHEEL_FLIPPED = 1
    }

    public enum SDL_PathType : int
    {
        SDL_PATHTYPE_NONE = 0,
        SDL_PATHTYPE_FILE = 1,
        SDL_PATHTYPE_DIRECTORY = 2,
        SDL_PATHTYPE_OTHER = 3
    }

    public enum SDL_PenSubtype : int
    {
        SDL_PEN_TYPE_UNKNOWN = 0,
        SDL_PEN_TYPE_ERASER = 1,
        SDL_PEN_TYPE_PEN = 2,
        SDL_PEN_TYPE_PENCIL = 3,
        SDL_PEN_TYPE_BRUSH = 4,
        SDL_PEN_TYPE_AIRBRUSH = 5,
        SDL_PEN_TYPE_LAST = 5
    }

    public enum SDL_PixelFormat : int
    {
        SDL_PIXELFORMAT_UNKNOWN = 0,
        SDL_PIXELFORMAT_INDEX1LSB = 286261504,
        SDL_PIXELFORMAT_INDEX1MSB = 287310080,
        SDL_PIXELFORMAT_INDEX2LSB = 470811136,
        SDL_PIXELFORMAT_INDEX2MSB = 471859712,
        SDL_PIXELFORMAT_INDEX4LSB = 303039488,
        SDL_PIXELFORMAT_INDEX4MSB = 304088064,
        SDL_PIXELFORMAT_INDEX8 = 318769153,
        SDL_PIXELFORMAT_RGB332 = 336660481,
        SDL_PIXELFORMAT_XRGB4444 = 353504258,
        SDL_PIXELFORMAT_XBGR4444 = 357698562,
        SDL_PIXELFORMAT_XRGB1555 = 353570562,
        SDL_PIXELFORMAT_XBGR1555 = 357764866,
        SDL_PIXELFORMAT_ARGB4444 = 355602434,
        SDL_PIXELFORMAT_RGBA4444 = 356651010,
        SDL_PIXELFORMAT_ABGR4444 = 359796738,
        SDL_PIXELFORMAT_BGRA4444 = 360845314,
        SDL_PIXELFORMAT_ARGB1555 = 355667970,
        SDL_PIXELFORMAT_RGBA5551 = 356782082,
        SDL_PIXELFORMAT_ABGR1555 = 359862274,
        SDL_PIXELFORMAT_BGRA5551 = 360976386,
        SDL_PIXELFORMAT_RGB565 = 353701890,
        SDL_PIXELFORMAT_BGR565 = 357896194,
        SDL_PIXELFORMAT_RGB24 = 386930691,
        SDL_PIXELFORMAT_BGR24 = 390076419,
        SDL_PIXELFORMAT_XRGB8888 = 370546692,
        SDL_PIXELFORMAT_RGBX8888 = 371595268,
        SDL_PIXELFORMAT_XBGR8888 = 374740996,
        SDL_PIXELFORMAT_BGRX8888 = 375789572,
        SDL_PIXELFORMAT_ARGB8888 = 372645892,
        SDL_PIXELFORMAT_RGBA8888 = 373694468,
        SDL_PIXELFORMAT_ABGR8888 = 376840196,
        SDL_PIXELFORMAT_BGRA8888 = 377888772,
        SDL_PIXELFORMAT_XRGB2101010 = 370614276,
        SDL_PIXELFORMAT_XBGR2101010 = 374808580,
        SDL_PIXELFORMAT_ARGB2101010 = 372711428,
        SDL_PIXELFORMAT_ABGR2101010 = 376905732,
        SDL_PIXELFORMAT_RGB48 = 403714054,
        SDL_PIXELFORMAT_BGR48 = 406859782,
        SDL_PIXELFORMAT_RGBA64 = 404766728,
        SDL_PIXELFORMAT_ARGB64 = 405815304,
        SDL_PIXELFORMAT_BGRA64 = 407912456,
        SDL_PIXELFORMAT_ABGR64 = 408961032,
        SDL_PIXELFORMAT_RGB48_FLOAT = 437268486,
        SDL_PIXELFORMAT_BGR48_FLOAT = 440414214,
        SDL_PIXELFORMAT_RGBA64_FLOAT = 438321160,
        SDL_PIXELFORMAT_ARGB64_FLOAT = 439369736,
        SDL_PIXELFORMAT_BGRA64_FLOAT = 441466888,
        SDL_PIXELFORMAT_ABGR64_FLOAT = 442515464,
        SDL_PIXELFORMAT_RGB96_FLOAT = 454057996,
        SDL_PIXELFORMAT_BGR96_FLOAT = 457203724,
        SDL_PIXELFORMAT_RGBA128_FLOAT = 455114768,
        SDL_PIXELFORMAT_ARGB128_FLOAT = 456163344,
        SDL_PIXELFORMAT_BGRA128_FLOAT = 458260496,
        SDL_PIXELFORMAT_ABGR128_FLOAT = 459309072,
        SDL_PIXELFORMAT_YV12 = 842094169,
        SDL_PIXELFORMAT_IYUV = 1448433993,
        SDL_PIXELFORMAT_YUY2 = 844715353,
        SDL_PIXELFORMAT_UYVY = 1498831189,
        SDL_PIXELFORMAT_YVYU = 1431918169,
        SDL_PIXELFORMAT_NV12 = 842094158,
        SDL_PIXELFORMAT_NV21 = 825382478,
        SDL_PIXELFORMAT_P010 = 808530000,
        SDL_PIXELFORMAT_EXTERNAL_OES = 542328143
    }

    public enum SDL_PowerState : int
    {
        SDL_POWERSTATE_ERROR = -1,
        SDL_POWERSTATE_UNKNOWN = 0,
        SDL_POWERSTATE_ON_BATTERY = 1,
        SDL_POWERSTATE_NO_BATTERY = 2,
        SDL_POWERSTATE_CHARGING = 3,
        SDL_POWERSTATE_CHARGED = 4
    }

    public enum SDL_PropertyType : int
    {
        SDL_PROPERTY_TYPE_INVALID = 0,
        SDL_PROPERTY_TYPE_POINTER = 1,
        SDL_PROPERTY_TYPE_STRING = 2,
        SDL_PROPERTY_TYPE_NUMBER = 3,
        SDL_PROPERTY_TYPE_FLOAT = 4,
        SDL_PROPERTY_TYPE_BOOLEAN = 5
    }

    public enum SDL_RendererLogicalPresentation : int
    {
        SDL_LOGICAL_PRESENTATION_DISABLED = 0,
        SDL_LOGICAL_PRESENTATION_STRETCH = 1,
        SDL_LOGICAL_PRESENTATION_LETTERBOX = 2,
        SDL_LOGICAL_PRESENTATION_OVERSCAN = 3,
        SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = 4
    }

    public enum SDL_ScaleMode : int
    {
        SDL_SCALEMODE_NEAREST = 0,
        SDL_SCALEMODE_LINEAR = 1,
        SDL_SCALEMODE_BEST = 2
    }

    public enum SDL_Scancode : int
    {
        SDL_SCANCODE_UNKNOWN = 0,
        SDL_SCANCODE_A = 4,
        SDL_SCANCODE_B = 5,
        SDL_SCANCODE_C = 6,
        SDL_SCANCODE_D = 7,
        SDL_SCANCODE_E = 8,
        SDL_SCANCODE_F = 9,
        SDL_SCANCODE_G = 10,
        SDL_SCANCODE_H = 11,
        SDL_SCANCODE_I = 12,
        SDL_SCANCODE_J = 13,
        SDL_SCANCODE_K = 14,
        SDL_SCANCODE_L = 15,
        SDL_SCANCODE_M = 16,
        SDL_SCANCODE_N = 17,
        SDL_SCANCODE_O = 18,
        SDL_SCANCODE_P = 19,
        SDL_SCANCODE_Q = 20,
        SDL_SCANCODE_R = 21,
        SDL_SCANCODE_S = 22,
        SDL_SCANCODE_T = 23,
        SDL_SCANCODE_U = 24,
        SDL_SCANCODE_V = 25,
        SDL_SCANCODE_W = 26,
        SDL_SCANCODE_X = 27,
        SDL_SCANCODE_Y = 28,
        SDL_SCANCODE_Z = 29,
        SDL_SCANCODE_1 = 30,
        SDL_SCANCODE_2 = 31,
        SDL_SCANCODE_3 = 32,
        SDL_SCANCODE_4 = 33,
        SDL_SCANCODE_5 = 34,
        SDL_SCANCODE_6 = 35,
        SDL_SCANCODE_7 = 36,
        SDL_SCANCODE_8 = 37,
        SDL_SCANCODE_9 = 38,
        SDL_SCANCODE_0 = 39,
        SDL_SCANCODE_RETURN = 40,
        SDL_SCANCODE_ESCAPE = 41,
        SDL_SCANCODE_BACKSPACE = 42,
        SDL_SCANCODE_TAB = 43,
        SDL_SCANCODE_SPACE = 44,
        SDL_SCANCODE_MINUS = 45,
        SDL_SCANCODE_EQUALS = 46,
        SDL_SCANCODE_LEFTBRACKET = 47,
        SDL_SCANCODE_RIGHTBRACKET = 48,
        SDL_SCANCODE_BACKSLASH = 49,
        SDL_SCANCODE_NONUSHASH = 50,
        SDL_SCANCODE_SEMICOLON = 51,
        SDL_SCANCODE_APOSTROPHE = 52,
        SDL_SCANCODE_GRAVE = 53,
        SDL_SCANCODE_COMMA = 54,
        SDL_SCANCODE_PERIOD = 55,
        SDL_SCANCODE_SLASH = 56,
        SDL_SCANCODE_CAPSLOCK = 57,
        SDL_SCANCODE_F1 = 58,
        SDL_SCANCODE_F2 = 59,
        SDL_SCANCODE_F3 = 60,
        SDL_SCANCODE_F4 = 61,
        SDL_SCANCODE_F5 = 62,
        SDL_SCANCODE_F6 = 63,
        SDL_SCANCODE_F7 = 64,
        SDL_SCANCODE_F8 = 65,
        SDL_SCANCODE_F9 = 66,
        SDL_SCANCODE_F10 = 67,
        SDL_SCANCODE_F11 = 68,
        SDL_SCANCODE_F12 = 69,
        SDL_SCANCODE_PRINTSCREEN = 70,
        SDL_SCANCODE_SCROLLLOCK = 71,
        SDL_SCANCODE_PAUSE = 72,
        SDL_SCANCODE_INSERT = 73,
        SDL_SCANCODE_HOME = 74,
        SDL_SCANCODE_PAGEUP = 75,
        SDL_SCANCODE_DELETE = 76,
        SDL_SCANCODE_END = 77,
        SDL_SCANCODE_PAGEDOWN = 78,
        SDL_SCANCODE_RIGHT = 79,
        SDL_SCANCODE_LEFT = 80,
        SDL_SCANCODE_DOWN = 81,
        SDL_SCANCODE_UP = 82,
        SDL_SCANCODE_NUMLOCKCLEAR = 83,
        SDL_SCANCODE_KP_DIVIDE = 84,
        SDL_SCANCODE_KP_MULTIPLY = 85,
        SDL_SCANCODE_KP_MINUS = 86,
        SDL_SCANCODE_KP_PLUS = 87,
        SDL_SCANCODE_KP_ENTER = 88,
        SDL_SCANCODE_KP_1 = 89,
        SDL_SCANCODE_KP_2 = 90,
        SDL_SCANCODE_KP_3 = 91,
        SDL_SCANCODE_KP_4 = 92,
        SDL_SCANCODE_KP_5 = 93,
        SDL_SCANCODE_KP_6 = 94,
        SDL_SCANCODE_KP_7 = 95,
        SDL_SCANCODE_KP_8 = 96,
        SDL_SCANCODE_KP_9 = 97,
        SDL_SCANCODE_KP_0 = 98,
        SDL_SCANCODE_KP_PERIOD = 99,
        SDL_SCANCODE_NONUSBACKSLASH = 100,
        SDL_SCANCODE_APPLICATION = 101,
        SDL_SCANCODE_POWER = 102,
        SDL_SCANCODE_KP_EQUALS = 103,
        SDL_SCANCODE_F13 = 104,
        SDL_SCANCODE_F14 = 105,
        SDL_SCANCODE_F15 = 106,
        SDL_SCANCODE_F16 = 107,
        SDL_SCANCODE_F17 = 108,
        SDL_SCANCODE_F18 = 109,
        SDL_SCANCODE_F19 = 110,
        SDL_SCANCODE_F20 = 111,
        SDL_SCANCODE_F21 = 112,
        SDL_SCANCODE_F22 = 113,
        SDL_SCANCODE_F23 = 114,
        SDL_SCANCODE_F24 = 115,
        SDL_SCANCODE_EXECUTE = 116,
        SDL_SCANCODE_HELP = 117,
        SDL_SCANCODE_MENU = 118,
        SDL_SCANCODE_SELECT = 119,
        SDL_SCANCODE_STOP = 120,
        SDL_SCANCODE_AGAIN = 121,
        SDL_SCANCODE_UNDO = 122,
        SDL_SCANCODE_CUT = 123,
        SDL_SCANCODE_COPY = 124,
        SDL_SCANCODE_PASTE = 125,
        SDL_SCANCODE_FIND = 126,
        SDL_SCANCODE_MUTE = 127,
        SDL_SCANCODE_VOLUMEUP = 128,
        SDL_SCANCODE_VOLUMEDOWN = 129,
        SDL_SCANCODE_KP_COMMA = 133,
        SDL_SCANCODE_KP_EQUALSAS400 = 134,
        SDL_SCANCODE_INTERNATIONAL1 = 135,
        SDL_SCANCODE_INTERNATIONAL2 = 136,
        SDL_SCANCODE_INTERNATIONAL3 = 137,
        SDL_SCANCODE_INTERNATIONAL4 = 138,
        SDL_SCANCODE_INTERNATIONAL5 = 139,
        SDL_SCANCODE_INTERNATIONAL6 = 140,
        SDL_SCANCODE_INTERNATIONAL7 = 141,
        SDL_SCANCODE_INTERNATIONAL8 = 142,
        SDL_SCANCODE_INTERNATIONAL9 = 143,
        SDL_SCANCODE_LANG1 = 144,
        SDL_SCANCODE_LANG2 = 145,
        SDL_SCANCODE_LANG3 = 146,
        SDL_SCANCODE_LANG4 = 147,
        SDL_SCANCODE_LANG5 = 148,
        SDL_SCANCODE_LANG6 = 149,
        SDL_SCANCODE_LANG7 = 150,
        SDL_SCANCODE_LANG8 = 151,
        SDL_SCANCODE_LANG9 = 152,
        SDL_SCANCODE_ALTERASE = 153,
        SDL_SCANCODE_SYSREQ = 154,
        SDL_SCANCODE_CANCEL = 155,
        SDL_SCANCODE_CLEAR = 156,
        SDL_SCANCODE_PRIOR = 157,
        SDL_SCANCODE_RETURN2 = 158,
        SDL_SCANCODE_SEPARATOR = 159,
        SDL_SCANCODE_OUT = 160,
        SDL_SCANCODE_OPER = 161,
        SDL_SCANCODE_CLEARAGAIN = 162,
        SDL_SCANCODE_CRSEL = 163,
        SDL_SCANCODE_EXSEL = 164,
        SDL_SCANCODE_KP_00 = 176,
        SDL_SCANCODE_KP_000 = 177,
        SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
        SDL_SCANCODE_DECIMALSEPARATOR = 179,
        SDL_SCANCODE_CURRENCYUNIT = 180,
        SDL_SCANCODE_CURRENCYSUBUNIT = 181,
        SDL_SCANCODE_KP_LEFTPAREN = 182,
        SDL_SCANCODE_KP_RIGHTPAREN = 183,
        SDL_SCANCODE_KP_LEFTBRACE = 184,
        SDL_SCANCODE_KP_RIGHTBRACE = 185,
        SDL_SCANCODE_KP_TAB = 186,
        SDL_SCANCODE_KP_BACKSPACE = 187,
        SDL_SCANCODE_KP_A = 188,
        SDL_SCANCODE_KP_B = 189,
        SDL_SCANCODE_KP_C = 190,
        SDL_SCANCODE_KP_D = 191,
        SDL_SCANCODE_KP_E = 192,
        SDL_SCANCODE_KP_F = 193,
        SDL_SCANCODE_KP_XOR = 194,
        SDL_SCANCODE_KP_POWER = 195,
        SDL_SCANCODE_KP_PERCENT = 196,
        SDL_SCANCODE_KP_LESS = 197,
        SDL_SCANCODE_KP_GREATER = 198,
        SDL_SCANCODE_KP_AMPERSAND = 199,
        SDL_SCANCODE_KP_DBLAMPERSAND = 200,
        SDL_SCANCODE_KP_VERTICALBAR = 201,
        SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
        SDL_SCANCODE_KP_COLON = 203,
        SDL_SCANCODE_KP_HASH = 204,
        SDL_SCANCODE_KP_SPACE = 205,
        SDL_SCANCODE_KP_AT = 206,
        SDL_SCANCODE_KP_EXCLAM = 207,
        SDL_SCANCODE_KP_MEMSTORE = 208,
        SDL_SCANCODE_KP_MEMRECALL = 209,
        SDL_SCANCODE_KP_MEMCLEAR = 210,
        SDL_SCANCODE_KP_MEMADD = 211,
        SDL_SCANCODE_KP_MEMSUBTRACT = 212,
        SDL_SCANCODE_KP_MEMMULTIPLY = 213,
        SDL_SCANCODE_KP_MEMDIVIDE = 214,
        SDL_SCANCODE_KP_PLUSMINUS = 215,
        SDL_SCANCODE_KP_CLEAR = 216,
        SDL_SCANCODE_KP_CLEARENTRY = 217,
        SDL_SCANCODE_KP_BINARY = 218,
        SDL_SCANCODE_KP_OCTAL = 219,
        SDL_SCANCODE_KP_DECIMAL = 220,
        SDL_SCANCODE_KP_HEXADECIMAL = 221,
        SDL_SCANCODE_LCTRL = 224,
        SDL_SCANCODE_LSHIFT = 225,
        SDL_SCANCODE_LALT = 226,
        SDL_SCANCODE_LGUI = 227,
        SDL_SCANCODE_RCTRL = 228,
        SDL_SCANCODE_RSHIFT = 229,
        SDL_SCANCODE_RALT = 230,
        SDL_SCANCODE_RGUI = 231,
        SDL_SCANCODE_MODE = 257,
        SDL_SCANCODE_SLEEP = 258,
        SDL_SCANCODE_WAKE = 259,
        SDL_SCANCODE_CHANNEL_INCREMENT = 260,
        SDL_SCANCODE_CHANNEL_DECREMENT = 261,
        SDL_SCANCODE_MEDIA_PLAY = 262,
        SDL_SCANCODE_MEDIA_PAUSE = 263,
        SDL_SCANCODE_MEDIA_RECORD = 264,
        SDL_SCANCODE_MEDIA_FAST_FORWARD = 265,
        SDL_SCANCODE_MEDIA_REWIND = 266,
        SDL_SCANCODE_MEDIA_NEXT_TRACK = 267,
        SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268,
        SDL_SCANCODE_MEDIA_STOP = 269,
        SDL_SCANCODE_MEDIA_EJECT = 270,
        SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271,
        SDL_SCANCODE_MEDIA_SELECT = 272,
        SDL_SCANCODE_AC_NEW = 273,
        SDL_SCANCODE_AC_OPEN = 274,
        SDL_SCANCODE_AC_CLOSE = 275,
        SDL_SCANCODE_AC_EXIT = 276,
        SDL_SCANCODE_AC_SAVE = 277,
        SDL_SCANCODE_AC_PRINT = 278,
        SDL_SCANCODE_AC_PROPERTIES = 279,
        SDL_SCANCODE_AC_SEARCH = 280,
        SDL_SCANCODE_AC_HOME = 281,
        SDL_SCANCODE_AC_BACK = 282,
        SDL_SCANCODE_AC_FORWARD = 283,
        SDL_SCANCODE_AC_STOP = 284,
        SDL_SCANCODE_AC_REFRESH = 285,
        SDL_SCANCODE_AC_BOOKMARKS = 286,
        SDL_SCANCODE_SOFTLEFT = 287,
        SDL_SCANCODE_SOFTRIGHT = 288,
        SDL_SCANCODE_CALL = 289,
        SDL_SCANCODE_ENDCALL = 290,
        SDL_SCANCODE_RESERVED = 400,
        SDL_NUM_SCANCODES = 512
    }

    public enum SDL_SensorType : int
    {
        SDL_SENSOR_INVALID = -1,
        SDL_SENSOR_UNKNOWN = 0,
        SDL_SENSOR_ACCEL = 1,
        SDL_SENSOR_GYRO = 2,
        SDL_SENSOR_ACCEL_L = 3,
        SDL_SENSOR_GYRO_L = 4,
        SDL_SENSOR_ACCEL_R = 5,
        SDL_SENSOR_GYRO_R = 6
    }

    public enum SDL_SystemCursor : int
    {
        SDL_SYSTEM_CURSOR_DEFAULT = 0,
        SDL_SYSTEM_CURSOR_TEXT = 1,
        SDL_SYSTEM_CURSOR_WAIT = 2,
        SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
        SDL_SYSTEM_CURSOR_PROGRESS = 4,
        SDL_SYSTEM_CURSOR_NWSE_RESIZE = 5,
        SDL_SYSTEM_CURSOR_NESW_RESIZE = 6,
        SDL_SYSTEM_CURSOR_EW_RESIZE = 7,
        SDL_SYSTEM_CURSOR_NS_RESIZE = 8,
        SDL_SYSTEM_CURSOR_MOVE = 9,
        SDL_SYSTEM_CURSOR_NOT_ALLOWED = 10,
        SDL_SYSTEM_CURSOR_POINTER = 11,
        SDL_SYSTEM_CURSOR_NW_RESIZE = 12,
        SDL_SYSTEM_CURSOR_N_RESIZE = 13,
        SDL_SYSTEM_CURSOR_NE_RESIZE = 14,
        SDL_SYSTEM_CURSOR_E_RESIZE = 15,
        SDL_SYSTEM_CURSOR_SE_RESIZE = 16,
        SDL_SYSTEM_CURSOR_S_RESIZE = 17,
        SDL_SYSTEM_CURSOR_SW_RESIZE = 18,
        SDL_SYSTEM_CURSOR_W_RESIZE = 19,
        SDL_NUM_SYSTEM_CURSORS = 20
    }

    public enum SDL_SystemTheme : int
    {
        SDL_SYSTEM_THEME_UNKNOWN = 0,
        SDL_SYSTEM_THEME_LIGHT = 1,
        SDL_SYSTEM_THEME_DARK = 2
    }

    public enum SDL_TextureAccess : int
    {
        SDL_TEXTUREACCESS_STATIC = 0,
        SDL_TEXTUREACCESS_STREAMING = 1,
        SDL_TEXTUREACCESS_TARGET = 2
    }

    public enum SDL_ThreadPriority : int
    {
        SDL_THREAD_PRIORITY_LOW = 0,
        SDL_THREAD_PRIORITY_NORMAL = 1,
        SDL_THREAD_PRIORITY_HIGH = 2,
        SDL_THREAD_PRIORITY_TIME_CRITICAL = 3
    }

    public enum SDL_TimeFormat : int
    {
        SDL_TIME_FORMAT_24HR = 0,
        SDL_TIME_FORMAT_12HR = 1
    }

    public enum SDL_TouchDeviceType : int
    {
        SDL_TOUCH_DEVICE_INVALID = -1,
        SDL_TOUCH_DEVICE_DIRECT = 0,
        SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
        SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2
    }

    public enum SDL_hid_bus_type : int
    {
        SDL_HID_API_BUS_UNKNOWN = 0,
        SDL_HID_API_BUS_USB = 1,
        SDL_HID_API_BUS_BLUETOOTH = 2,
        SDL_HID_API_BUS_I2C = 3,
        SDL_HID_API_BUS_SPI = 4
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioStream
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Camera
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Condition
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Cursor
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_DisplayModeData
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GLContextState
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Gamepad
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Haptic
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_IOStream
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Joystick
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Mutex
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_RWLock
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Renderer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Semaphore
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Sensor
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Storage
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_SurfaceData
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Texture
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Thread
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Window
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_hid_device
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_iconv_data_t
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct _XEvent
    {
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_AssertionHandler
    {
        [FieldOffset(0)]
        public FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState Data;

        public static implicit operator FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState(SDL_AssertionHandler data) => data.Data;
        public static implicit operator SDL_AssertionHandler(FnPtr_SDLAssertDataPtr_VoidPtr_SDLAssertState data) => new SDL_AssertionHandler() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_AudioDeviceID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_AudioDeviceID data) => data.Data;
        public static implicit operator SDL_AudioDeviceID(Uint32 data) => new SDL_AudioDeviceID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_AudioPostmixCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_SDLAudioSpecPtr_FloatPtr_Int_Void Data;

        public static implicit operator FnPtr_VoidPtr_SDLAudioSpecPtr_FloatPtr_Int_Void(SDL_AudioPostmixCallback data) => data.Data;
        public static implicit operator SDL_AudioPostmixCallback(FnPtr_VoidPtr_SDLAudioSpecPtr_FloatPtr_Int_Void data) => new SDL_AudioPostmixCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_AudioStreamCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_SDLAudioStreamPtr_Int_Int_Void Data;

        public static implicit operator FnPtr_VoidPtr_SDLAudioStreamPtr_Int_Int_Void(SDL_AudioStreamCallback data) => data.Data;
        public static implicit operator SDL_AudioStreamCallback(FnPtr_VoidPtr_SDLAudioStreamPtr_Int_Int_Void data) => new SDL_AudioStreamCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_BlendMode
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_BlendMode data) => data.Data;
        public static implicit operator SDL_BlendMode(Uint32 data) => new SDL_BlendMode() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_CameraID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_CameraID data) => data.Data;
        public static implicit operator SDL_CameraID(Uint32 data) => new SDL_CameraID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_CleanupPropertyCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_VoidPtr_Void Data;

        public static implicit operator FnPtr_VoidPtr_VoidPtr_Void(SDL_CleanupPropertyCallback data) => data.Data;
        public static implicit operator SDL_CleanupPropertyCallback(FnPtr_VoidPtr_VoidPtr_Void data) => new SDL_CleanupPropertyCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_ClipboardCleanupCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Void Data;

        public static implicit operator FnPtr_VoidPtr_Void(SDL_ClipboardCleanupCallback data) => data.Data;
        public static implicit operator SDL_ClipboardCleanupCallback(FnPtr_VoidPtr_Void data) => new SDL_ClipboardCleanupCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_ClipboardDataCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_CString_UlongPtr_VoidPtr Data;

        public static implicit operator FnPtr_VoidPtr_CString_UlongPtr_VoidPtr(SDL_ClipboardDataCallback data) => data.Data;
        public static implicit operator SDL_ClipboardDataCallback(FnPtr_VoidPtr_CString_UlongPtr_VoidPtr data) => new SDL_ClipboardDataCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_CompareCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_VoidPtr_Int Data;

        public static implicit operator FnPtr_VoidPtr_VoidPtr_Int(SDL_CompareCallback data) => data.Data;
        public static implicit operator SDL_CompareCallback(FnPtr_VoidPtr_VoidPtr_Int data) => new SDL_CompareCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_CompareCallback_r
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_VoidPtr_VoidPtr_Int Data;

        public static implicit operator FnPtr_VoidPtr_VoidPtr_VoidPtr_Int(SDL_CompareCallback_r data) => data.Data;
        public static implicit operator SDL_CompareCallback_r(FnPtr_VoidPtr_VoidPtr_VoidPtr_Int data) => new SDL_CompareCallback_r() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_DialogFileCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_CStringPtr_Int_Void Data;

        public static implicit operator FnPtr_VoidPtr_CStringPtr_Int_Void(SDL_DialogFileCallback data) => data.Data;
        public static implicit operator SDL_DialogFileCallback(FnPtr_VoidPtr_CStringPtr_Int_Void data) => new SDL_DialogFileCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_DisplayID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_DisplayID data) => data.Data;
        public static implicit operator SDL_DisplayID(Uint32 data) => new SDL_DisplayID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLAttrib
    {
        [FieldOffset(0)]
        public IntPtr Data;

        public static implicit operator IntPtr(SDL_EGLAttrib data) => data.Data;
        public static implicit operator SDL_EGLAttrib(IntPtr data) => new SDL_EGLAttrib() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLAttribArrayCallback
    {
        [FieldOffset(0)]
        public FnPtr_SDLEGLAttribPtr Data;

        public static implicit operator FnPtr_SDLEGLAttribPtr(SDL_EGLAttribArrayCallback data) => data.Data;
        public static implicit operator SDL_EGLAttribArrayCallback(FnPtr_SDLEGLAttribPtr data) => new SDL_EGLAttribArrayCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLConfig
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_EGLConfig data) => data.Data;
        public static implicit operator SDL_EGLConfig(void* data) => new SDL_EGLConfig() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLDisplay
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_EGLDisplay data) => data.Data;
        public static implicit operator SDL_EGLDisplay(void* data) => new SDL_EGLDisplay() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLIntArrayCallback
    {
        [FieldOffset(0)]
        public FnPtr_SDLEGLintPtr Data;

        public static implicit operator FnPtr_SDLEGLintPtr(SDL_EGLIntArrayCallback data) => data.Data;
        public static implicit operator SDL_EGLIntArrayCallback(FnPtr_SDLEGLintPtr data) => new SDL_EGLIntArrayCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EGLSurface
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_EGLSurface data) => data.Data;
        public static implicit operator SDL_EGLSurface(void* data) => new SDL_EGLSurface() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_EGLint
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(SDL_EGLint data) => data.Data;
        public static implicit operator SDL_EGLint(int data) => new SDL_EGLint() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EnumerateDirectoryCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_CString_CString_Int Data;

        public static implicit operator FnPtr_VoidPtr_CString_CString_Int(SDL_EnumerateDirectoryCallback data) => data.Data;
        public static implicit operator SDL_EnumerateDirectoryCallback(FnPtr_VoidPtr_CString_CString_Int data) => new SDL_EnumerateDirectoryCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EnumeratePropertiesCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_SDLPropertiesID_CString_Void Data;

        public static implicit operator FnPtr_VoidPtr_SDLPropertiesID_CString_Void(SDL_EnumeratePropertiesCallback data) => data.Data;
        public static implicit operator SDL_EnumeratePropertiesCallback(FnPtr_VoidPtr_SDLPropertiesID_CString_Void data) => new SDL_EnumeratePropertiesCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_EventFilter
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_SDLEventPtr_SDLBool Data;

        public static implicit operator FnPtr_VoidPtr_SDLEventPtr_SDLBool(SDL_EventFilter data) => data.Data;
        public static implicit operator SDL_EventFilter(FnPtr_VoidPtr_SDLEventPtr_SDLBool data) => new SDL_EventFilter() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_FingerID
    {
        [FieldOffset(0)]
        public Uint64 Data;

        public static implicit operator Uint64(SDL_FingerID data) => data.Data;
        public static implicit operator SDL_FingerID(Uint64 data) => new SDL_FingerID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_FunctionPointer
    {
        [FieldOffset(0)]
        public FnPtr_Void Data;

        public static implicit operator FnPtr_Void(SDL_FunctionPointer data) => data.Data;
        public static implicit operator SDL_FunctionPointer(FnPtr_Void data) => new SDL_FunctionPointer() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_GLContext
    {
        [FieldOffset(0)]
        public SDL_GLContextState* Data;

        public static implicit operator SDL_GLContextState*(SDL_GLContext data) => data.Data;
        public static implicit operator SDL_GLContext(SDL_GLContextState* data) => new SDL_GLContext() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_GlobFlags
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_GlobFlags data) => data.Data;
        public static implicit operator SDL_GlobFlags(Uint32 data) => new SDL_GlobFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_HapticID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_HapticID data) => data.Data;
        public static implicit operator SDL_HapticID(Uint32 data) => new SDL_HapticID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_HintCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_CString_CString_CString_Void Data;

        public static implicit operator FnPtr_VoidPtr_CString_CString_CString_Void(SDL_HintCallback data) => data.Data;
        public static implicit operator SDL_HintCallback(FnPtr_VoidPtr_CString_CString_CString_Void data) => new SDL_HintCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_HitTest
    {
        [FieldOffset(0)]
        public FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult Data;

        public static implicit operator FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult(SDL_HitTest data) => data.Data;
        public static implicit operator SDL_HitTest(FnPtr_SDLWindowPtr_SDLPointPtr_VoidPtr_SDLHitTestResult data) => new SDL_HitTest() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_InitFlags
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_InitFlags data) => data.Data;
        public static implicit operator SDL_InitFlags(Uint32 data) => new SDL_InitFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_JoystickID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_JoystickID data) => data.Data;
        public static implicit operator SDL_JoystickID(Uint32 data) => new SDL_JoystickID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_KeyboardID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_KeyboardID data) => data.Data;
        public static implicit operator SDL_KeyboardID(Uint32 data) => new SDL_KeyboardID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_Keycode
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_Keycode data) => data.Data;
        public static implicit operator SDL_Keycode(Uint32 data) => new SDL_Keycode() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
    public struct SDL_Keymod
    {
        [FieldOffset(0)]
        public Uint16 Data;

        public static implicit operator Uint16(SDL_Keymod data) => data.Data;
        public static implicit operator SDL_Keymod(Uint16 data) => new SDL_Keymod() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_LogOutputFunction
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void Data;

        public static implicit operator FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void(SDL_LogOutputFunction data) => data.Data;
        public static implicit operator SDL_LogOutputFunction(FnPtr_VoidPtr_Int_SDLLogPriority_CString_Void data) => new SDL_LogOutputFunction() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_MessageBoxButtonFlags
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_MessageBoxButtonFlags data) => data.Data;
        public static implicit operator SDL_MessageBoxButtonFlags(Uint32 data) => new SDL_MessageBoxButtonFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_MessageBoxFlags
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_MessageBoxFlags data) => data.Data;
        public static implicit operator SDL_MessageBoxFlags(Uint32 data) => new SDL_MessageBoxFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_MetalView
    {
        [FieldOffset(0)]
        public void* Data;

        public static implicit operator void*(SDL_MetalView data) => data.Data;
        public static implicit operator SDL_MetalView(void* data) => new SDL_MetalView() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_MouseButtonFlags
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_MouseButtonFlags data) => data.Data;
        public static implicit operator SDL_MouseButtonFlags(Uint32 data) => new SDL_MouseButtonFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_MouseID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_MouseID data) => data.Data;
        public static implicit operator SDL_MouseID(Uint32 data) => new SDL_MouseID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_NSTimerCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_SDLTimerID_Uint64_Uint64 Data;

        public static implicit operator FnPtr_VoidPtr_SDLTimerID_Uint64_Uint64(SDL_NSTimerCallback data) => data.Data;
        public static implicit operator SDL_NSTimerCallback(FnPtr_VoidPtr_SDLTimerID_Uint64_Uint64 data) => new SDL_NSTimerCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_PenCapabilityFlags
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_PenCapabilityFlags data) => data.Data;
        public static implicit operator SDL_PenCapabilityFlags(Uint32 data) => new SDL_PenCapabilityFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_PenID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_PenID data) => data.Data;
        public static implicit operator SDL_PenID(Uint32 data) => new SDL_PenID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_PropertiesID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_PropertiesID data) => data.Data;
        public static implicit operator SDL_PropertiesID(Uint32 data) => new SDL_PropertiesID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_SensorID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_SensorID data) => data.Data;
        public static implicit operator SDL_SensorID(Uint32 data) => new SDL_SensorID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_SpinLock
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(SDL_SpinLock data) => data.Data;
        public static implicit operator SDL_SpinLock(int data) => new SDL_SpinLock() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_SurfaceFlags
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_SurfaceFlags data) => data.Data;
        public static implicit operator SDL_SurfaceFlags(Uint32 data) => new SDL_SurfaceFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_TLSDestructorCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Void Data;

        public static implicit operator FnPtr_VoidPtr_Void(SDL_TLSDestructorCallback data) => data.Data;
        public static implicit operator SDL_TLSDestructorCallback(FnPtr_VoidPtr_Void data) => new SDL_TLSDestructorCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_TLSID
    {
        [FieldOffset(0)]
        public SDL_AtomicInt Data;

        public static implicit operator SDL_AtomicInt(SDL_TLSID data) => data.Data;
        public static implicit operator SDL_TLSID(SDL_AtomicInt data) => new SDL_TLSID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_ThreadFunction
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Int Data;

        public static implicit operator FnPtr_VoidPtr_Int(SDL_ThreadFunction data) => data.Data;
        public static implicit operator SDL_ThreadFunction(FnPtr_VoidPtr_Int data) => new SDL_ThreadFunction() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_ThreadID
    {
        [FieldOffset(0)]
        public Uint64 Data;

        public static implicit operator Uint64(SDL_ThreadID data) => data.Data;
        public static implicit operator SDL_ThreadID(Uint64 data) => new SDL_ThreadID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_Time
    {
        [FieldOffset(0)]
        public Sint64 Data;

        public static implicit operator Sint64(SDL_Time data) => data.Data;
        public static implicit operator SDL_Time(Sint64 data) => new SDL_Time() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_TimerCallback
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_SDLTimerID_Uint32_Uint32 Data;

        public static implicit operator FnPtr_VoidPtr_SDLTimerID_Uint32_Uint32(SDL_TimerCallback data) => data.Data;
        public static implicit operator SDL_TimerCallback(FnPtr_VoidPtr_SDLTimerID_Uint32_Uint32 data) => new SDL_TimerCallback() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_TimerID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_TimerID data) => data.Data;
        public static implicit operator SDL_TimerID(Uint32 data) => new SDL_TimerID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_TouchID
    {
        [FieldOffset(0)]
        public Uint64 Data;

        public static implicit operator Uint64(SDL_TouchID data) => data.Data;
        public static implicit operator SDL_TouchID(Uint64 data) => new SDL_TouchID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_WindowFlags
    {
        [FieldOffset(0)]
        public Uint64 Data;

        public static implicit operator Uint64(SDL_WindowFlags data) => data.Data;
        public static implicit operator SDL_WindowFlags(Uint64 data) => new SDL_WindowFlags() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_WindowID
    {
        [FieldOffset(0)]
        public Uint32 Data;

        public static implicit operator Uint32(SDL_WindowID data) => data.Data;
        public static implicit operator SDL_WindowID(Uint32 data) => new SDL_WindowID() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_X11EventHook
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_XEventPtr_SDLBool Data;

        public static implicit operator FnPtr_VoidPtr_XEventPtr_SDLBool(SDL_X11EventHook data) => data.Data;
        public static implicit operator SDL_X11EventHook(FnPtr_VoidPtr_XEventPtr_SDLBool data) => new SDL_X11EventHook() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct SDL_bool
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(SDL_bool data) => data.Data;
        public static implicit operator SDL_bool(int data) => new SDL_bool() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_calloc_func
    {
        [FieldOffset(0)]
        public FnPtr_Ulong_Ulong_VoidPtr Data;

        public static implicit operator FnPtr_Ulong_Ulong_VoidPtr(SDL_calloc_func data) => data.Data;
        public static implicit operator SDL_calloc_func(FnPtr_Ulong_Ulong_VoidPtr data) => new SDL_calloc_func() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_free_func
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Void Data;

        public static implicit operator FnPtr_VoidPtr_Void(SDL_free_func data) => data.Data;
        public static implicit operator SDL_free_func(FnPtr_VoidPtr_Void data) => new SDL_free_func() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_iconv_t
    {
        [FieldOffset(0)]
        public SDL_iconv_data_t* Data;

        public static implicit operator SDL_iconv_data_t*(SDL_iconv_t data) => data.Data;
        public static implicit operator SDL_iconv_t(SDL_iconv_data_t* data) => new SDL_iconv_t() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_malloc_func
    {
        [FieldOffset(0)]
        public FnPtr_Ulong_VoidPtr Data;

        public static implicit operator FnPtr_Ulong_VoidPtr(SDL_malloc_func data) => data.Data;
        public static implicit operator SDL_malloc_func(FnPtr_Ulong_VoidPtr data) => new SDL_malloc_func() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct SDL_realloc_func
    {
        [FieldOffset(0)]
        public FnPtr_VoidPtr_Ulong_VoidPtr Data;

        public static implicit operator FnPtr_VoidPtr_Ulong_VoidPtr(SDL_realloc_func data) => data.Data;
        public static implicit operator SDL_realloc_func(FnPtr_VoidPtr_Ulong_VoidPtr data) => new SDL_realloc_func() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
    public struct Sint16
    {
        [FieldOffset(0)]
        public short Data;

        public static implicit operator short(Sint16 data) => data.Data;
        public static implicit operator Sint16(short data) => new Sint16() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct Sint32
    {
        [FieldOffset(0)]
        public int Data;

        public static implicit operator int(Sint32 data) => data.Data;
        public static implicit operator Sint32(int data) => new Sint32() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct Sint64
    {
        [FieldOffset(0)]
        public long Data;

        public static implicit operator long(Sint64 data) => data.Data;
        public static implicit operator Sint64(long data) => new Sint64() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 1, Pack = 1)]
    public struct Sint8
    {
        [FieldOffset(0)]
        public sbyte Data;

        public static implicit operator sbyte(Sint8 data) => data.Data;
        public static implicit operator Sint8(sbyte data) => new Sint8() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 2, Pack = 2)]
    public struct Uint16
    {
        [FieldOffset(0)]
        public ushort Data;

        public static implicit operator ushort(Uint16 data) => data.Data;
        public static implicit operator Uint16(ushort data) => new Uint16() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 4, Pack = 4)]
    public struct Uint32
    {
        [FieldOffset(0)]
        public uint Data;

        public static implicit operator uint(Uint32 data) => data.Data;
        public static implicit operator Uint32(uint data) => new Uint32() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 8, Pack = 8)]
    public struct Uint64
    {
        [FieldOffset(0)]
        public ulong Data;

        public static implicit operator ulong(Uint64 data) => data.Data;
        public static implicit operator Uint64(ulong data) => new Uint64() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 1, Pack = 1)]
    public struct Uint8
    {
        [FieldOffset(0)]
        public byte Data;

        public static implicit operator byte(Uint8 data) => data.Data;
        public static implicit operator Uint8(byte data) => new Uint8() { Data = data };
    }

    [StructLayout(LayoutKind.Explicit, Size = 0, Pack = 0)]
    public struct XEvent
    {
        [FieldOffset(0)]
        public _XEvent Data;

        public static implicit operator _XEvent(XEvent data) => data.Data;
        public static implicit operator XEvent(_XEvent data) => new XEvent() { Data = data };
    }

    public const uint SDLK_0 = 48;

    public const uint SDLK_1 = 49;

    public const uint SDLK_2 = 50;

    public const uint SDLK_3 = 51;

    public const uint SDLK_4 = 52;

    public const uint SDLK_5 = 53;

    public const uint SDLK_6 = 54;

    public const uint SDLK_7 = 55;

    public const uint SDLK_8 = 56;

    public const uint SDLK_9 = 57;

    public const uint SDLK_A = 97;

    public const uint SDLK_AC_BACK = 1073742106;

    public const uint SDLK_AC_BOOKMARKS = 1073742110;

    public const uint SDLK_AC_CLOSE = 1073742099;

    public const uint SDLK_AC_EXIT = 1073742100;

    public const uint SDLK_AC_FORWARD = 1073742107;

    public const uint SDLK_AC_HOME = 1073742105;

    public const uint SDLK_AC_NEW = 1073742097;

    public const uint SDLK_AC_OPEN = 1073742098;

    public const uint SDLK_AC_PRINT = 1073742102;

    public const uint SDLK_AC_PROPERTIES = 1073742103;

    public const uint SDLK_AC_REFRESH = 1073742109;

    public const uint SDLK_AC_SAVE = 1073742101;

    public const uint SDLK_AC_SEARCH = 1073742104;

    public const uint SDLK_AC_STOP = 1073742108;

    public const uint SDLK_AGAIN = 1073741945;

    public const uint SDLK_ALTERASE = 1073741977;

    public const uint SDLK_AMPERSAND = 38;

    public const uint SDLK_APOSTROPHE = 39;

    public const uint SDLK_APPLICATION = 1073741925;

    public const uint SDLK_ASTERISK = 42;

    public const uint SDLK_AT = 64;

    public const uint SDLK_B = 98;

    public const uint SDLK_BACKSLASH = 92;

    public const uint SDLK_BACKSPACE = 8;

    public const uint SDLK_C = 99;

    public const uint SDLK_CALL = 1073742113;

    public const uint SDLK_CANCEL = 1073741979;

    public const uint SDLK_CAPSLOCK = 1073741881;

    public const uint SDLK_CARET = 94;

    public const uint SDLK_CHANNEL_DECREMENT = 1073742085;

    public const uint SDLK_CHANNEL_INCREMENT = 1073742084;

    public const uint SDLK_CLEAR = 1073741980;

    public const uint SDLK_CLEARAGAIN = 1073741986;

    public const uint SDLK_COLON = 58;

    public const uint SDLK_COMMA = 44;

    public const uint SDLK_COPY = 1073741948;

    public const uint SDLK_CRSEL = 1073741987;

    public const uint SDLK_CURRENCYSUBUNIT = 1073742005;

    public const uint SDLK_CURRENCYUNIT = 1073742004;

    public const uint SDLK_CUT = 1073741947;

    public const uint SDLK_D = 100;

    public const uint SDLK_DBLAPOSTROPHE = 34;

    public const uint SDLK_DECIMALSEPARATOR = 1073742003;

    public const uint SDLK_DELETE = 127;

    public const uint SDLK_DOLLAR = 36;

    public const uint SDLK_DOWN = 1073741905;

    public const uint SDLK_E = 101;

    public const uint SDLK_END = 1073741901;

    public const uint SDLK_ENDCALL = 1073742114;

    public const uint SDLK_EQUALS = 61;

    public const uint SDLK_ESCAPE = 27;

    public const uint SDLK_EXCLAIM = 33;

    public const uint SDLK_EXECUTE = 1073741940;

    public const uint SDLK_EXSEL = 1073741988;

    public const uint SDLK_F = 102;

    public const uint SDLK_F1 = 1073741882;

    public const uint SDLK_F10 = 1073741891;

    public const uint SDLK_F11 = 1073741892;

    public const uint SDLK_F12 = 1073741893;

    public const uint SDLK_F13 = 1073741928;

    public const uint SDLK_F14 = 1073741929;

    public const uint SDLK_F15 = 1073741930;

    public const uint SDLK_F16 = 1073741931;

    public const uint SDLK_F17 = 1073741932;

    public const uint SDLK_F18 = 1073741933;

    public const uint SDLK_F19 = 1073741934;

    public const uint SDLK_F2 = 1073741883;

    public const uint SDLK_F20 = 1073741935;

    public const uint SDLK_F21 = 1073741936;

    public const uint SDLK_F22 = 1073741937;

    public const uint SDLK_F23 = 1073741938;

    public const uint SDLK_F24 = 1073741939;

    public const uint SDLK_F3 = 1073741884;

    public const uint SDLK_F4 = 1073741885;

    public const uint SDLK_F5 = 1073741886;

    public const uint SDLK_F6 = 1073741887;

    public const uint SDLK_F7 = 1073741888;

    public const uint SDLK_F8 = 1073741889;

    public const uint SDLK_F9 = 1073741890;

    public const uint SDLK_FIND = 1073741950;

    public const uint SDLK_G = 103;

    public const uint SDLK_GRAVE = 96;

    public const uint SDLK_GREATER = 62;

    public const uint SDLK_H = 104;

    public const uint SDLK_HASH = 35;

    public const uint SDLK_HELP = 1073741941;

    public const uint SDLK_HOME = 1073741898;

    public const uint SDLK_I = 105;

    public const uint SDLK_INSERT = 1073741897;

    public const uint SDLK_J = 106;

    public const uint SDLK_K = 107;

    public const uint SDLK_KP_0 = 1073741922;

    public const uint SDLK_KP_00 = 1073742000;

    public const uint SDLK_KP_000 = 1073742001;

    public const uint SDLK_KP_1 = 1073741913;

    public const uint SDLK_KP_2 = 1073741914;

    public const uint SDLK_KP_3 = 1073741915;

    public const uint SDLK_KP_4 = 1073741916;

    public const uint SDLK_KP_5 = 1073741917;

    public const uint SDLK_KP_6 = 1073741918;

    public const uint SDLK_KP_7 = 1073741919;

    public const uint SDLK_KP_8 = 1073741920;

    public const uint SDLK_KP_9 = 1073741921;

    public const uint SDLK_KP_A = 1073742012;

    public const uint SDLK_KP_AMPERSAND = 1073742023;

    public const uint SDLK_KP_AT = 1073742030;

    public const uint SDLK_KP_B = 1073742013;

    public const uint SDLK_KP_BACKSPACE = 1073742011;

    public const uint SDLK_KP_BINARY = 1073742042;

    public const uint SDLK_KP_C = 1073742014;

    public const uint SDLK_KP_CLEAR = 1073742040;

    public const uint SDLK_KP_CLEARENTRY = 1073742041;

    public const uint SDLK_KP_COLON = 1073742027;

    public const uint SDLK_KP_COMMA = 1073741957;

    public const uint SDLK_KP_D = 1073742015;

    public const uint SDLK_KP_DBLAMPERSAND = 1073742024;

    public const uint SDLK_KP_DBLVERTICALBAR = 1073742026;

    public const uint SDLK_KP_DECIMAL = 1073742044;

    public const uint SDLK_KP_DIVIDE = 1073741908;

    public const uint SDLK_KP_E = 1073742016;

    public const uint SDLK_KP_ENTER = 1073741912;

    public const uint SDLK_KP_EQUALS = 1073741927;

    public const uint SDLK_KP_EQUALSAS400 = 1073741958;

    public const uint SDLK_KP_EXCLAM = 1073742031;

    public const uint SDLK_KP_F = 1073742017;

    public const uint SDLK_KP_GREATER = 1073742022;

    public const uint SDLK_KP_HASH = 1073742028;

    public const uint SDLK_KP_HEXADECIMAL = 1073742045;

    public const uint SDLK_KP_LEFTBRACE = 1073742008;

    public const uint SDLK_KP_LEFTPAREN = 1073742006;

    public const uint SDLK_KP_LESS = 1073742021;

    public const uint SDLK_KP_MEMADD = 1073742035;

    public const uint SDLK_KP_MEMCLEAR = 1073742034;

    public const uint SDLK_KP_MEMDIVIDE = 1073742038;

    public const uint SDLK_KP_MEMMULTIPLY = 1073742037;

    public const uint SDLK_KP_MEMRECALL = 1073742033;

    public const uint SDLK_KP_MEMSTORE = 1073742032;

    public const uint SDLK_KP_MEMSUBTRACT = 1073742036;

    public const uint SDLK_KP_MINUS = 1073741910;

    public const uint SDLK_KP_MULTIPLY = 1073741909;

    public const uint SDLK_KP_OCTAL = 1073742043;

    public const uint SDLK_KP_PERCENT = 1073742020;

    public const uint SDLK_KP_PERIOD = 1073741923;

    public const uint SDLK_KP_PLUS = 1073741911;

    public const uint SDLK_KP_PLUSMINUS = 1073742039;

    public const uint SDLK_KP_POWER = 1073742019;

    public const uint SDLK_KP_RIGHTBRACE = 1073742009;

    public const uint SDLK_KP_RIGHTPAREN = 1073742007;

    public const uint SDLK_KP_SPACE = 1073742029;

    public const uint SDLK_KP_TAB = 1073742010;

    public const uint SDLK_KP_VERTICALBAR = 1073742025;

    public const uint SDLK_KP_XOR = 1073742018;

    public const uint SDLK_L = 108;

    public const uint SDLK_LALT = 1073742050;

    public const uint SDLK_LCTRL = 1073742048;

    public const uint SDLK_LEFT = 1073741904;

    public const uint SDLK_LEFTBRACE = 123;

    public const uint SDLK_LEFTBRACKET = 91;

    public const uint SDLK_LEFTPAREN = 40;

    public const uint SDLK_LESS = 60;

    public const uint SDLK_LGUI = 1073742051;

    public const uint SDLK_LSHIFT = 1073742049;

    public const uint SDLK_M = 109;

    public const uint SDLK_MEDIA_EJECT = 1073742094;

    public const uint SDLK_MEDIA_FAST_FORWARD = 1073742089;

    public const uint SDLK_MEDIA_NEXT_TRACK = 1073742091;

    public const uint SDLK_MEDIA_PAUSE = 1073742087;

    public const uint SDLK_MEDIA_PLAY = 1073742086;

    public const uint SDLK_MEDIA_PLAY_PAUSE = 1073742095;

    public const uint SDLK_MEDIA_PREVIOUS_TRACK = 1073742092;

    public const uint SDLK_MEDIA_RECORD = 1073742088;

    public const uint SDLK_MEDIA_REWIND = 1073742090;

    public const uint SDLK_MEDIA_SELECT = 1073742096;

    public const uint SDLK_MEDIA_STOP = 1073742093;

    public const uint SDLK_MENU = 1073741942;

    public const uint SDLK_MINUS = 45;

    public const uint SDLK_MODE = 1073742081;

    public const uint SDLK_MUTE = 1073741951;

    public const uint SDLK_N = 110;

    public const uint SDLK_NUMLOCKCLEAR = 1073741907;

    public const uint SDLK_O = 111;

    public const uint SDLK_OPER = 1073741985;

    public const uint SDLK_OUT = 1073741984;

    public const uint SDLK_P = 112;

    public const uint SDLK_PAGEDOWN = 1073741902;

    public const uint SDLK_PAGEUP = 1073741899;

    public const uint SDLK_PASTE = 1073741949;

    public const uint SDLK_PAUSE = 1073741896;

    public const uint SDLK_PERCENT = 37;

    public const uint SDLK_PERIOD = 46;

    public const uint SDLK_PIPE = 124;

    public const uint SDLK_PLUS = 43;

    public const uint SDLK_PLUSMINUS = 177;

    public const uint SDLK_POWER = 1073741926;

    public const uint SDLK_PRINTSCREEN = 1073741894;

    public const uint SDLK_PRIOR = 1073741981;

    public const uint SDLK_Q = 113;

    public const uint SDLK_QUESTION = 63;

    public const uint SDLK_R = 114;

    public const uint SDLK_RALT = 1073742054;

    public const uint SDLK_RCTRL = 1073742052;

    public const uint SDLK_RETURN = 13;

    public const uint SDLK_RETURN2 = 1073741982;

    public const uint SDLK_RGUI = 1073742055;

    public const uint SDLK_RIGHT = 1073741903;

    public const uint SDLK_RIGHTBRACE = 125;

    public const uint SDLK_RIGHTBRACKET = 93;

    public const uint SDLK_RIGHTPAREN = 41;

    public const uint SDLK_RSHIFT = 1073742053;

    public const uint SDLK_S = 115;

    public const uint SDLK_SCANCODE_MASK = 1073741824;

    public const uint SDLK_SCROLLLOCK = 1073741895;

    public const uint SDLK_SELECT = 1073741943;

    public const uint SDLK_SEMICOLON = 59;

    public const uint SDLK_SEPARATOR = 1073741983;

    public const uint SDLK_SLASH = 47;

    public const uint SDLK_SLEEP = 1073742082;

    public const uint SDLK_SOFTLEFT = 1073742111;

    public const uint SDLK_SOFTRIGHT = 1073742112;

    public const uint SDLK_SPACE = 32;

    public const uint SDLK_STOP = 1073741944;

    public const uint SDLK_SYSREQ = 1073741978;

    public const uint SDLK_T = 116;

    public const uint SDLK_TAB = 9;

    public const uint SDLK_THOUSANDSSEPARATOR = 1073742002;

    public const uint SDLK_TILDE = 126;

    public const uint SDLK_U = 117;

    public const uint SDLK_UNDERSCORE = 95;

    public const uint SDLK_UNDO = 1073741946;

    public const uint SDLK_UNKNOWN = 0;

    public const uint SDLK_UP = 1073741906;

    public const uint SDLK_V = 118;

    public const uint SDLK_VOLUMEDOWN = 1073741953;

    public const uint SDLK_VOLUMEUP = 1073741952;

    public const uint SDLK_W = 119;

    public const uint SDLK_WAKE = 1073742083;

    public const uint SDLK_X = 120;

    public const uint SDLK_Y = 121;

    public const uint SDLK_Z = 122;

    public const int SDL_ALPHA_OPAQUE = 255;

    public const int SDL_ALPHA_TRANSPARENT = 0;

    public const int SDL_ASSERT_LEVEL = 2;

    public static SDL_AudioDeviceID SDL_AUDIO_DEVICE_DEFAULT_PLAYBACK = (SDL_AudioDeviceID)4294967295;

    public static SDL_AudioDeviceID SDL_AUDIO_DEVICE_DEFAULT_RECORDING = (SDL_AudioDeviceID)4294967294;

    public static SDL_AudioFormat SDL_AUDIO_F32 = (SDL_AudioFormat)33056;

    public const uint SDL_AUDIO_MASK_BIG_ENDIAN = 4096;

    public const uint SDL_AUDIO_MASK_BITSIZE = 255;

    public const uint SDL_AUDIO_MASK_FLOAT = 256;

    public const uint SDL_AUDIO_MASK_SIGNED = 32768;

    public static SDL_AudioFormat SDL_AUDIO_S16 = (SDL_AudioFormat)32784;

    public static SDL_AudioFormat SDL_AUDIO_S32 = (SDL_AudioFormat)32800;

    public const int SDL_BIG_ENDIAN = 4321;

    public const uint SDL_BLENDMODE_ADD = 2;

    public const uint SDL_BLENDMODE_ADD_PREMULTIPLIED = 32;

    public const uint SDL_BLENDMODE_BLEND = 1;

    public const uint SDL_BLENDMODE_BLEND_PREMULTIPLIED = 16;

    public const uint SDL_BLENDMODE_INVALID = 2147483647;

    public const uint SDL_BLENDMODE_MOD = 4;

    public const uint SDL_BLENDMODE_MUL = 8;

    public const uint SDL_BLENDMODE_NONE = 0;

    public const int SDL_BUTTON_LEFT = 1;

    public const uint SDL_BUTTON_LMASK = 1;

    public const int SDL_BUTTON_MIDDLE = 2;

    public const uint SDL_BUTTON_MMASK = 2;

    public const int SDL_BUTTON_RIGHT = 3;

    public const uint SDL_BUTTON_RMASK = 4;

    public const int SDL_BUTTON_X1 = 4;

    public const uint SDL_BUTTON_X1MASK = 8;

    public const int SDL_BUTTON_X2 = 5;

    public const uint SDL_BUTTON_X2MASK = 16;

    public const int SDL_BYTEORDER = 1234;

    public const long SDL_BeginThreadFunction = 0;

    public const int SDL_CACHELINE_SIZE = 128;

    public static SDL_Colorspace SDL_COLORSPACE_RGB_DEFAULT = (SDL_Colorspace)301991328;

    public static SDL_Colorspace SDL_COLORSPACE_YUV_DEFAULT = (SDL_Colorspace)570426566;

    public const long SDL_EndThreadFunction = 0;

    public const int SDL_FALSE = 0;

    public const int SDL_FLOATWORDORDER = 1234;

    public const float SDL_FLT_EPSILON = 1.1920928955078125E-07f;

    public const uint SDL_GLOB_CASEINSENSITIVE = 1;

    public const uint SDL_HAPTIC_AUTOCENTER = 131072;

    public const int SDL_HAPTIC_CARTESIAN = 1;

    public const uint SDL_HAPTIC_CONSTANT = 1;

    public const uint SDL_HAPTIC_CUSTOM = 32768;

    public const uint SDL_HAPTIC_DAMPER = 256;

    public const uint SDL_HAPTIC_FRICTION = 1024;

    public const uint SDL_HAPTIC_GAIN = 65536;

    public const uint SDL_HAPTIC_INERTIA = 512;

    public const uint SDL_HAPTIC_INFINITY = 4294967295;

    public const uint SDL_HAPTIC_LEFTRIGHT = 2048;

    public const uint SDL_HAPTIC_PAUSE = 524288;

    public const int SDL_HAPTIC_POLAR = 0;

    public const uint SDL_HAPTIC_RAMP = 64;

    public const uint SDL_HAPTIC_RESERVED1 = 4096;

    public const uint SDL_HAPTIC_RESERVED2 = 8192;

    public const uint SDL_HAPTIC_RESERVED3 = 16384;

    public const uint SDL_HAPTIC_SAWTOOTHDOWN = 32;

    public const uint SDL_HAPTIC_SAWTOOTHUP = 16;

    public const uint SDL_HAPTIC_SINE = 2;

    public const int SDL_HAPTIC_SPHERICAL = 2;

    public const uint SDL_HAPTIC_SPRING = 128;

    public const uint SDL_HAPTIC_SQUARE = 4;

    public const uint SDL_HAPTIC_STATUS = 262144;

    public const int SDL_HAPTIC_STEERING_AXIS = 3;

    public const uint SDL_HAPTIC_TRIANGLE = 8;

    public const uint SDL_HAT_CENTERED = 0;

    public const uint SDL_HAT_DOWN = 4;

    public const uint SDL_HAT_LEFT = 8;

    public const uint SDL_HAT_LEFTDOWN = 12;

    public const uint SDL_HAT_LEFTUP = 9;

    public const uint SDL_HAT_RIGHT = 2;

    public const uint SDL_HAT_RIGHTDOWN = 6;

    public const uint SDL_HAT_RIGHTUP = 3;

    public const uint SDL_HAT_UP = 1;

    public static string SDL_HINT_ALLOW_ALT_TAB_WHILE_GRABBED = (string)"SDL_ALLOW_ALT_TAB_WHILE_GRABBED";

    public static string SDL_HINT_ANDROID_ALLOW_RECREATE_ACTIVITY = (string)"SDL_ANDROID_ALLOW_RECREATE_ACTIVITY";

    public static string SDL_HINT_ANDROID_BLOCK_ON_PAUSE = (string)"SDL_ANDROID_BLOCK_ON_PAUSE";

    public static string SDL_HINT_ANDROID_TRAP_BACK_BUTTON = (string)"SDL_ANDROID_TRAP_BACK_BUTTON";

    public static string SDL_HINT_APPLE_TV_CONTROLLER_UI_EVENTS = (string)"SDL_APPLE_TV_CONTROLLER_UI_EVENTS";

    public static string SDL_HINT_APPLE_TV_REMOTE_ALLOW_ROTATION = (string)"SDL_APPLE_TV_REMOTE_ALLOW_ROTATION";

    public static string SDL_HINT_APP_ID = (string)"SDL_APP_ID";

    public static string SDL_HINT_APP_NAME = (string)"SDL_APP_NAME";

    public static string SDL_HINT_AUDIO_ALSA_DEFAULT_DEVICE = (string)"SDL_AUDIO_ALSA_DEFAULT_DEVICE";

    public static string SDL_HINT_AUDIO_CATEGORY = (string)"SDL_AUDIO_CATEGORY";

    public static string SDL_HINT_AUDIO_CHANNELS = (string)"SDL_AUDIO_CHANNELS";

    public static string SDL_HINT_AUDIO_DEVICE_APP_ICON_NAME = (string)"SDL_AUDIO_DEVICE_APP_ICON_NAME";

    public static string SDL_HINT_AUDIO_DEVICE_SAMPLE_FRAMES = (string)"SDL_AUDIO_DEVICE_SAMPLE_FRAMES";

    public static string SDL_HINT_AUDIO_DEVICE_STREAM_NAME = (string)"SDL_AUDIO_DEVICE_STREAM_NAME";

    public static string SDL_HINT_AUDIO_DEVICE_STREAM_ROLE = (string)"SDL_AUDIO_DEVICE_STREAM_ROLE";

    public static string SDL_HINT_AUDIO_DISK_INPUT_FILE = (string)"SDL_AUDIO_DISK_INPUT_FILE";

    public static string SDL_HINT_AUDIO_DISK_OUTPUT_FILE = (string)"SDL_AUDIO_DISK_OUTPUT_FILE";

    public static string SDL_HINT_AUDIO_DISK_TIMESCALE = (string)"SDL_AUDIO_DISK_TIMESCALE";

    public static string SDL_HINT_AUDIO_DRIVER = (string)"SDL_AUDIO_DRIVER";

    public static string SDL_HINT_AUDIO_DUMMY_TIMESCALE = (string)"SDL_AUDIO_DUMMY_TIMESCALE";

    public static string SDL_HINT_AUDIO_FORMAT = (string)"SDL_AUDIO_FORMAT";

    public static string SDL_HINT_AUDIO_FREQUENCY = (string)"SDL_AUDIO_FREQUENCY";

    public static string SDL_HINT_AUDIO_INCLUDE_MONITORS = (string)"SDL_AUDIO_INCLUDE_MONITORS";

    public static string SDL_HINT_AUTO_UPDATE_JOYSTICKS = (string)"SDL_AUTO_UPDATE_JOYSTICKS";

    public static string SDL_HINT_AUTO_UPDATE_SENSORS = (string)"SDL_AUTO_UPDATE_SENSORS";

    public static string SDL_HINT_BMP_SAVE_LEGACY_FORMAT = (string)"SDL_BMP_SAVE_LEGACY_FORMAT";

    public static string SDL_HINT_CAMERA_DRIVER = (string)"SDL_CAMERA_DRIVER";

    public static string SDL_HINT_CPU_FEATURE_MASK = (string)"SDL_CPU_FEATURE_MASK";

    public static string SDL_HINT_DISPLAY_USABLE_BOUNDS = (string)"SDL_DISPLAY_USABLE_BOUNDS";

    public static string SDL_HINT_EMSCRIPTEN_ASYNCIFY = (string)"SDL_EMSCRIPTEN_ASYNCIFY";

    public static string SDL_HINT_EMSCRIPTEN_CANVAS_SELECTOR = (string)"SDL_EMSCRIPTEN_CANVAS_SELECTOR";

    public static string SDL_HINT_EMSCRIPTEN_KEYBOARD_ELEMENT = (string)"SDL_EMSCRIPTEN_KEYBOARD_ELEMENT";

    public static string SDL_HINT_ENABLE_SCREEN_KEYBOARD = (string)"SDL_ENABLE_SCREEN_KEYBOARD";

    public static string SDL_HINT_EVDEV_DEVICES = (string)"SDL_EVDEV_DEVICES";

    public static string SDL_HINT_EVENT_LOGGING = (string)"SDL_EVENT_LOGGING";

    public static string SDL_HINT_FILE_DIALOG_DRIVER = (string)"SDL_FILE_DIALOG_DRIVER";

    public static string SDL_HINT_FORCE_RAISEWINDOW = (string)"SDL_FORCE_RAISEWINDOW";

    public static string SDL_HINT_FRAMEBUFFER_ACCELERATION = (string)"SDL_FRAMEBUFFER_ACCELERATION";

    public static string SDL_HINT_GAMECONTROLLERCONFIG = (string)"SDL_GAMECONTROLLERCONFIG";

    public static string SDL_HINT_GAMECONTROLLERCONFIG_FILE = (string)"SDL_GAMECONTROLLERCONFIG_FILE";

    public static string SDL_HINT_GAMECONTROLLERTYPE = (string)"SDL_GAMECONTROLLERTYPE";

    public static string SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES = (string)"SDL_GAMECONTROLLER_IGNORE_DEVICES";

    public static string SDL_HINT_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT = (string)"SDL_GAMECONTROLLER_IGNORE_DEVICES_EXCEPT";

    public static string SDL_HINT_GAMECONTROLLER_SENSOR_FUSION = (string)"SDL_GAMECONTROLLER_SENSOR_FUSION";

    public static string SDL_HINT_GDK_TEXTINPUT_DEFAULT_TEXT = (string)"SDL_GDK_TEXTINPUT_DEFAULT_TEXT";

    public static string SDL_HINT_GDK_TEXTINPUT_DESCRIPTION = (string)"SDL_GDK_TEXTINPUT_DESCRIPTION";

    public static string SDL_HINT_GDK_TEXTINPUT_MAX_LENGTH = (string)"SDL_GDK_TEXTINPUT_MAX_LENGTH";

    public static string SDL_HINT_GDK_TEXTINPUT_SCOPE = (string)"SDL_GDK_TEXTINPUT_SCOPE";

    public static string SDL_HINT_GDK_TEXTINPUT_TITLE = (string)"SDL_GDK_TEXTINPUT_TITLE";

    public static string SDL_HINT_HIDAPI_ENUMERATE_ONLY_CONTROLLERS = (string)"SDL_HIDAPI_ENUMERATE_ONLY_CONTROLLERS";

    public static string SDL_HINT_HIDAPI_IGNORE_DEVICES = (string)"SDL_HIDAPI_IGNORE_DEVICES";

    public static string SDL_HINT_HIDAPI_LIBUSB = (string)"SDL_HIDAPI_LIBUSB";

    public static string SDL_HINT_HIDAPI_LIBUSB_WHITELIST = (string)"SDL_HIDAPI_LIBUSB_WHITELIST";

    public static string SDL_HINT_HIDAPI_UDEV = (string)"SDL_HIDAPI_UDEV";

    public static string SDL_HINT_IME_IMPLEMENTED_UI = (string)"SDL_IME_IMPLEMENTED_UI";

    public static string SDL_HINT_IOS_HIDE_HOME_INDICATOR = (string)"SDL_IOS_HIDE_HOME_INDICATOR";

    public static string SDL_HINT_JOYSTICK_ALLOW_BACKGROUND_EVENTS = (string)"SDL_JOYSTICK_ALLOW_BACKGROUND_EVENTS";

    public static string SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES = (string)"SDL_JOYSTICK_ARCADESTICK_DEVICES";

    public static string SDL_HINT_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED = (string)"SDL_JOYSTICK_ARCADESTICK_DEVICES_EXCLUDED";

    public static string SDL_HINT_JOYSTICK_BLACKLIST_DEVICES = (string)"SDL_JOYSTICK_BLACKLIST_DEVICES";

    public static string SDL_HINT_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED = (string)"SDL_JOYSTICK_BLACKLIST_DEVICES_EXCLUDED";

    public static string SDL_HINT_JOYSTICK_DEVICE = (string)"SDL_JOYSTICK_DEVICE";

    public static string SDL_HINT_JOYSTICK_DIRECTINPUT = (string)"SDL_JOYSTICK_DIRECTINPUT";

    public static string SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES = (string)"SDL_JOYSTICK_FLIGHTSTICK_DEVICES";

    public static string SDL_HINT_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED = (string)"SDL_JOYSTICK_FLIGHTSTICK_DEVICES_EXCLUDED";

    public static string SDL_HINT_JOYSTICK_GAMECUBE_DEVICES = (string)"SDL_JOYSTICK_GAMECUBE_DEVICES";

    public static string SDL_HINT_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED = (string)"SDL_JOYSTICK_GAMECUBE_DEVICES_EXCLUDED";

    public static string SDL_HINT_JOYSTICK_HIDAPI = (string)"SDL_JOYSTICK_HIDAPI";

    public static string SDL_HINT_JOYSTICK_HIDAPI_COMBINE_JOY_CONS = (string)"SDL_JOYSTICK_HIDAPI_COMBINE_JOY_CONS";

    public static string SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE = (string)"SDL_JOYSTICK_HIDAPI_GAMECUBE";

    public static string SDL_HINT_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE = (string)"SDL_JOYSTICK_HIDAPI_GAMECUBE_RUMBLE_BRAKE";

    public static string SDL_HINT_JOYSTICK_HIDAPI_JOYCON_HOME_LED = (string)"SDL_JOYSTICK_HIDAPI_JOYCON_HOME_LED";

    public static string SDL_HINT_JOYSTICK_HIDAPI_JOY_CONS = (string)"SDL_JOYSTICK_HIDAPI_JOY_CONS";

    public static string SDL_HINT_JOYSTICK_HIDAPI_LUNA = (string)"SDL_JOYSTICK_HIDAPI_LUNA";

    public static string SDL_HINT_JOYSTICK_HIDAPI_NINTENDO_CLASSIC = (string)"SDL_JOYSTICK_HIDAPI_NINTENDO_CLASSIC";

    public static string SDL_HINT_JOYSTICK_HIDAPI_PS3 = (string)"SDL_JOYSTICK_HIDAPI_PS3";

    public static string SDL_HINT_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER = (string)"SDL_JOYSTICK_HIDAPI_PS3_SIXAXIS_DRIVER";

    public static string SDL_HINT_JOYSTICK_HIDAPI_PS4 = (string)"SDL_JOYSTICK_HIDAPI_PS4";

    public static string SDL_HINT_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL = (string)"SDL_JOYSTICK_HIDAPI_PS4_REPORT_INTERVAL";

    public static string SDL_HINT_JOYSTICK_HIDAPI_PS4_RUMBLE = (string)"SDL_JOYSTICK_HIDAPI_PS4_RUMBLE";

    public static string SDL_HINT_JOYSTICK_HIDAPI_PS5 = (string)"SDL_JOYSTICK_HIDAPI_PS5";

    public static string SDL_HINT_JOYSTICK_HIDAPI_PS5_PLAYER_LED = (string)"SDL_JOYSTICK_HIDAPI_PS5_PLAYER_LED";

    public static string SDL_HINT_JOYSTICK_HIDAPI_PS5_RUMBLE = (string)"SDL_JOYSTICK_HIDAPI_PS5_RUMBLE";

    public static string SDL_HINT_JOYSTICK_HIDAPI_SHIELD = (string)"SDL_JOYSTICK_HIDAPI_SHIELD";

    public static string SDL_HINT_JOYSTICK_HIDAPI_STADIA = (string)"SDL_JOYSTICK_HIDAPI_STADIA";

    public static string SDL_HINT_JOYSTICK_HIDAPI_STEAM = (string)"SDL_JOYSTICK_HIDAPI_STEAM";

    public static string SDL_HINT_JOYSTICK_HIDAPI_STEAMDECK = (string)"SDL_JOYSTICK_HIDAPI_STEAMDECK";

    public static string SDL_HINT_JOYSTICK_HIDAPI_SWITCH = (string)"SDL_JOYSTICK_HIDAPI_SWITCH";

    public static string SDL_HINT_JOYSTICK_HIDAPI_SWITCH_HOME_LED = (string)"SDL_JOYSTICK_HIDAPI_SWITCH_HOME_LED";

    public static string SDL_HINT_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED = (string)"SDL_JOYSTICK_HIDAPI_SWITCH_PLAYER_LED";

    public static string SDL_HINT_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS = (string)"SDL_JOYSTICK_HIDAPI_VERTICAL_JOY_CONS";

    public static string SDL_HINT_JOYSTICK_HIDAPI_WII = (string)"SDL_JOYSTICK_HIDAPI_WII";

    public static string SDL_HINT_JOYSTICK_HIDAPI_WII_PLAYER_LED = (string)"SDL_JOYSTICK_HIDAPI_WII_PLAYER_LED";

    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX = (string)"SDL_JOYSTICK_HIDAPI_XBOX";

    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_360 = (string)"SDL_JOYSTICK_HIDAPI_XBOX_360";

    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED = (string)"SDL_JOYSTICK_HIDAPI_XBOX_360_PLAYER_LED";

    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_360_WIRELESS = (string)"SDL_JOYSTICK_HIDAPI_XBOX_360_WIRELESS";

    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE = (string)"SDL_JOYSTICK_HIDAPI_XBOX_ONE";

    public static string SDL_HINT_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED = (string)"SDL_JOYSTICK_HIDAPI_XBOX_ONE_HOME_LED";

    public static string SDL_HINT_JOYSTICK_IOKIT = (string)"SDL_JOYSTICK_IOKIT";

    public static string SDL_HINT_JOYSTICK_LINUX_CLASSIC = (string)"SDL_JOYSTICK_LINUX_CLASSIC";

    public static string SDL_HINT_JOYSTICK_LINUX_DEADZONES = (string)"SDL_JOYSTICK_LINUX_DEADZONES";

    public static string SDL_HINT_JOYSTICK_LINUX_DIGITAL_HATS = (string)"SDL_JOYSTICK_LINUX_DIGITAL_HATS";

    public static string SDL_HINT_JOYSTICK_LINUX_HAT_DEADZONES = (string)"SDL_JOYSTICK_LINUX_HAT_DEADZONES";

    public static string SDL_HINT_JOYSTICK_MFI = (string)"SDL_JOYSTICK_MFI";

    public static string SDL_HINT_JOYSTICK_RAWINPUT = (string)"SDL_JOYSTICK_RAWINPUT";

    public static string SDL_HINT_JOYSTICK_RAWINPUT_CORRELATE_XINPUT = (string)"SDL_JOYSTICK_RAWINPUT_CORRELATE_XINPUT";

    public static string SDL_HINT_JOYSTICK_ROG_CHAKRAM = (string)"SDL_JOYSTICK_ROG_CHAKRAM";

    public static string SDL_HINT_JOYSTICK_THREAD = (string)"SDL_JOYSTICK_THREAD";

    public static string SDL_HINT_JOYSTICK_THROTTLE_DEVICES = (string)"SDL_JOYSTICK_THROTTLE_DEVICES";

    public static string SDL_HINT_JOYSTICK_THROTTLE_DEVICES_EXCLUDED = (string)"SDL_JOYSTICK_THROTTLE_DEVICES_EXCLUDED";

    public static string SDL_HINT_JOYSTICK_WGI = (string)"SDL_JOYSTICK_WGI";

    public static string SDL_HINT_JOYSTICK_WHEEL_DEVICES = (string)"SDL_JOYSTICK_WHEEL_DEVICES";

    public static string SDL_HINT_JOYSTICK_WHEEL_DEVICES_EXCLUDED = (string)"SDL_JOYSTICK_WHEEL_DEVICES_EXCLUDED";

    public static string SDL_HINT_JOYSTICK_ZERO_CENTERED_DEVICES = (string)"SDL_JOYSTICK_ZERO_CENTERED_DEVICES";

    public static string SDL_HINT_KEYCODE_OPTIONS = (string)"SDL_KEYCODE_OPTIONS";

    public static string SDL_HINT_KMSDRM_DEVICE_INDEX = (string)"SDL_KMSDRM_DEVICE_INDEX";

    public static string SDL_HINT_KMSDRM_REQUIRE_DRM_MASTER = (string)"SDL_KMSDRM_REQUIRE_DRM_MASTER";

    public static string SDL_HINT_LOGGING = (string)"SDL_LOGGING";

    public static string SDL_HINT_MAC_BACKGROUND_APP = (string)"SDL_MAC_BACKGROUND_APP";

    public static string SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK = (string)"SDL_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK";

    public static string SDL_HINT_MAC_OPENGL_ASYNC_DISPATCH = (string)"SDL_MAC_OPENGL_ASYNC_DISPATCH";

    public static string SDL_HINT_MAIN_CALLBACK_RATE = (string)"SDL_MAIN_CALLBACK_RATE";

    public static string SDL_HINT_MOUSE_AUTO_CAPTURE = (string)"SDL_MOUSE_AUTO_CAPTURE";

    public static string SDL_HINT_MOUSE_DOUBLE_CLICK_RADIUS = (string)"SDL_MOUSE_DOUBLE_CLICK_RADIUS";

    public static string SDL_HINT_MOUSE_DOUBLE_CLICK_TIME = (string)"SDL_MOUSE_DOUBLE_CLICK_TIME";

    public static string SDL_HINT_MOUSE_EMULATE_WARP_WITH_RELATIVE = (string)"SDL_MOUSE_EMULATE_WARP_WITH_RELATIVE";

    public static string SDL_HINT_MOUSE_FOCUS_CLICKTHROUGH = (string)"SDL_MOUSE_FOCUS_CLICKTHROUGH";

    public static string SDL_HINT_MOUSE_NORMAL_SPEED_SCALE = (string)"SDL_MOUSE_NORMAL_SPEED_SCALE";

    public static string SDL_HINT_MOUSE_RELATIVE_CLIP_INTERVAL = (string)"SDL_MOUSE_RELATIVE_CLIP_INTERVAL";

    public static string SDL_HINT_MOUSE_RELATIVE_CURSOR_VISIBLE = (string)"SDL_MOUSE_RELATIVE_CURSOR_VISIBLE";

    public static string SDL_HINT_MOUSE_RELATIVE_MODE_CENTER = (string)"SDL_MOUSE_RELATIVE_MODE_CENTER";

    public static string SDL_HINT_MOUSE_RELATIVE_MODE_WARP = (string)"SDL_MOUSE_RELATIVE_MODE_WARP";

    public static string SDL_HINT_MOUSE_RELATIVE_SPEED_SCALE = (string)"SDL_MOUSE_RELATIVE_SPEED_SCALE";

    public static string SDL_HINT_MOUSE_RELATIVE_SYSTEM_SCALE = (string)"SDL_MOUSE_RELATIVE_SYSTEM_SCALE";

    public static string SDL_HINT_MOUSE_RELATIVE_WARP_MOTION = (string)"SDL_MOUSE_RELATIVE_WARP_MOTION";

    public static string SDL_HINT_MOUSE_TOUCH_EVENTS = (string)"SDL_MOUSE_TOUCH_EVENTS";

    public static string SDL_HINT_MUTE_CONSOLE_KEYBOARD = (string)"SDL_MUTE_CONSOLE_KEYBOARD";

    public static string SDL_HINT_NO_SIGNAL_HANDLERS = (string)"SDL_NO_SIGNAL_HANDLERS";

    public static string SDL_HINT_OPENGL_ES_DRIVER = (string)"SDL_OPENGL_ES_DRIVER";

    public static string SDL_HINT_OPENGL_LIBRARY = (string)"SDL_OPENGL_LIBRARY";

    public static string SDL_HINT_ORIENTATIONS = (string)"SDL_ORIENTATIONS";

    public static string SDL_HINT_PEN_DELAY_MOUSE_BUTTON = (string)"SDL_PEN_DELAY_MOUSE_BUTTON";

    public static string SDL_HINT_PEN_NOT_MOUSE = (string)"SDL_PEN_NOT_MOUSE";

    public static string SDL_HINT_POLL_SENTINEL = (string)"SDL_POLL_SENTINEL";

    public static string SDL_HINT_PREFERRED_LOCALES = (string)"SDL_PREFERRED_LOCALES";

    public static string SDL_HINT_QUIT_ON_LAST_WINDOW_CLOSE = (string)"SDL_QUIT_ON_LAST_WINDOW_CLOSE";

    public static string SDL_HINT_RENDER_DIRECT3D11_DEBUG = (string)"SDL_RENDER_DIRECT3D11_DEBUG";

    public static string SDL_HINT_RENDER_DIRECT3D_THREADSAFE = (string)"SDL_RENDER_DIRECT3D_THREADSAFE";

    public static string SDL_HINT_RENDER_DRIVER = (string)"SDL_RENDER_DRIVER";

    public static string SDL_HINT_RENDER_LINE_METHOD = (string)"SDL_RENDER_LINE_METHOD";

    public static string SDL_HINT_RENDER_METAL_PREFER_LOW_POWER_DEVICE = (string)"SDL_RENDER_METAL_PREFER_LOW_POWER_DEVICE";

    public static string SDL_HINT_RENDER_VSYNC = (string)"SDL_RENDER_VSYNC";

    public static string SDL_HINT_RENDER_VULKAN_DEBUG = (string)"SDL_RENDER_VULKAN_DEBUG";

    public static string SDL_HINT_RETURN_KEY_HIDES_IME = (string)"SDL_RETURN_KEY_HIDES_IME";

    public static string SDL_HINT_ROG_GAMEPAD_MICE = (string)"SDL_ROG_GAMEPAD_MICE";

    public static string SDL_HINT_ROG_GAMEPAD_MICE_EXCLUDED = (string)"SDL_ROG_GAMEPAD_MICE_EXCLUDED";

    public static string SDL_HINT_RPI_VIDEO_LAYER = (string)"SDL_RPI_VIDEO_LAYER";

    public static string SDL_HINT_SCREENSAVER_INHIBIT_ACTIVITY_NAME = (string)"SDL_SCREENSAVER_INHIBIT_ACTIVITY_NAME";

    public static string SDL_HINT_SHUTDOWN_DBUS_ON_QUIT = (string)"SDL_SHUTDOWN_DBUS_ON_QUIT";

    public static string SDL_HINT_STORAGE_TITLE_DRIVER = (string)"SDL_STORAGE_TITLE_DRIVER";

    public static string SDL_HINT_STORAGE_USER_DRIVER = (string)"SDL_STORAGE_USER_DRIVER";

    public static string SDL_HINT_THREAD_FORCE_REALTIME_TIME_CRITICAL = (string)"SDL_THREAD_FORCE_REALTIME_TIME_CRITICAL";

    public static string SDL_HINT_THREAD_PRIORITY_POLICY = (string)"SDL_THREAD_PRIORITY_POLICY";

    public static string SDL_HINT_TIMER_RESOLUTION = (string)"SDL_TIMER_RESOLUTION";

    public static string SDL_HINT_TOUCH_MOUSE_EVENTS = (string)"SDL_TOUCH_MOUSE_EVENTS";

    public static string SDL_HINT_TRACKPAD_IS_TOUCH_ONLY = (string)"SDL_TRACKPAD_IS_TOUCH_ONLY";

    public static string SDL_HINT_TV_REMOTE_AS_JOYSTICK = (string)"SDL_TV_REMOTE_AS_JOYSTICK";

    public static string SDL_HINT_VIDEO_ALLOW_SCREENSAVER = (string)"SDL_VIDEO_ALLOW_SCREENSAVER";

    public static string SDL_HINT_VIDEO_DOUBLE_BUFFER = (string)"SDL_VIDEO_DOUBLE_BUFFER";

    public static string SDL_HINT_VIDEO_DRIVER = (string)"SDL_VIDEO_DRIVER";

    public static string SDL_HINT_VIDEO_DUMMY_SAVE_FRAMES = (string)"SDL_VIDEO_DUMMY_SAVE_FRAMES";

    public static string SDL_HINT_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK = (string)"SDL_VIDEO_EGL_ALLOW_GETDISPLAY_FALLBACK";

    public static string SDL_HINT_VIDEO_FORCE_EGL = (string)"SDL_VIDEO_FORCE_EGL";

    public static string SDL_HINT_VIDEO_MAC_FULLSCREEN_SPACES = (string)"SDL_VIDEO_MAC_FULLSCREEN_SPACES";

    public static string SDL_HINT_VIDEO_MINIMIZE_ON_FOCUS_LOSS = (string)"SDL_VIDEO_MINIMIZE_ON_FOCUS_LOSS";

    public static string SDL_HINT_VIDEO_OFFSCREEN_SAVE_FRAMES = (string)"SDL_VIDEO_OFFSCREEN_SAVE_FRAMES";

    public static string SDL_HINT_VIDEO_SYNC_WINDOW_OPERATIONS = (string)"SDL_VIDEO_SYNC_WINDOW_OPERATIONS";

    public static string SDL_HINT_VIDEO_WAYLAND_ALLOW_LIBDECOR = (string)"SDL_VIDEO_WAYLAND_ALLOW_LIBDECOR";

    public static string SDL_HINT_VIDEO_WAYLAND_MODE_EMULATION = (string)"SDL_VIDEO_WAYLAND_MODE_EMULATION";

    public static string SDL_HINT_VIDEO_WAYLAND_MODE_SCALING = (string)"SDL_VIDEO_WAYLAND_MODE_SCALING";

    public static string SDL_HINT_VIDEO_WAYLAND_PREFER_LIBDECOR = (string)"SDL_VIDEO_WAYLAND_PREFER_LIBDECOR";

    public static string SDL_HINT_VIDEO_WAYLAND_SCALE_TO_DISPLAY = (string)"SDL_VIDEO_WAYLAND_SCALE_TO_DISPLAY";

    public static string SDL_HINT_VIDEO_WIN_D3DCOMPILER = (string)"SDL_VIDEO_WIN_D3DCOMPILER";

    public static string SDL_HINT_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR = (string)"SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR";

    public static string SDL_HINT_VIDEO_X11_NET_WM_PING = (string)"SDL_VIDEO_X11_NET_WM_PING";

    public static string SDL_HINT_VIDEO_X11_NODIRECTCOLOR = (string)"SDL_VIDEO_X11_NODIRECTCOLOR";

    public static string SDL_HINT_VIDEO_X11_SCALING_FACTOR = (string)"SDL_VIDEO_X11_SCALING_FACTOR";

    public static string SDL_HINT_VIDEO_X11_VISUALID = (string)"SDL_VIDEO_X11_VISUALID";

    public static string SDL_HINT_VIDEO_X11_WINDOW_VISUALID = (string)"SDL_VIDEO_X11_WINDOW_VISUALID";

    public static string SDL_HINT_VIDEO_X11_XRANDR = (string)"SDL_VIDEO_X11_XRANDR";

    public static string SDL_HINT_VITA_ENABLE_BACK_TOUCH = (string)"SDL_VITA_ENABLE_BACK_TOUCH";

    public static string SDL_HINT_VITA_ENABLE_FRONT_TOUCH = (string)"SDL_VITA_ENABLE_FRONT_TOUCH";

    public static string SDL_HINT_VITA_MODULE_PATH = (string)"SDL_VITA_MODULE_PATH";

    public static string SDL_HINT_VITA_PVR_INIT = (string)"SDL_VITA_PVR_INIT";

    public static string SDL_HINT_VITA_PVR_OPENGL = (string)"SDL_VITA_PVR_OPENGL";

    public static string SDL_HINT_VITA_RESOLUTION = (string)"SDL_VITA_RESOLUTION";

    public static string SDL_HINT_VITA_TOUCH_MOUSE_DEVICE = (string)"SDL_VITA_TOUCH_MOUSE_DEVICE";

    public static string SDL_HINT_VULKAN_DISPLAY = (string)"SDL_VULKAN_DISPLAY";

    public static string SDL_HINT_VULKAN_LIBRARY = (string)"SDL_VULKAN_LIBRARY";

    public static string SDL_HINT_WAVE_CHUNK_LIMIT = (string)"SDL_WAVE_CHUNK_LIMIT";

    public static string SDL_HINT_WAVE_FACT_CHUNK = (string)"SDL_WAVE_FACT_CHUNK";

    public static string SDL_HINT_WAVE_RIFF_CHUNK_SIZE = (string)"SDL_WAVE_RIFF_CHUNK_SIZE";

    public static string SDL_HINT_WAVE_TRUNCATION = (string)"SDL_WAVE_TRUNCATION";

    public static string SDL_HINT_WINDOWS_CLOSE_ON_ALT_F4 = (string)"SDL_WINDOWS_CLOSE_ON_ALT_F4";

    public static string SDL_HINT_WINDOWS_ENABLE_MENU_MNEMONICS = (string)"SDL_WINDOWS_ENABLE_MENU_MNEMONICS";

    public static string SDL_HINT_WINDOWS_ENABLE_MESSAGELOOP = (string)"SDL_WINDOWS_ENABLE_MESSAGELOOP";

    public static string SDL_HINT_WINDOWS_ERASE_BACKGROUND_MODE = (string)"SDL_WINDOWS_ERASE_BACKGROUND_MODE";

    public static string SDL_HINT_WINDOWS_FORCE_SEMAPHORE_KERNEL = (string)"SDL_WINDOWS_FORCE_SEMAPHORE_KERNEL";

    public static string SDL_HINT_WINDOWS_GAMEINPUT = (string)"SDL_WINDOWS_GAMEINPUT";

    public static string SDL_HINT_WINDOWS_INTRESOURCE_ICON = (string)"SDL_WINDOWS_INTRESOURCE_ICON";

    public static string SDL_HINT_WINDOWS_INTRESOURCE_ICON_SMALL = (string)"SDL_WINDOWS_INTRESOURCE_ICON_SMALL";

    public static string SDL_HINT_WINDOWS_RAW_KEYBOARD = (string)"SDL_WINDOWS_RAW_KEYBOARD";

    public static string SDL_HINT_WINDOWS_USE_D3D9EX = (string)"SDL_WINDOWS_USE_D3D9EX";

    public static string SDL_HINT_WINDOW_ACTIVATE_WHEN_RAISED = (string)"SDL_WINDOW_ACTIVATE_WHEN_RAISED";

    public static string SDL_HINT_WINDOW_ACTIVATE_WHEN_SHOWN = (string)"SDL_WINDOW_ACTIVATE_WHEN_SHOWN";

    public static string SDL_HINT_WINDOW_ALLOW_TOPMOST = (string)"SDL_WINDOW_ALLOW_TOPMOST";

    public static string SDL_HINT_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN = (string)"SDL_WINDOW_FRAME_USABLE_WHILE_CURSOR_HIDDEN";

    public static string SDL_HINT_WINRT_HANDLE_BACK_BUTTON = (string)"SDL_WINRT_HANDLE_BACK_BUTTON";

    public static string SDL_HINT_WINRT_PRIVACY_POLICY_LABEL = (string)"SDL_WINRT_PRIVACY_POLICY_LABEL";

    public static string SDL_HINT_WINRT_PRIVACY_POLICY_URL = (string)"SDL_WINRT_PRIVACY_POLICY_URL";

    public static string SDL_HINT_X11_FORCE_OVERRIDE_REDIRECT = (string)"SDL_X11_FORCE_OVERRIDE_REDIRECT";

    public static string SDL_HINT_X11_WINDOW_TYPE = (string)"SDL_X11_WINDOW_TYPE";

    public static string SDL_HINT_X11_XCB_LIBRARY = (string)"SDL_X11_XCB_LIBRARY";

    public static string SDL_HINT_XINPUT_ENABLED = (string)"SDL_XINPUT_ENABLED";

    public static ulong SDL_ICONV_E2BIG = (ulong)18446744073709551614;

    public static ulong SDL_ICONV_EILSEQ = (ulong)18446744073709551613;

    public static ulong SDL_ICONV_EINVAL = (ulong)18446744073709551612;

    public static ulong SDL_ICONV_ERROR = (ulong)18446744073709551615;

    public const uint SDL_INIT_AUDIO = 16;

    public const uint SDL_INIT_CAMERA = 65536;

    public const uint SDL_INIT_EVENTS = 16384;

    public const uint SDL_INIT_GAMEPAD = 8192;

    public const uint SDL_INIT_HAPTIC = 4096;

    public const uint SDL_INIT_JOYSTICK = 512;

    public const uint SDL_INIT_SENSOR = 32768;

    public const uint SDL_INIT_TIMER = 1;

    public const uint SDL_INIT_VIDEO = 32;

    public const int SDL_INVALID_UNICODE_CODEPOINT = 65533;

    public const double SDL_IPHONE_MAX_GFORCE = 5;

    public const int SDL_JOYSTICK_AXIS_MAX = 32767;

    public const int SDL_JOYSTICK_AXIS_MIN = -32768;

    public const uint SDL_KMOD_ALT = 768;

    public const uint SDL_KMOD_CAPS = 8192;

    public const uint SDL_KMOD_CTRL = 192;

    public const uint SDL_KMOD_GUI = 3072;

    public const uint SDL_KMOD_LALT = 256;

    public const uint SDL_KMOD_LCTRL = 64;

    public const uint SDL_KMOD_LGUI = 1024;

    public const uint SDL_KMOD_LSHIFT = 1;

    public const uint SDL_KMOD_MODE = 16384;

    public const uint SDL_KMOD_NONE = 0;

    public const uint SDL_KMOD_NUM = 4096;

    public const uint SDL_KMOD_RALT = 512;

    public const uint SDL_KMOD_RCTRL = 128;

    public const uint SDL_KMOD_RGUI = 2048;

    public const uint SDL_KMOD_RSHIFT = 2;

    public const uint SDL_KMOD_SCROLL = 32768;

    public const uint SDL_KMOD_SHIFT = 3;

    public const int SDL_LIL_ENDIAN = 1234;

    public const int SDL_MAJOR_VERSION = 3;

    public static Sint16 SDL_MAX_SINT16 = (Sint16)32767;

    public static Sint32 SDL_MAX_SINT32 = (Sint32)2147483647;

    public const long SDL_MAX_SINT64 = -1;

    public static Sint8 SDL_MAX_SINT8 = (Sint8)127;

    public const long SDL_MAX_TIME = -1;

    public static Uint16 SDL_MAX_UINT16 = (Uint16)65535;

    public static Uint32 SDL_MAX_UINT32 = (Uint32)4294967295;

    public const ulong SDL_MAX_UINT64 = 18446744073709551615;

    public static Uint8 SDL_MAX_UINT8 = (Uint8)255;

    public const uint SDL_MESSAGEBOX_BUTTONS_LEFT_TO_RIGHT = 128;

    public const uint SDL_MESSAGEBOX_BUTTONS_RIGHT_TO_LEFT = 256;

    public const uint SDL_MESSAGEBOX_BUTTON_ESCAPEKEY_DEFAULT = 2;

    public const uint SDL_MESSAGEBOX_BUTTON_RETURNKEY_DEFAULT = 1;

    public const uint SDL_MESSAGEBOX_ERROR = 16;

    public const uint SDL_MESSAGEBOX_INFORMATION = 64;

    public const uint SDL_MESSAGEBOX_WARNING = 32;

    public const int SDL_MICRO_VERSION = 2;

    public const int SDL_MINOR_VERSION = 1;

    public static Sint16 SDL_MIN_SINT16 = (Sint16) - 32768;

    public static Sint32 SDL_MIN_SINT32 = (Sint32) - 2147483648;

    public const long SDL_MIN_SINT64 = 0;

    public static Sint8 SDL_MIN_SINT8 = (Sint8) - 128;

    public const long SDL_MIN_TIME = 0;

    public static Uint16 SDL_MIN_UINT16 = (Uint16)0;

    public static Uint32 SDL_MIN_UINT32 = (Uint32)0;

    public const ulong SDL_MIN_UINT64 = 0;

    public static Uint8 SDL_MIN_UINT8 = (Uint8)0;

    public static SDL_TouchID SDL_MOUSE_TOUCHID = (SDL_TouchID)18446744073709551615;

    public const int SDL_MS_PER_SECOND = 1000;

    public const int SDL_MUTEX_TIMEDOUT = 1;

    public const int SDL_NS_PER_MS = 1000000;

    public const long SDL_NS_PER_SECOND = 1000000000;

    public const int SDL_NS_PER_US = 1000;

    public const int SDL_NULL_WHILE_LOOP_CONDITION = 0;

    public const ulong SDL_PEN_AXIS_BIDIRECTIONAL_MASKS = 393216;

    public const ulong SDL_PEN_AXIS_DISTANCE_MASK = 524288;

    public const ulong SDL_PEN_AXIS_PRESSURE_MASK = 65536;

    public const ulong SDL_PEN_AXIS_ROTATION_MASK = 1048576;

    public const ulong SDL_PEN_AXIS_SLIDER_MASK = 2097152;

    public const ulong SDL_PEN_AXIS_XTILT_MASK = 131072;

    public const ulong SDL_PEN_AXIS_YTILT_MASK = 262144;

    public const ulong SDL_PEN_DOWN_MASK = 8192;

    public const ulong SDL_PEN_ERASER_MASK = 32768;

    public const int SDL_PEN_FLAG_AXIS_BIT_OFFSET = 16;

    public const int SDL_PEN_FLAG_DOWN_BIT_INDEX = 13;

    public const int SDL_PEN_FLAG_ERASER_BIT_INDEX = 15;

    public const int SDL_PEN_FLAG_INK_BIT_INDEX = 14;

    public const int SDL_PEN_INFO_UNKNOWN = -1;

    public const ulong SDL_PEN_INK_MASK = 16384;

    public static SDL_PenID SDL_PEN_INVALID = (SDL_PenID)0;

    public static SDL_MouseID SDL_PEN_MOUSEID = (SDL_MouseID)4294967294;

    public const int SDL_PEN_TIP_ERASER = 15;

    public const int SDL_PEN_TIP_INK = 14;

    public static SDL_PixelFormat SDL_PIXELFORMAT_ABGR32 = (SDL_PixelFormat)373694468;

    public static SDL_PixelFormat SDL_PIXELFORMAT_ARGB32 = (SDL_PixelFormat)377888772;

    public static SDL_PixelFormat SDL_PIXELFORMAT_BGRA32 = (SDL_PixelFormat)372645892;

    public static SDL_PixelFormat SDL_PIXELFORMAT_BGRX32 = (SDL_PixelFormat)370546692;

    public static SDL_PixelFormat SDL_PIXELFORMAT_RGBA32 = (SDL_PixelFormat)376840196;

    public static SDL_PixelFormat SDL_PIXELFORMAT_RGBX32 = (SDL_PixelFormat)374740996;

    public static SDL_PixelFormat SDL_PIXELFORMAT_XBGR32 = (SDL_PixelFormat)371595268;

    public static SDL_PixelFormat SDL_PIXELFORMAT_XRGB32 = (SDL_PixelFormat)375789572;

    public const double SDL_PI_D = 3.141592653589793;

    public const float SDL_PI_F = 3.1415927410125732f;

    public const int SDL_PLATFORM_APPLE = 1;

    public const int SDL_PLATFORM_MACOS = 1;

    public const int SDL_PRESSED = 1;

    public static string SDL_PRIs64 = (string)"lld";

    public static string SDL_PROP_APP_METADATA_COPYRIGHT_STRING = (string)"SDL.app.metadata.copyright";

    public static string SDL_PROP_APP_METADATA_CREATOR_STRING = (string)"SDL.app.metadata.creator";

    public static string SDL_PROP_APP_METADATA_IDENTIFIER_STRING = (string)"SDL.app.metadata.identifier";

    public static string SDL_PROP_APP_METADATA_NAME_STRING = (string)"SDL.app.metadata.name";

    public static string SDL_PROP_APP_METADATA_TYPE_STRING = (string)"SDL.app.metadata.type";

    public static string SDL_PROP_APP_METADATA_URL_STRING = (string)"SDL.app.metadata.url";

    public static string SDL_PROP_APP_METADATA_VERSION_STRING = (string)"SDL.app.metadata.version";

    public static string SDL_PROP_DISPLAY_HDR_ENABLED_BOOLEAN = (string)"SDL.display.HDR_enabled";

    public static string SDL_PROP_DISPLAY_KMSDRM_PANEL_ORIENTATION_NUMBER = (string)"SDL.display.KMSDRM.panel_orientation";

    public static string SDL_PROP_GAMEPAD_CAP_MONO_LED_BOOLEAN = (string)"SDL.joystick.cap.mono_led";

    public static string SDL_PROP_GAMEPAD_CAP_PLAYER_LED_BOOLEAN = (string)"SDL.joystick.cap.player_led";

    public static string SDL_PROP_GAMEPAD_CAP_RGB_LED_BOOLEAN = (string)"SDL.joystick.cap.rgb_led";

    public static string SDL_PROP_GAMEPAD_CAP_RUMBLE_BOOLEAN = (string)"SDL.joystick.cap.rumble";

    public static string SDL_PROP_GAMEPAD_CAP_TRIGGER_RUMBLE_BOOLEAN = (string)"SDL.joystick.cap.trigger_rumble";

    public static string SDL_PROP_GLOBAL_VIDEO_WAYLAND_WL_DISPLAY_POINTER = (string)"SDL.video.wayland.wl_display";

    public static string SDL_PROP_IOSTREAM_ANDROID_AASSET_POINTER = (string)"SDL.iostream.android.aasset";

    public static string SDL_PROP_IOSTREAM_DYNAMIC_CHUNKSIZE_NUMBER = (string)"SDL.iostream.dynamic.chunksize";

    public static string SDL_PROP_IOSTREAM_DYNAMIC_MEMORY_POINTER = (string)"SDL.iostream.dynamic.memory";

    public static string SDL_PROP_IOSTREAM_STDIO_FILE_POINTER = (string)"SDL.iostream.stdio.file";

    public static string SDL_PROP_IOSTREAM_WINDOWS_HANDLE_POINTER = (string)"SDL.iostream.windows.handle";

    public static string SDL_PROP_JOYSTICK_CAP_MONO_LED_BOOLEAN = (string)"SDL.joystick.cap.mono_led";

    public static string SDL_PROP_JOYSTICK_CAP_PLAYER_LED_BOOLEAN = (string)"SDL.joystick.cap.player_led";

    public static string SDL_PROP_JOYSTICK_CAP_RGB_LED_BOOLEAN = (string)"SDL.joystick.cap.rgb_led";

    public static string SDL_PROP_JOYSTICK_CAP_RUMBLE_BOOLEAN = (string)"SDL.joystick.cap.rumble";

    public static string SDL_PROP_JOYSTICK_CAP_TRIGGER_RUMBLE_BOOLEAN = (string)"SDL.joystick.cap.trigger_rumble";

    public static string SDL_PROP_RENDERER_CREATE_NAME_STRING = (string)"name";

    public static string SDL_PROP_RENDERER_CREATE_OUTPUT_COLORSPACE_NUMBER = (string)"output_colorspace";

    public static string SDL_PROP_RENDERER_CREATE_PRESENT_VSYNC_NUMBER = (string)"present_vsync";

    public static string SDL_PROP_RENDERER_CREATE_SURFACE_POINTER = (string)"surface";

    public static string SDL_PROP_RENDERER_CREATE_VULKAN_DEVICE_POINTER = (string)"vulkan.device";

    public static string SDL_PROP_RENDERER_CREATE_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = (string)"vulkan.graphics_queue_family_index";

    public static string SDL_PROP_RENDERER_CREATE_VULKAN_INSTANCE_POINTER = (string)"vulkan.instance";

    public static string SDL_PROP_RENDERER_CREATE_VULKAN_PHYSICAL_DEVICE_POINTER = (string)"vulkan.physical_device";

    public static string SDL_PROP_RENDERER_CREATE_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = (string)"vulkan.present_queue_family_index";

    public static string SDL_PROP_RENDERER_CREATE_VULKAN_SURFACE_NUMBER = (string)"vulkan.surface";

    public static string SDL_PROP_RENDERER_CREATE_WINDOW_POINTER = (string)"window";

    public static string SDL_PROP_RENDERER_D3D11_DEVICE_POINTER = (string)"SDL.renderer.d3d11.device";

    public static string SDL_PROP_RENDERER_D3D11_SWAPCHAIN_POINTER = (string)"SDL.renderer.d3d11.swap_chain";

    public static string SDL_PROP_RENDERER_D3D12_COMMAND_QUEUE_POINTER = (string)"SDL.renderer.d3d12.command_queue";

    public static string SDL_PROP_RENDERER_D3D12_DEVICE_POINTER = (string)"SDL.renderer.d3d12.device";

    public static string SDL_PROP_RENDERER_D3D12_SWAPCHAIN_POINTER = (string)"SDL.renderer.d3d12.swap_chain";

    public static string SDL_PROP_RENDERER_D3D9_DEVICE_POINTER = (string)"SDL.renderer.d3d9.device";

    public static string SDL_PROP_RENDERER_HDR_ENABLED_BOOLEAN = (string)"SDL.renderer.HDR_enabled";

    public static string SDL_PROP_RENDERER_HDR_HEADROOM_FLOAT = (string)"SDL.renderer.HDR_headroom";

    public static string SDL_PROP_RENDERER_MAX_TEXTURE_SIZE_NUMBER = (string)"SDL.renderer.max_texture_size";

    public static string SDL_PROP_RENDERER_NAME_STRING = (string)"SDL.renderer.name";

    public static string SDL_PROP_RENDERER_OUTPUT_COLORSPACE_NUMBER = (string)"SDL.renderer.output_colorspace";

    public static string SDL_PROP_RENDERER_SDR_WHITE_POINT_FLOAT = (string)"SDL.renderer.SDR_white_point";

    public static string SDL_PROP_RENDERER_SURFACE_POINTER = (string)"SDL.renderer.surface";

    public static string SDL_PROP_RENDERER_TEXTURE_FORMATS_POINTER = (string)"SDL.renderer.texture_formats";

    public static string SDL_PROP_RENDERER_VSYNC_NUMBER = (string)"SDL.renderer.vsync";

    public static string SDL_PROP_RENDERER_VULKAN_DEVICE_POINTER = (string)"SDL.renderer.vulkan.device";

    public static string SDL_PROP_RENDERER_VULKAN_GRAPHICS_QUEUE_FAMILY_INDEX_NUMBER = (string)"SDL.renderer.vulkan.graphics_queue_family_index";

    public static string SDL_PROP_RENDERER_VULKAN_INSTANCE_POINTER = (string)"SDL.renderer.vulkan.instance";

    public static string SDL_PROP_RENDERER_VULKAN_PHYSICAL_DEVICE_POINTER = (string)"SDL.renderer.vulkan.physical_device";

    public static string SDL_PROP_RENDERER_VULKAN_PRESENT_QUEUE_FAMILY_INDEX_NUMBER = (string)"SDL.renderer.vulkan.present_queue_family_index";

    public static string SDL_PROP_RENDERER_VULKAN_SURFACE_NUMBER = (string)"SDL.renderer.vulkan.surface";

    public static string SDL_PROP_RENDERER_VULKAN_SWAPCHAIN_IMAGE_COUNT_NUMBER = (string)"SDL.renderer.vulkan.swapchain_image_count";

    public static string SDL_PROP_RENDERER_WINDOW_POINTER = (string)"SDL.renderer.window";

    public static string SDL_PROP_SURFACE_HDR_HEADROOM_FLOAT = (string)"SDL.surface.HDR_headroom";

    public static string SDL_PROP_SURFACE_SDR_WHITE_POINT_FLOAT = (string)"SDL.surface.SDR_white_point";

    public static string SDL_PROP_SURFACE_TONEMAP_OPERATOR_STRING = (string)"SDL.surface.tonemap";

    public static string SDL_PROP_TEXTINPUT_ANDROID_INPUTTYPE_NUMBER = (string)"SDL.textinput.android.inputtype";

    public static string SDL_PROP_TEXTINPUT_AUTOCORRECT_BOOLEAN = (string)"SDL.textinput.autocorrect";

    public static string SDL_PROP_TEXTINPUT_CAPITALIZATION_NUMBER = (string)"SDL.textinput.capitalization";

    public static string SDL_PROP_TEXTINPUT_MULTILINE_BOOLEAN = (string)"SDL.textinput.multiline";

    public static string SDL_PROP_TEXTINPUT_TYPE_NUMBER = (string)"SDL.textinput.type";

    public static string SDL_PROP_TEXTURE_ACCESS_NUMBER = (string)"SDL.texture.access";

    public static string SDL_PROP_TEXTURE_COLORSPACE_NUMBER = (string)"SDL.texture.colorspace";

    public static string SDL_PROP_TEXTURE_CREATE_ACCESS_NUMBER = (string)"access";

    public static string SDL_PROP_TEXTURE_CREATE_COLORSPACE_NUMBER = (string)"colorspace";

    public static string SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_POINTER = (string)"d3d11.texture";

    public static string SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_U_POINTER = (string)"d3d11.texture_u";

    public static string SDL_PROP_TEXTURE_CREATE_D3D11_TEXTURE_V_POINTER = (string)"d3d11.texture_v";

    public static string SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_POINTER = (string)"d3d12.texture";

    public static string SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_U_POINTER = (string)"d3d12.texture_u";

    public static string SDL_PROP_TEXTURE_CREATE_D3D12_TEXTURE_V_POINTER = (string)"d3d12.texture_v";

    public static string SDL_PROP_TEXTURE_CREATE_FORMAT_NUMBER = (string)"format";

    public static string SDL_PROP_TEXTURE_CREATE_HDR_HEADROOM_FLOAT = (string)"HDR_headroom";

    public static string SDL_PROP_TEXTURE_CREATE_HEIGHT_NUMBER = (string)"height";

    public static string SDL_PROP_TEXTURE_CREATE_METAL_PIXELBUFFER_POINTER = (string)"metal.pixelbuffer";

    public static string SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_NUMBER = (string)"opengles2.texture";

    public static string SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_UV_NUMBER = (string)"opengles2.texture_uv";

    public static string SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_U_NUMBER = (string)"opengles2.texture_u";

    public static string SDL_PROP_TEXTURE_CREATE_OPENGLES2_TEXTURE_V_NUMBER = (string)"opengles2.texture_v";

    public static string SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_NUMBER = (string)"opengl.texture";

    public static string SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_UV_NUMBER = (string)"opengl.texture_uv";

    public static string SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_U_NUMBER = (string)"opengl.texture_u";

    public static string SDL_PROP_TEXTURE_CREATE_OPENGL_TEXTURE_V_NUMBER = (string)"opengl.texture_v";

    public static string SDL_PROP_TEXTURE_CREATE_SDR_WHITE_POINT_FLOAT = (string)"SDR_white_point";

    public static string SDL_PROP_TEXTURE_CREATE_VULKAN_TEXTURE_NUMBER = (string)"vulkan.texture";

    public static string SDL_PROP_TEXTURE_CREATE_WIDTH_NUMBER = (string)"width";

    public static string SDL_PROP_TEXTURE_D3D11_TEXTURE_POINTER = (string)"SDL.texture.d3d11.texture";

    public static string SDL_PROP_TEXTURE_D3D11_TEXTURE_U_POINTER = (string)"SDL.texture.d3d11.texture_u";

    public static string SDL_PROP_TEXTURE_D3D11_TEXTURE_V_POINTER = (string)"SDL.texture.d3d11.texture_v";

    public static string SDL_PROP_TEXTURE_D3D12_TEXTURE_POINTER = (string)"SDL.texture.d3d12.texture";

    public static string SDL_PROP_TEXTURE_D3D12_TEXTURE_U_POINTER = (string)"SDL.texture.d3d12.texture_u";

    public static string SDL_PROP_TEXTURE_D3D12_TEXTURE_V_POINTER = (string)"SDL.texture.d3d12.texture_v";

    public static string SDL_PROP_TEXTURE_FORMAT_NUMBER = (string)"SDL.texture.format";

    public static string SDL_PROP_TEXTURE_HDR_HEADROOM_FLOAT = (string)"SDL.texture.HDR_headroom";

    public static string SDL_PROP_TEXTURE_HEIGHT_NUMBER = (string)"SDL.texture.height";

    public static string SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_NUMBER = (string)"SDL.texture.opengles2.texture";

    public static string SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_TARGET_NUMBER = (string)"SDL.texture.opengles2.target";

    public static string SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_UV_NUMBER = (string)"SDL.texture.opengles2.texture_uv";

    public static string SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_U_NUMBER = (string)"SDL.texture.opengles2.texture_u";

    public static string SDL_PROP_TEXTURE_OPENGLES2_TEXTURE_V_NUMBER = (string)"SDL.texture.opengles2.texture_v";

    public static string SDL_PROP_TEXTURE_OPENGL_TEXTURE_NUMBER = (string)"SDL.texture.opengl.texture";

    public static string SDL_PROP_TEXTURE_OPENGL_TEXTURE_TARGET_NUMBER = (string)"SDL.texture.opengl.target";

    public static string SDL_PROP_TEXTURE_OPENGL_TEXTURE_UV_NUMBER = (string)"SDL.texture.opengl.texture_uv";

    public static string SDL_PROP_TEXTURE_OPENGL_TEXTURE_U_NUMBER = (string)"SDL.texture.opengl.texture_u";

    public static string SDL_PROP_TEXTURE_OPENGL_TEXTURE_V_NUMBER = (string)"SDL.texture.opengl.texture_v";

    public static string SDL_PROP_TEXTURE_OPENGL_TEX_H_FLOAT = (string)"SDL.texture.opengl.tex_h";

    public static string SDL_PROP_TEXTURE_OPENGL_TEX_W_FLOAT = (string)"SDL.texture.opengl.tex_w";

    public static string SDL_PROP_TEXTURE_SDR_WHITE_POINT_FLOAT = (string)"SDL.texture.SDR_white_point";

    public static string SDL_PROP_TEXTURE_VULKAN_TEXTURE_NUMBER = (string)"SDL.texture.vulkan.texture";

    public static string SDL_PROP_TEXTURE_WIDTH_NUMBER = (string)"SDL.texture.width";

    public static string SDL_PROP_THREAD_CREATE_ENTRY_FUNCTION_POINTER = (string)"entry_function";

    public static string SDL_PROP_THREAD_CREATE_NAME_STRING = (string)"name";

    public static string SDL_PROP_THREAD_CREATE_STACKSIZE_NUMBER = (string)"stacksize";

    public static string SDL_PROP_THREAD_CREATE_USERDATA_POINTER = (string)"userdata";

    public static string SDL_PROP_WINDOW_ANDROID_SURFACE_POINTER = (string)"SDL.window.android.surface";

    public static string SDL_PROP_WINDOW_ANDROID_WINDOW_POINTER = (string)"SDL.window.android.window";

    public static string SDL_PROP_WINDOW_COCOA_METAL_VIEW_TAG_NUMBER = (string)"SDL.window.cocoa.metal_view_tag";

    public static string SDL_PROP_WINDOW_COCOA_WINDOW_POINTER = (string)"SDL.window.cocoa.window";

    public static string SDL_PROP_WINDOW_CREATE_ALWAYS_ON_TOP_BOOLEAN = (string)"always_on_top";

    public static string SDL_PROP_WINDOW_CREATE_BORDERLESS_BOOLEAN = (string)"borderless";

    public static string SDL_PROP_WINDOW_CREATE_COCOA_VIEW_POINTER = (string)"cocoa.view";

    public static string SDL_PROP_WINDOW_CREATE_COCOA_WINDOW_POINTER = (string)"cocoa.window";

    public static string SDL_PROP_WINDOW_CREATE_EXTERNAL_GRAPHICS_CONTEXT_BOOLEAN = (string)"external_graphics_context";

    public static string SDL_PROP_WINDOW_CREATE_FOCUSABLE_BOOLEAN = (string)"focusable";

    public static string SDL_PROP_WINDOW_CREATE_FULLSCREEN_BOOLEAN = (string)"fullscreen";

    public static string SDL_PROP_WINDOW_CREATE_HEIGHT_NUMBER = (string)"height";

    public static string SDL_PROP_WINDOW_CREATE_HIDDEN_BOOLEAN = (string)"hidden";

    public static string SDL_PROP_WINDOW_CREATE_HIGH_PIXEL_DENSITY_BOOLEAN = (string)"high_pixel_density";

    public static string SDL_PROP_WINDOW_CREATE_MAXIMIZED_BOOLEAN = (string)"maximized";

    public static string SDL_PROP_WINDOW_CREATE_MENU_BOOLEAN = (string)"menu";

    public static string SDL_PROP_WINDOW_CREATE_METAL_BOOLEAN = (string)"metal";

    public static string SDL_PROP_WINDOW_CREATE_MINIMIZED_BOOLEAN = (string)"minimized";

    public static string SDL_PROP_WINDOW_CREATE_MODAL_BOOLEAN = (string)"modal";

    public static string SDL_PROP_WINDOW_CREATE_MOUSE_GRABBED_BOOLEAN = (string)"mouse_grabbed";

    public static string SDL_PROP_WINDOW_CREATE_OPENGL_BOOLEAN = (string)"opengl";

    public static string SDL_PROP_WINDOW_CREATE_PARENT_POINTER = (string)"parent";

    public static string SDL_PROP_WINDOW_CREATE_RESIZABLE_BOOLEAN = (string)"resizable";

    public static string SDL_PROP_WINDOW_CREATE_TITLE_STRING = (string)"title";

    public static string SDL_PROP_WINDOW_CREATE_TOOLTIP_BOOLEAN = (string)"tooltip";

    public static string SDL_PROP_WINDOW_CREATE_TRANSPARENT_BOOLEAN = (string)"transparent";

    public static string SDL_PROP_WINDOW_CREATE_UTILITY_BOOLEAN = (string)"utility";

    public static string SDL_PROP_WINDOW_CREATE_VULKAN_BOOLEAN = (string)"vulkan";

    public static string SDL_PROP_WINDOW_CREATE_WAYLAND_CREATE_EGL_WINDOW_BOOLEAN = (string)"wayland.create_egl_window";

    public static string SDL_PROP_WINDOW_CREATE_WAYLAND_SURFACE_ROLE_CUSTOM_BOOLEAN = (string)"wayland.surface_role_custom";

    public static string SDL_PROP_WINDOW_CREATE_WAYLAND_WL_SURFACE_POINTER = (string)"wayland.wl_surface";

    public static string SDL_PROP_WINDOW_CREATE_WIDTH_NUMBER = (string)"width";

    public static string SDL_PROP_WINDOW_CREATE_WIN32_HWND_POINTER = (string)"win32.hwnd";

    public static string SDL_PROP_WINDOW_CREATE_WIN32_PIXEL_FORMAT_HWND_POINTER = (string)"win32.pixel_format_hwnd";

    public static string SDL_PROP_WINDOW_CREATE_X11_WINDOW_NUMBER = (string)"x11.window";

    public static string SDL_PROP_WINDOW_CREATE_X_NUMBER = (string)"x";

    public static string SDL_PROP_WINDOW_CREATE_Y_NUMBER = (string)"y";

    public static string SDL_PROP_WINDOW_HDR_ENABLED_BOOLEAN = (string)"SDL.window.HDR_enabled";

    public static string SDL_PROP_WINDOW_HDR_HEADROOM_FLOAT = (string)"SDL.window.HDR_headroom";

    public static string SDL_PROP_WINDOW_KMSDRM_DEVICE_INDEX_NUMBER = (string)"SDL.window.kmsdrm.dev_index";

    public static string SDL_PROP_WINDOW_KMSDRM_DRM_FD_NUMBER = (string)"SDL.window.kmsdrm.drm_fd";

    public static string SDL_PROP_WINDOW_KMSDRM_GBM_DEVICE_POINTER = (string)"SDL.window.kmsdrm.gbm_dev";

    public static string SDL_PROP_WINDOW_SDR_WHITE_LEVEL_FLOAT = (string)"SDL.window.SDR_white_level";

    public static string SDL_PROP_WINDOW_SHAPE_POINTER = (string)"SDL.window.shape";

    public static string SDL_PROP_WINDOW_UIKIT_METAL_VIEW_TAG_NUMBER = (string)"SDL.window.uikit.metal_view_tag";

    public static string SDL_PROP_WINDOW_UIKIT_OPENGL_FRAMEBUFFER_NUMBER = (string)"SDL.window.uikit.opengl.framebuffer";

    public static string SDL_PROP_WINDOW_UIKIT_OPENGL_RENDERBUFFER_NUMBER = (string)"SDL.window.uikit.opengl.renderbuffer";

    public static string SDL_PROP_WINDOW_UIKIT_OPENGL_RESOLVE_FRAMEBUFFER_NUMBER = (string)"SDL.window.uikit.opengl.resolve_framebuffer";

    public static string SDL_PROP_WINDOW_UIKIT_WINDOW_POINTER = (string)"SDL.window.uikit.window";

    public static string SDL_PROP_WINDOW_VIVANTE_DISPLAY_POINTER = (string)"SDL.window.vivante.display";

    public static string SDL_PROP_WINDOW_VIVANTE_SURFACE_POINTER = (string)"SDL.window.vivante.surface";

    public static string SDL_PROP_WINDOW_VIVANTE_WINDOW_POINTER = (string)"SDL.window.vivante.window";

    public static string SDL_PROP_WINDOW_WAYLAND_DISPLAY_POINTER = (string)"SDL.window.wayland.display";

    public static string SDL_PROP_WINDOW_WAYLAND_EGL_WINDOW_POINTER = (string)"SDL.window.wayland.egl_window";

    public static string SDL_PROP_WINDOW_WAYLAND_SURFACE_POINTER = (string)"SDL.window.wayland.surface";

    public static string SDL_PROP_WINDOW_WAYLAND_XDG_POPUP_POINTER = (string)"SDL.window.wayland.xdg_popup";

    public static string SDL_PROP_WINDOW_WAYLAND_XDG_POSITIONER_POINTER = (string)"SDL.window.wayland.xdg_positioner";

    public static string SDL_PROP_WINDOW_WAYLAND_XDG_SURFACE_POINTER = (string)"SDL.window.wayland.xdg_surface";

    public static string SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_EXPORT_HANDLE_STRING = (string)"SDL.window.wayland.xdg_toplevel_export_handle";

    public static string SDL_PROP_WINDOW_WAYLAND_XDG_TOPLEVEL_POINTER = (string)"SDL.window.wayland.xdg_toplevel";

    public static string SDL_PROP_WINDOW_WIN32_HDC_POINTER = (string)"SDL.window.win32.hdc";

    public static string SDL_PROP_WINDOW_WIN32_HWND_POINTER = (string)"SDL.window.win32.hwnd";

    public static string SDL_PROP_WINDOW_WIN32_INSTANCE_POINTER = (string)"SDL.window.win32.instance";

    public static string SDL_PROP_WINDOW_WINRT_WINDOW_POINTER = (string)"SDL.window.winrt.window";

    public static string SDL_PROP_WINDOW_X11_DISPLAY_POINTER = (string)"SDL.window.x11.display";

    public static string SDL_PROP_WINDOW_X11_SCREEN_NUMBER = (string)"SDL.window.x11.screen";

    public static string SDL_PROP_WINDOW_X11_WINDOW_NUMBER = (string)"SDL.window.x11.window";

    public const int SDL_RELEASED = 0;

    public const int SDL_RENDERER_VSYNC_ADAPTIVE = -1;

    public const int SDL_RENDERER_VSYNC_DISABLED = 0;

    public const int SDL_RWLOCK_TIMEDOUT = 1;

    public const ulong SDL_SIZE_MAX = 18446744073709551615;

    public static string SDL_SOFTWARE_RENDERER = (string)"software";

    public const float SDL_STANDARD_GRAVITY = 9.806650161743164f;

    public const uint SDL_SURFACE_LOCKED = 4;

    public const uint SDL_SURFACE_LOCK_NEEDED = 2;

    public const uint SDL_SURFACE_PREALLOCATED = 1;

    public const uint SDL_SURFACE_SIMD_ALIGNED = 8;

    public static SDL_MouseID SDL_TOUCH_MOUSEID = (SDL_MouseID)4294967295;

    public const int SDL_TRUE = 1;

    public const int SDL_US_PER_SECOND = 1000000;

    public const int SDL_VERSION = 3001002;

    public const uint SDL_WINDOWPOS_CENTERED = 805240832;

    public const uint SDL_WINDOWPOS_CENTERED_MASK = 805240832;

    public const uint SDL_WINDOWPOS_UNDEFINED = 536805376;

    public const uint SDL_WINDOWPOS_UNDEFINED_MASK = 536805376;

    public const ulong SDL_WINDOW_ALWAYS_ON_TOP = 65536;

    public const ulong SDL_WINDOW_BORDERLESS = 16;

    public const ulong SDL_WINDOW_EXTERNAL = 2048;

    public const ulong SDL_WINDOW_FULLSCREEN = 1;

    public const ulong SDL_WINDOW_HIDDEN = 8;

    public const ulong SDL_WINDOW_HIGH_PIXEL_DENSITY = 8192;

    public const ulong SDL_WINDOW_INPUT_FOCUS = 512;

    public const ulong SDL_WINDOW_KEYBOARD_GRABBED = 1048576;

    public const ulong SDL_WINDOW_MAXIMIZED = 128;

    public const ulong SDL_WINDOW_METAL = 536870912;

    public const ulong SDL_WINDOW_MINIMIZED = 64;

    public const ulong SDL_WINDOW_MODAL = 4096;

    public const ulong SDL_WINDOW_MOUSE_CAPTURE = 16384;

    public const ulong SDL_WINDOW_MOUSE_FOCUS = 1024;

    public const ulong SDL_WINDOW_MOUSE_GRABBED = 256;

    public const ulong SDL_WINDOW_MOUSE_RELATIVE_MODE = 32768;

    public const ulong SDL_WINDOW_NOT_FOCUSABLE = 2147483648;

    public const ulong SDL_WINDOW_OCCLUDED = 4;

    public const ulong SDL_WINDOW_OPENGL = 2;

    public const ulong SDL_WINDOW_POPUP_MENU = 524288;

    public const ulong SDL_WINDOW_RESIZABLE = 32;

    public const int SDL_WINDOW_SURFACE_VSYNC_ADAPTIVE = -1;

    public const int SDL_WINDOW_SURFACE_VSYNC_DISABLED = 0;

    public const ulong SDL_WINDOW_TOOLTIP = 262144;

    public const ulong SDL_WINDOW_TRANSPARENT = 1073741824;

    public const ulong SDL_WINDOW_UTILITY = 131072;

    public const ulong SDL_WINDOW_VULKAN = 268435456;

    #endregion
}
