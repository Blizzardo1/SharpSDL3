
using System.Runtime.InteropServices;

namespace SDL3;

public static class SDL
{
    private const string nativeLibName = "SDL3";

    public enum SDL_DUMMY_ENUM
    {
        DUMMY_ENUM_VALUE = 0,
    }

    public enum SDL_AssertState
    {
        SDL_ASSERTION_RETRY = 0,
        SDL_ASSERTION_BREAK = 1,
        SDL_ASSERTION_ABORT = 2,
        SDL_ASSERTION_IGNORE = 3,
        SDL_ASSERTION_ALWAYS_IGNORE = 4,
    }

    public enum SDL_PropertyType
    {
        SDL_PROPERTY_TYPE_INVALID = 0,
        SDL_PROPERTY_TYPE_POINTER = 1,
        SDL_PROPERTY_TYPE_STRING = 2,
        SDL_PROPERTY_TYPE_NUMBER = 3,
        SDL_PROPERTY_TYPE_FLOAT = 4,
        SDL_PROPERTY_TYPE_BOOLEAN = 5,
    }

    public enum SDL_IOStatus
    {
        SDL_IO_STATUS_READY = 0,
        SDL_IO_STATUS_ERROR = 1,
        SDL_IO_STATUS_EOF = 2,
        SDL_IO_STATUS_NOT_READY = 3,
        SDL_IO_STATUS_READONLY = 4,
        SDL_IO_STATUS_WRITEONLY = 5,
    }

    public enum SDL_IOWhence
    {
        SDL_IO_SEEK_SET = 0,
        SDL_IO_SEEK_CUR = 1,
        SDL_IO_SEEK_END = 2,
    }

    public enum SDL_ThreadPriority
    {
        SDL_THREAD_PRIORITY_LOW = 0,
        SDL_THREAD_PRIORITY_NORMAL = 1,
        SDL_THREAD_PRIORITY_HIGH = 2,
        SDL_THREAD_PRIORITY_TIME_CRITICAL = 3,
    }

    public enum SDL_AudioFormat
    {
        SDL_AUDIO_U8 = 8,
        SDL_AUDIO_S8 = 32776,
        SDL_AUDIO_S16LE = 32784,
        SDL_AUDIO_S16BE = 36880,
        SDL_AUDIO_S32LE = 32800,
        SDL_AUDIO_S32BE = 36896,
        SDL_AUDIO_F32LE = 33056,
        SDL_AUDIO_F32BE = 37152,
    }

    public enum SDL_BlendOperation
    {
        SDL_BLENDOPERATION_ADD = 1,
        SDL_BLENDOPERATION_SUBTRACT = 2,
        SDL_BLENDOPERATION_REV_SUBTRACT = 3,
        SDL_BLENDOPERATION_MINIMUM = 4,
        SDL_BLENDOPERATION_MAXIMUM = 5,
    }

    public enum SDL_BlendFactor
    {
        SDL_BLENDFACTOR_ZERO = 1,
        SDL_BLENDFACTOR_ONE = 2,
        SDL_BLENDFACTOR_SRC_COLOR = 3,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 4,
        SDL_BLENDFACTOR_SRC_ALPHA = 5,
        SDL_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 6,
        SDL_BLENDFACTOR_DST_COLOR = 7,
        SDL_BLENDFACTOR_ONE_MINUS_DST_COLOR = 8,
        SDL_BLENDFACTOR_DST_ALPHA = 9,
        SDL_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 10,
    }

    public enum SDL_PixelType
    {
        SDL_PIXELTYPE_UNKNOWN = 0,
        SDL_PIXELTYPE_INDEX1 = 1,
        SDL_PIXELTYPE_INDEX4 = 2,
        SDL_PIXELTYPE_INDEX8 = 3,
        SDL_PIXELTYPE_PACKED8 = 4,
        SDL_PIXELTYPE_PACKED16 = 5,
        SDL_PIXELTYPE_PACKED32 = 6,
        SDL_PIXELTYPE_ARRAYU8 = 7,
        SDL_PIXELTYPE_ARRAYU16 = 8,
        SDL_PIXELTYPE_ARRAYU32 = 9,
        SDL_PIXELTYPE_ARRAYF16 = 10,
        SDL_PIXELTYPE_ARRAYF32 = 11,
        SDL_PIXELTYPE_INDEX2 = 12,
    }

    public enum SDL_BitmapOrder
    {
        SDL_BITMAPORDER_NONE = 0,
        SDL_BITMAPORDER_4321 = 1,
        SDL_BITMAPORDER_1234 = 2,
    }

    public enum SDL_PackedOrder
    {
        SDL_PACKEDORDER_NONE = 0,
        SDL_PACKEDORDER_XRGB = 1,
        SDL_PACKEDORDER_RGBX = 2,
        SDL_PACKEDORDER_ARGB = 3,
        SDL_PACKEDORDER_RGBA = 4,
        SDL_PACKEDORDER_XBGR = 5,
        SDL_PACKEDORDER_BGRX = 6,
        SDL_PACKEDORDER_ABGR = 7,
        SDL_PACKEDORDER_BGRA = 8,
    }

    public enum SDL_ArrayOrder
    {
        SDL_ARRAYORDER_NONE = 0,
        SDL_ARRAYORDER_RGB = 1,
        SDL_ARRAYORDER_RGBA = 2,
        SDL_ARRAYORDER_ARGB = 3,
        SDL_ARRAYORDER_BGR = 4,
        SDL_ARRAYORDER_BGRA = 5,
        SDL_ARRAYORDER_ABGR = 6,
    }

    public enum SDL_PackedLayout
    {
        SDL_PACKEDLAYOUT_NONE = 0,
        SDL_PACKEDLAYOUT_332 = 1,
        SDL_PACKEDLAYOUT_4444 = 2,
        SDL_PACKEDLAYOUT_1555 = 3,
        SDL_PACKEDLAYOUT_5551 = 4,
        SDL_PACKEDLAYOUT_565 = 5,
        SDL_PACKEDLAYOUT_8888 = 6,
        SDL_PACKEDLAYOUT_2101010 = 7,
        SDL_PACKEDLAYOUT_1010102 = 8,
    }

    public enum SDL_PixelFormat
    {
        SDL_PIXELFORMAT_UNKNOWN = 0,
        SDL_PIXELFORMAT_INDEX1LSB = 286261504,
        SDL_PIXELFORMAT_INDEX1MSB = 287310080,
        SDL_PIXELFORMAT_INDEX2LSB = 470811136,
        SDL_PIXELFORMAT_INDEX2MSB = 471859712,
        SDL_PIXELFORMAT_INDEX4LSB = 303039488,
        SDL_PIXELFORMAT_INDEX4MSB = 304088064,
        SDL_PIXELFORMAT_INDEX8 = 318769153,
        SDL_PIXELFORMAT_RGB332 = 336660481,
        SDL_PIXELFORMAT_XRGB4444 = 353504258,
        SDL_PIXELFORMAT_XBGR4444 = 357698562,
        SDL_PIXELFORMAT_XRGB1555 = 353570562,
        SDL_PIXELFORMAT_XBGR1555 = 357764866,
        SDL_PIXELFORMAT_ARGB4444 = 355602434,
        SDL_PIXELFORMAT_RGBA4444 = 356651010,
        SDL_PIXELFORMAT_ABGR4444 = 359796738,
        SDL_PIXELFORMAT_BGRA4444 = 360845314,
        SDL_PIXELFORMAT_ARGB1555 = 355667970,
        SDL_PIXELFORMAT_RGBA5551 = 356782082,
        SDL_PIXELFORMAT_ABGR1555 = 359862274,
        SDL_PIXELFORMAT_BGRA5551 = 360976386,
        SDL_PIXELFORMAT_RGB565 = 353701890,
        SDL_PIXELFORMAT_BGR565 = 357896194,
        SDL_PIXELFORMAT_RGB24 = 386930691,
        SDL_PIXELFORMAT_BGR24 = 390076419,
        SDL_PIXELFORMAT_XRGB8888 = 370546692,
        SDL_PIXELFORMAT_RGBX8888 = 371595268,
        SDL_PIXELFORMAT_XBGR8888 = 374740996,
        SDL_PIXELFORMAT_BGRX8888 = 375789572,
        SDL_PIXELFORMAT_ARGB8888 = 372645892,
        SDL_PIXELFORMAT_RGBA8888 = 373694468,
        SDL_PIXELFORMAT_ABGR8888 = 376840196,
        SDL_PIXELFORMAT_BGRA8888 = 377888772,
        SDL_PIXELFORMAT_XRGB2101010 = 370614276,
        SDL_PIXELFORMAT_XBGR2101010 = 374808580,
        SDL_PIXELFORMAT_ARGB2101010 = 372711428,
        SDL_PIXELFORMAT_ABGR2101010 = 376905732,
        SDL_PIXELFORMAT_RGB48 = 403714054,
        SDL_PIXELFORMAT_BGR48 = 406859782,
        SDL_PIXELFORMAT_RGBA64 = 404766728,
        SDL_PIXELFORMAT_ARGB64 = 405815304,
        SDL_PIXELFORMAT_BGRA64 = 407912456,
        SDL_PIXELFORMAT_ABGR64 = 408961032,
        SDL_PIXELFORMAT_RGB48_FLOAT = 437268486,
        SDL_PIXELFORMAT_BGR48_FLOAT = 440414214,
        SDL_PIXELFORMAT_RGBA64_FLOAT = 438321160,
        SDL_PIXELFORMAT_ARGB64_FLOAT = 439369736,
        SDL_PIXELFORMAT_BGRA64_FLOAT = 441466888,
        SDL_PIXELFORMAT_ABGR64_FLOAT = 442515464,
        SDL_PIXELFORMAT_RGB96_FLOAT = 454057996,
        SDL_PIXELFORMAT_BGR96_FLOAT = 457203724,
        SDL_PIXELFORMAT_RGBA128_FLOAT = 455114768,
        SDL_PIXELFORMAT_ARGB128_FLOAT = 456163344,
        SDL_PIXELFORMAT_BGRA128_FLOAT = 458260496,
        SDL_PIXELFORMAT_ABGR128_FLOAT = 459309072,
        SDL_PIXELFORMAT_YV12 = 842094169,
        SDL_PIXELFORMAT_IYUV = 1448433993,
        SDL_PIXELFORMAT_YUY2 = 844715353,
        SDL_PIXELFORMAT_UYVY = 1498831189,
        SDL_PIXELFORMAT_YVYU = 1431918169,
        SDL_PIXELFORMAT_NV12 = 842094158,
        SDL_PIXELFORMAT_NV21 = 825382478,
        SDL_PIXELFORMAT_P010 = 808530000,
        SDL_PIXELFORMAT_EXTERNAL_OES = 542328143,
    }

    public enum SDL_ColorType
    {
        SDL_COLOR_TYPE_UNKNOWN = 0,
        SDL_COLOR_TYPE_RGB = 1,
        SDL_COLOR_TYPE_YCBCR = 2,
    }

    public enum SDL_ColorRange
    {
        SDL_COLOR_RANGE_UNKNOWN = 0,
        SDL_COLOR_RANGE_LIMITED = 1,
        SDL_COLOR_RANGE_FULL = 2,
    }

    public enum SDL_ColorPrimaries
    {
        SDL_COLOR_PRIMARIES_UNKNOWN = 0,
        SDL_COLOR_PRIMARIES_BT709 = 1,
        SDL_COLOR_PRIMARIES_UNSPECIFIED = 2,
        SDL_COLOR_PRIMARIES_BT470M = 4,
        SDL_COLOR_PRIMARIES_BT470BG = 5,
        SDL_COLOR_PRIMARIES_BT601 = 6,
        SDL_COLOR_PRIMARIES_SMPTE240 = 7,
        SDL_COLOR_PRIMARIES_GENERIC_FILM = 8,
        SDL_COLOR_PRIMARIES_BT2020 = 9,
        SDL_COLOR_PRIMARIES_XYZ = 10,
        SDL_COLOR_PRIMARIES_SMPTE431 = 11,
        SDL_COLOR_PRIMARIES_SMPTE432 = 12,
        SDL_COLOR_PRIMARIES_EBU3213 = 22,
        SDL_COLOR_PRIMARIES_CUSTOM = 31,
    }

    public enum SDL_TransferCharacteristics
    {
        SDL_TRANSFER_CHARACTERISTICS_UNKNOWN = 0,
        SDL_TRANSFER_CHARACTERISTICS_BT709 = 1,
        SDL_TRANSFER_CHARACTERISTICS_UNSPECIFIED = 2,
        SDL_TRANSFER_CHARACTERISTICS_GAMMA22 = 4,
        SDL_TRANSFER_CHARACTERISTICS_GAMMA28 = 5,
        SDL_TRANSFER_CHARACTERISTICS_BT601 = 6,
        SDL_TRANSFER_CHARACTERISTICS_SMPTE240 = 7,
        SDL_TRANSFER_CHARACTERISTICS_LINEAR = 8,
        SDL_TRANSFER_CHARACTERISTICS_LOG100 = 9,
        SDL_TRANSFER_CHARACTERISTICS_LOG100_SQRT10 = 10,
        SDL_TRANSFER_CHARACTERISTICS_IEC61966 = 11,
        SDL_TRANSFER_CHARACTERISTICS_BT1361 = 12,
        SDL_TRANSFER_CHARACTERISTICS_SRGB = 13,
        SDL_TRANSFER_CHARACTERISTICS_BT2020_10BIT = 14,
        SDL_TRANSFER_CHARACTERISTICS_BT2020_12BIT = 15,
        SDL_TRANSFER_CHARACTERISTICS_PQ = 16,
        SDL_TRANSFER_CHARACTERISTICS_SMPTE428 = 17,
        SDL_TRANSFER_CHARACTERISTICS_HLG = 18,
        SDL_TRANSFER_CHARACTERISTICS_CUSTOM = 31,
    }

    public enum SDL_MatrixCoefficients
    {
        SDL_MATRIX_COEFFICIENTS_IDENTITY = 0,
        SDL_MATRIX_COEFFICIENTS_BT709 = 1,
        SDL_MATRIX_COEFFICIENTS_UNSPECIFIED = 2,
        SDL_MATRIX_COEFFICIENTS_FCC = 4,
        SDL_MATRIX_COEFFICIENTS_BT470BG = 5,
        SDL_MATRIX_COEFFICIENTS_BT601 = 6,
        SDL_MATRIX_COEFFICIENTS_SMPTE240 = 7,
        SDL_MATRIX_COEFFICIENTS_YCGCO = 8,
        SDL_MATRIX_COEFFICIENTS_BT2020_NCL = 9,
        SDL_MATRIX_COEFFICIENTS_BT2020_CL = 10,
        SDL_MATRIX_COEFFICIENTS_SMPTE2085 = 11,
        SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_NCL = 12,
        SDL_MATRIX_COEFFICIENTS_CHROMA_DERIVED_CL = 13,
        SDL_MATRIX_COEFFICIENTS_ICTCP = 14,
        SDL_MATRIX_COEFFICIENTS_CUSTOM = 31,
    }

    public enum SDL_ChromaLocation
    {
        SDL_CHROMA_LOCATION_NONE = 0,
        SDL_CHROMA_LOCATION_LEFT = 1,
        SDL_CHROMA_LOCATION_CENTER = 2,
        SDL_CHROMA_LOCATION_TOPLEFT = 3,
    }

    public enum SDL_Colorspace
    {
        SDL_COLORSPACE_UNKNOWN = 0,
        SDL_COLORSPACE_SRGB = 301991328,
        SDL_COLORSPACE_SRGB_LINEAR = 301991168,
        SDL_COLORSPACE_HDR10 = 301999616,
        SDL_COLORSPACE_JPEG = 570426566,
        SDL_COLORSPACE_BT601_LIMITED = 554703046,
        SDL_COLORSPACE_BT601_FULL = 571480262,
        SDL_COLORSPACE_BT709_LIMITED = 554697761,
        SDL_COLORSPACE_BT709_FULL = 571474977,
        SDL_COLORSPACE_BT2020_LIMITED = 554706441,
        SDL_COLORSPACE_BT2020_FULL = 571483657,
    }

    public enum SDL_ScaleMode
    {
        SDL_SCALEMODE_NEAREST = 0,
        SDL_SCALEMODE_LINEAR = 1,
        SDL_SCALEMODE_BEST = 2,
    }

    public enum SDL_FlipMode
    {
        SDL_FLIP_NONE = 0,
        SDL_FLIP_HORIZONTAL = 1,
        SDL_FLIP_VERTICAL = 2,
    }

    public enum SDL_SystemTheme
    {
        SDL_SYSTEM_THEME_UNKNOWN = 0,
        SDL_SYSTEM_THEME_LIGHT = 1,
        SDL_SYSTEM_THEME_DARK = 2,
    }

    public enum SDL_DisplayOrientation
    {
        SDL_ORIENTATION_UNKNOWN = 0,
        SDL_ORIENTATION_LANDSCAPE = 1,
        SDL_ORIENTATION_LANDSCAPE_FLIPPED = 2,
        SDL_ORIENTATION_PORTRAIT = 3,
        SDL_ORIENTATION_PORTRAIT_FLIPPED = 4,
    }

    public enum SDL_FlashOperation
    {
        SDL_FLASH_CANCEL = 0,
        SDL_FLASH_BRIEFLY = 1,
        SDL_FLASH_UNTIL_FOCUSED = 2,
    }

    public enum SDL_GLattr
    {
        SDL_GL_RED_SIZE = 0,
        SDL_GL_GREEN_SIZE = 1,
        SDL_GL_BLUE_SIZE = 2,
        SDL_GL_ALPHA_SIZE = 3,
        SDL_GL_BUFFER_SIZE = 4,
        SDL_GL_DOUBLEBUFFER = 5,
        SDL_GL_DEPTH_SIZE = 6,
        SDL_GL_STENCIL_SIZE = 7,
        SDL_GL_ACCUM_RED_SIZE = 8,
        SDL_GL_ACCUM_GREEN_SIZE = 9,
        SDL_GL_ACCUM_BLUE_SIZE = 10,
        SDL_GL_ACCUM_ALPHA_SIZE = 11,
        SDL_GL_STEREO = 12,
        SDL_GL_MULTISAMPLEBUFFERS = 13,
        SDL_GL_MULTISAMPLESAMPLES = 14,
        SDL_GL_ACCELERATED_VISUAL = 15,
        SDL_GL_RETAINED_BACKING = 16,
        SDL_GL_CONTEXT_MAJOR_VERSION = 17,
        SDL_GL_CONTEXT_MINOR_VERSION = 18,
        SDL_GL_CONTEXT_FLAGS = 19,
        SDL_GL_CONTEXT_PROFILE_MASK = 20,
        SDL_GL_SHARE_WITH_CURRENT_CONTEXT = 21,
        SDL_GL_FRAMEBUFFER_SRGB_CAPABLE = 22,
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR = 23,
        SDL_GL_CONTEXT_RESET_NOTIFICATION = 24,
        SDL_GL_CONTEXT_NO_ERROR = 25,
        SDL_GL_FLOATBUFFERS = 26,
        SDL_GL_EGL_PLATFORM = 27,
    }

    public enum SDL_GLprofile
    {
        SDL_GL_CONTEXT_PROFILE_CORE = 1,
        SDL_GL_CONTEXT_PROFILE_COMPATIBILITY = 2,
        SDL_GL_CONTEXT_PROFILE_ES = 4,
    }

    public enum SDL_GLcontextFlag
    {
        SDL_GL_CONTEXT_DEBUG_FLAG = 1,
        SDL_GL_CONTEXT_FORWARD_COMPATIBLE_FLAG = 2,
        SDL_GL_CONTEXT_ROBUST_ACCESS_FLAG = 4,
        SDL_GL_CONTEXT_RESET_ISOLATION_FLAG = 8,
    }

    public enum SDL_GLcontextReleaseFlag
    {
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR_NONE = 0,
        SDL_GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 1,
    }

    public enum SDL_GLContextResetNotification
    {
        SDL_GL_CONTEXT_RESET_NO_NOTIFICATION = 0,
        SDL_GL_CONTEXT_RESET_LOSE_CONTEXT = 1,
    }

    public enum SDL_HitTestResult
    {
        SDL_HITTEST_NORMAL = 0,
        SDL_HITTEST_DRAGGABLE = 1,
        SDL_HITTEST_RESIZE_TOPLEFT = 2,
        SDL_HITTEST_RESIZE_TOP = 3,
        SDL_HITTEST_RESIZE_TOPRIGHT = 4,
        SDL_HITTEST_RESIZE_RIGHT = 5,
        SDL_HITTEST_RESIZE_BOTTOMRIGHT = 6,
        SDL_HITTEST_RESIZE_BOTTOM = 7,
        SDL_HITTEST_RESIZE_BOTTOMLEFT = 8,
        SDL_HITTEST_RESIZE_LEFT = 9,
    }

    public enum SDL_CameraPosition
    {
        SDL_CAMERA_POSITION_UNKNOWN = 0,
        SDL_CAMERA_POSITION_FRONT_FACING = 1,
        SDL_CAMERA_POSITION_BACK_FACING = 2,
    }

    public enum SDL_PowerState
    {
        SDL_POWERSTATE_ERROR = -1,
        SDL_POWERSTATE_UNKNOWN = 0,
        SDL_POWERSTATE_ON_BATTERY = 1,
        SDL_POWERSTATE_NO_BATTERY = 2,
        SDL_POWERSTATE_CHARGING = 3,
        SDL_POWERSTATE_CHARGED = 4,
    }

    public enum SDL_SensorType
    {
        SDL_SENSOR_INVALID = -1,
        SDL_SENSOR_UNKNOWN = 0,
        SDL_SENSOR_ACCEL = 1,
        SDL_SENSOR_GYRO = 2,
        SDL_SENSOR_ACCEL_L = 3,
        SDL_SENSOR_GYRO_L = 4,
        SDL_SENSOR_ACCEL_R = 5,
        SDL_SENSOR_GYRO_R = 6,
    }

    public enum SDL_JoystickType
    {
        SDL_JOYSTICK_TYPE_UNKNOWN = 0,
        SDL_JOYSTICK_TYPE_GAMEPAD = 1,
        SDL_JOYSTICK_TYPE_WHEEL = 2,
        SDL_JOYSTICK_TYPE_ARCADE_STICK = 3,
        SDL_JOYSTICK_TYPE_FLIGHT_STICK = 4,
        SDL_JOYSTICK_TYPE_DANCE_PAD = 5,
        SDL_JOYSTICK_TYPE_GUITAR = 6,
        SDL_JOYSTICK_TYPE_DRUM_KIT = 7,
        SDL_JOYSTICK_TYPE_ARCADE_PAD = 8,
        SDL_JOYSTICK_TYPE_THROTTLE = 9,
    }

    public enum SDL_JoystickConnectionState
    {
        SDL_JOYSTICK_CONNECTION_INVALID = -1,
        SDL_JOYSTICK_CONNECTION_UNKNOWN = 0,
        SDL_JOYSTICK_CONNECTION_WIRED = 1,
        SDL_JOYSTICK_CONNECTION_WIRELESS = 2,
    }

    public enum SDL_GamepadType
    {
        SDL_GAMEPAD_TYPE_UNKNOWN = 0,
        SDL_GAMEPAD_TYPE_STANDARD = 1,
        SDL_GAMEPAD_TYPE_XBOX360 = 2,
        SDL_GAMEPAD_TYPE_XBOXONE = 3,
        SDL_GAMEPAD_TYPE_PS3 = 4,
        SDL_GAMEPAD_TYPE_PS4 = 5,
        SDL_GAMEPAD_TYPE_PS5 = 6,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_PRO = 7,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_LEFT = 8,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT = 9,
        SDL_GAMEPAD_TYPE_NINTENDO_SWITCH_JOYCON_PAIR = 10,
        SDL_GAMEPAD_TYPE_MAX = 11,
    }

    public enum SDL_GamepadButton
    {
        SDL_GAMEPAD_BUTTON_INVALID = -1,
        SDL_GAMEPAD_BUTTON_SOUTH = 0,
        SDL_GAMEPAD_BUTTON_EAST = 1,
        SDL_GAMEPAD_BUTTON_WEST = 2,
        SDL_GAMEPAD_BUTTON_NORTH = 3,
        SDL_GAMEPAD_BUTTON_BACK = 4,
        SDL_GAMEPAD_BUTTON_GUIDE = 5,
        SDL_GAMEPAD_BUTTON_START = 6,
        SDL_GAMEPAD_BUTTON_LEFT_STICK = 7,
        SDL_GAMEPAD_BUTTON_RIGHT_STICK = 8,
        SDL_GAMEPAD_BUTTON_LEFT_SHOULDER = 9,
        SDL_GAMEPAD_BUTTON_RIGHT_SHOULDER = 10,
        SDL_GAMEPAD_BUTTON_DPAD_UP = 11,
        SDL_GAMEPAD_BUTTON_DPAD_DOWN = 12,
        SDL_GAMEPAD_BUTTON_DPAD_LEFT = 13,
        SDL_GAMEPAD_BUTTON_DPAD_RIGHT = 14,
        SDL_GAMEPAD_BUTTON_MISC1 = 15,
        SDL_GAMEPAD_BUTTON_RIGHT_PADDLE1 = 16,
        SDL_GAMEPAD_BUTTON_LEFT_PADDLE1 = 17,
        SDL_GAMEPAD_BUTTON_RIGHT_PADDLE2 = 18,
        SDL_GAMEPAD_BUTTON_LEFT_PADDLE2 = 19,
        SDL_GAMEPAD_BUTTON_TOUCHPAD = 20,
        SDL_GAMEPAD_BUTTON_MISC2 = 21,
        SDL_GAMEPAD_BUTTON_MISC3 = 22,
        SDL_GAMEPAD_BUTTON_MISC4 = 23,
        SDL_GAMEPAD_BUTTON_MISC5 = 24,
        SDL_GAMEPAD_BUTTON_MISC6 = 25,
        SDL_GAMEPAD_BUTTON_MAX = 26,
    }

    public enum SDL_GamepadButtonLabel
    {
        SDL_GAMEPAD_BUTTON_LABEL_UNKNOWN = 0,
        SDL_GAMEPAD_BUTTON_LABEL_A = 1,
        SDL_GAMEPAD_BUTTON_LABEL_B = 2,
        SDL_GAMEPAD_BUTTON_LABEL_X = 3,
        SDL_GAMEPAD_BUTTON_LABEL_Y = 4,
        SDL_GAMEPAD_BUTTON_LABEL_CROSS = 5,
        SDL_GAMEPAD_BUTTON_LABEL_CIRCLE = 6,
        SDL_GAMEPAD_BUTTON_LABEL_SQUARE = 7,
        SDL_GAMEPAD_BUTTON_LABEL_TRIANGLE = 8,
    }

    public enum SDL_GamepadAxis
    {
        SDL_GAMEPAD_AXIS_INVALID = -1,
        SDL_GAMEPAD_AXIS_LEFTX = 0,
        SDL_GAMEPAD_AXIS_LEFTY = 1,
        SDL_GAMEPAD_AXIS_RIGHTX = 2,
        SDL_GAMEPAD_AXIS_RIGHTY = 3,
        SDL_GAMEPAD_AXIS_LEFT_TRIGGER = 4,
        SDL_GAMEPAD_AXIS_RIGHT_TRIGGER = 5,
        SDL_GAMEPAD_AXIS_MAX = 6,
    }

    public enum SDL_GamepadBindingType
    {
        SDL_GAMEPAD_BINDTYPE_NONE = 0,
        SDL_GAMEPAD_BINDTYPE_BUTTON = 1,
        SDL_GAMEPAD_BINDTYPE_AXIS = 2,
        SDL_GAMEPAD_BINDTYPE_HAT = 3,
    }

    public enum SDL_Scancode
    {
        SDL_SCANCODE_UNKNOWN = 0,
        SDL_SCANCODE_A = 4,
        SDL_SCANCODE_B = 5,
        SDL_SCANCODE_C = 6,
        SDL_SCANCODE_D = 7,
        SDL_SCANCODE_E = 8,
        SDL_SCANCODE_F = 9,
        SDL_SCANCODE_G = 10,
        SDL_SCANCODE_H = 11,
        SDL_SCANCODE_I = 12,
        SDL_SCANCODE_J = 13,
        SDL_SCANCODE_K = 14,
        SDL_SCANCODE_L = 15,
        SDL_SCANCODE_M = 16,
        SDL_SCANCODE_N = 17,
        SDL_SCANCODE_O = 18,
        SDL_SCANCODE_P = 19,
        SDL_SCANCODE_Q = 20,
        SDL_SCANCODE_R = 21,
        SDL_SCANCODE_S = 22,
        SDL_SCANCODE_T = 23,
        SDL_SCANCODE_U = 24,
        SDL_SCANCODE_V = 25,
        SDL_SCANCODE_W = 26,
        SDL_SCANCODE_X = 27,
        SDL_SCANCODE_Y = 28,
        SDL_SCANCODE_Z = 29,
        SDL_SCANCODE_1 = 30,
        SDL_SCANCODE_2 = 31,
        SDL_SCANCODE_3 = 32,
        SDL_SCANCODE_4 = 33,
        SDL_SCANCODE_5 = 34,
        SDL_SCANCODE_6 = 35,
        SDL_SCANCODE_7 = 36,
        SDL_SCANCODE_8 = 37,
        SDL_SCANCODE_9 = 38,
        SDL_SCANCODE_0 = 39,
        SDL_SCANCODE_RETURN = 40,
        SDL_SCANCODE_ESCAPE = 41,
        SDL_SCANCODE_BACKSPACE = 42,
        SDL_SCANCODE_TAB = 43,
        SDL_SCANCODE_SPACE = 44,
        SDL_SCANCODE_MINUS = 45,
        SDL_SCANCODE_EQUALS = 46,
        SDL_SCANCODE_LEFTBRACKET = 47,
        SDL_SCANCODE_RIGHTBRACKET = 48,
        SDL_SCANCODE_BACKSLASH = 49,
        SDL_SCANCODE_NONUSHASH = 50,
        SDL_SCANCODE_SEMICOLON = 51,
        SDL_SCANCODE_APOSTROPHE = 52,
        SDL_SCANCODE_GRAVE = 53,
        SDL_SCANCODE_COMMA = 54,
        SDL_SCANCODE_PERIOD = 55,
        SDL_SCANCODE_SLASH = 56,
        SDL_SCANCODE_CAPSLOCK = 57,
        SDL_SCANCODE_F1 = 58,
        SDL_SCANCODE_F2 = 59,
        SDL_SCANCODE_F3 = 60,
        SDL_SCANCODE_F4 = 61,
        SDL_SCANCODE_F5 = 62,
        SDL_SCANCODE_F6 = 63,
        SDL_SCANCODE_F7 = 64,
        SDL_SCANCODE_F8 = 65,
        SDL_SCANCODE_F9 = 66,
        SDL_SCANCODE_F10 = 67,
        SDL_SCANCODE_F11 = 68,
        SDL_SCANCODE_F12 = 69,
        SDL_SCANCODE_PRINTSCREEN = 70,
        SDL_SCANCODE_SCROLLLOCK = 71,
        SDL_SCANCODE_PAUSE = 72,
        SDL_SCANCODE_INSERT = 73,
        SDL_SCANCODE_HOME = 74,
        SDL_SCANCODE_PAGEUP = 75,
        SDL_SCANCODE_DELETE = 76,
        SDL_SCANCODE_END = 77,
        SDL_SCANCODE_PAGEDOWN = 78,
        SDL_SCANCODE_RIGHT = 79,
        SDL_SCANCODE_LEFT = 80,
        SDL_SCANCODE_DOWN = 81,
        SDL_SCANCODE_UP = 82,
        SDL_SCANCODE_NUMLOCKCLEAR = 83,
        SDL_SCANCODE_KP_DIVIDE = 84,
        SDL_SCANCODE_KP_MULTIPLY = 85,
        SDL_SCANCODE_KP_MINUS = 86,
        SDL_SCANCODE_KP_PLUS = 87,
        SDL_SCANCODE_KP_ENTER = 88,
        SDL_SCANCODE_KP_1 = 89,
        SDL_SCANCODE_KP_2 = 90,
        SDL_SCANCODE_KP_3 = 91,
        SDL_SCANCODE_KP_4 = 92,
        SDL_SCANCODE_KP_5 = 93,
        SDL_SCANCODE_KP_6 = 94,
        SDL_SCANCODE_KP_7 = 95,
        SDL_SCANCODE_KP_8 = 96,
        SDL_SCANCODE_KP_9 = 97,
        SDL_SCANCODE_KP_0 = 98,
        SDL_SCANCODE_KP_PERIOD = 99,
        SDL_SCANCODE_NONUSBACKSLASH = 100,
        SDL_SCANCODE_APPLICATION = 101,
        SDL_SCANCODE_POWER = 102,
        SDL_SCANCODE_KP_EQUALS = 103,
        SDL_SCANCODE_F13 = 104,
        SDL_SCANCODE_F14 = 105,
        SDL_SCANCODE_F15 = 106,
        SDL_SCANCODE_F16 = 107,
        SDL_SCANCODE_F17 = 108,
        SDL_SCANCODE_F18 = 109,
        SDL_SCANCODE_F19 = 110,
        SDL_SCANCODE_F20 = 111,
        SDL_SCANCODE_F21 = 112,
        SDL_SCANCODE_F22 = 113,
        SDL_SCANCODE_F23 = 114,
        SDL_SCANCODE_F24 = 115,
        SDL_SCANCODE_EXECUTE = 116,
        SDL_SCANCODE_HELP = 117,
        SDL_SCANCODE_MENU = 118,
        SDL_SCANCODE_SELECT = 119,
        SDL_SCANCODE_STOP = 120,
        SDL_SCANCODE_AGAIN = 121,
        SDL_SCANCODE_UNDO = 122,
        SDL_SCANCODE_CUT = 123,
        SDL_SCANCODE_COPY = 124,
        SDL_SCANCODE_PASTE = 125,
        SDL_SCANCODE_FIND = 126,
        SDL_SCANCODE_MUTE = 127,
        SDL_SCANCODE_VOLUMEUP = 128,
        SDL_SCANCODE_VOLUMEDOWN = 129,
        SDL_SCANCODE_KP_COMMA = 133,
        SDL_SCANCODE_KP_EQUALSAS400 = 134,
        SDL_SCANCODE_INTERNATIONAL1 = 135,
        SDL_SCANCODE_INTERNATIONAL2 = 136,
        SDL_SCANCODE_INTERNATIONAL3 = 137,
        SDL_SCANCODE_INTERNATIONAL4 = 138,
        SDL_SCANCODE_INTERNATIONAL5 = 139,
        SDL_SCANCODE_INTERNATIONAL6 = 140,
        SDL_SCANCODE_INTERNATIONAL7 = 141,
        SDL_SCANCODE_INTERNATIONAL8 = 142,
        SDL_SCANCODE_INTERNATIONAL9 = 143,
        SDL_SCANCODE_LANG1 = 144,
        SDL_SCANCODE_LANG2 = 145,
        SDL_SCANCODE_LANG3 = 146,
        SDL_SCANCODE_LANG4 = 147,
        SDL_SCANCODE_LANG5 = 148,
        SDL_SCANCODE_LANG6 = 149,
        SDL_SCANCODE_LANG7 = 150,
        SDL_SCANCODE_LANG8 = 151,
        SDL_SCANCODE_LANG9 = 152,
        SDL_SCANCODE_ALTERASE = 153,
        SDL_SCANCODE_SYSREQ = 154,
        SDL_SCANCODE_CANCEL = 155,
        SDL_SCANCODE_CLEAR = 156,
        SDL_SCANCODE_PRIOR = 157,
        SDL_SCANCODE_RETURN2 = 158,
        SDL_SCANCODE_SEPARATOR = 159,
        SDL_SCANCODE_OUT = 160,
        SDL_SCANCODE_OPER = 161,
        SDL_SCANCODE_CLEARAGAIN = 162,
        SDL_SCANCODE_CRSEL = 163,
        SDL_SCANCODE_EXSEL = 164,
        SDL_SCANCODE_KP_00 = 176,
        SDL_SCANCODE_KP_000 = 177,
        SDL_SCANCODE_THOUSANDSSEPARATOR = 178,
        SDL_SCANCODE_DECIMALSEPARATOR = 179,
        SDL_SCANCODE_CURRENCYUNIT = 180,
        SDL_SCANCODE_CURRENCYSUBUNIT = 181,
        SDL_SCANCODE_KP_LEFTPAREN = 182,
        SDL_SCANCODE_KP_RIGHTPAREN = 183,
        SDL_SCANCODE_KP_LEFTBRACE = 184,
        SDL_SCANCODE_KP_RIGHTBRACE = 185,
        SDL_SCANCODE_KP_TAB = 186,
        SDL_SCANCODE_KP_BACKSPACE = 187,
        SDL_SCANCODE_KP_A = 188,
        SDL_SCANCODE_KP_B = 189,
        SDL_SCANCODE_KP_C = 190,
        SDL_SCANCODE_KP_D = 191,
        SDL_SCANCODE_KP_E = 192,
        SDL_SCANCODE_KP_F = 193,
        SDL_SCANCODE_KP_XOR = 194,
        SDL_SCANCODE_KP_POWER = 195,
        SDL_SCANCODE_KP_PERCENT = 196,
        SDL_SCANCODE_KP_LESS = 197,
        SDL_SCANCODE_KP_GREATER = 198,
        SDL_SCANCODE_KP_AMPERSAND = 199,
        SDL_SCANCODE_KP_DBLAMPERSAND = 200,
        SDL_SCANCODE_KP_VERTICALBAR = 201,
        SDL_SCANCODE_KP_DBLVERTICALBAR = 202,
        SDL_SCANCODE_KP_COLON = 203,
        SDL_SCANCODE_KP_HASH = 204,
        SDL_SCANCODE_KP_SPACE = 205,
        SDL_SCANCODE_KP_AT = 206,
        SDL_SCANCODE_KP_EXCLAM = 207,
        SDL_SCANCODE_KP_MEMSTORE = 208,
        SDL_SCANCODE_KP_MEMRECALL = 209,
        SDL_SCANCODE_KP_MEMCLEAR = 210,
        SDL_SCANCODE_KP_MEMADD = 211,
        SDL_SCANCODE_KP_MEMSUBTRACT = 212,
        SDL_SCANCODE_KP_MEMMULTIPLY = 213,
        SDL_SCANCODE_KP_MEMDIVIDE = 214,
        SDL_SCANCODE_KP_PLUSMINUS = 215,
        SDL_SCANCODE_KP_CLEAR = 216,
        SDL_SCANCODE_KP_CLEARENTRY = 217,
        SDL_SCANCODE_KP_BINARY = 218,
        SDL_SCANCODE_KP_OCTAL = 219,
        SDL_SCANCODE_KP_DECIMAL = 220,
        SDL_SCANCODE_KP_HEXADECIMAL = 221,
        SDL_SCANCODE_LCTRL = 224,
        SDL_SCANCODE_LSHIFT = 225,
        SDL_SCANCODE_LALT = 226,
        SDL_SCANCODE_LGUI = 227,
        SDL_SCANCODE_RCTRL = 228,
        SDL_SCANCODE_RSHIFT = 229,
        SDL_SCANCODE_RALT = 230,
        SDL_SCANCODE_RGUI = 231,
        SDL_SCANCODE_MODE = 257,
        SDL_SCANCODE_SLEEP = 258,
        SDL_SCANCODE_WAKE = 259,
        SDL_SCANCODE_CHANNEL_INCREMENT = 260,
        SDL_SCANCODE_CHANNEL_DECREMENT = 261,
        SDL_SCANCODE_MEDIA_PLAY = 262,
        SDL_SCANCODE_MEDIA_PAUSE = 263,
        SDL_SCANCODE_MEDIA_RECORD = 264,
        SDL_SCANCODE_MEDIA_FAST_FORWARD = 265,
        SDL_SCANCODE_MEDIA_REWIND = 266,
        SDL_SCANCODE_MEDIA_NEXT_TRACK = 267,
        SDL_SCANCODE_MEDIA_PREVIOUS_TRACK = 268,
        SDL_SCANCODE_MEDIA_STOP = 269,
        SDL_SCANCODE_MEDIA_EJECT = 270,
        SDL_SCANCODE_MEDIA_PLAY_PAUSE = 271,
        SDL_SCANCODE_MEDIA_SELECT = 272,
        SDL_SCANCODE_AC_NEW = 273,
        SDL_SCANCODE_AC_OPEN = 274,
        SDL_SCANCODE_AC_CLOSE = 275,
        SDL_SCANCODE_AC_EXIT = 276,
        SDL_SCANCODE_AC_SAVE = 277,
        SDL_SCANCODE_AC_PRINT = 278,
        SDL_SCANCODE_AC_PROPERTIES = 279,
        SDL_SCANCODE_AC_SEARCH = 280,
        SDL_SCANCODE_AC_HOME = 281,
        SDL_SCANCODE_AC_BACK = 282,
        SDL_SCANCODE_AC_FORWARD = 283,
        SDL_SCANCODE_AC_STOP = 284,
        SDL_SCANCODE_AC_REFRESH = 285,
        SDL_SCANCODE_AC_BOOKMARKS = 286,
        SDL_SCANCODE_SOFTLEFT = 287,
        SDL_SCANCODE_SOFTRIGHT = 288,
        SDL_SCANCODE_CALL = 289,
        SDL_SCANCODE_ENDCALL = 290,
        SDL_SCANCODE_RESERVED = 400,
        SDL_NUM_SCANCODES = 512,
    }

    public enum SDL_TextInputType
    {
        SDL_TEXTINPUT_TYPE_TEXT = 0,
        SDL_TEXTINPUT_TYPE_TEXT_NAME = 1,
        SDL_TEXTINPUT_TYPE_TEXT_EMAIL = 2,
        SDL_TEXTINPUT_TYPE_TEXT_USERNAME = 3,
        SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_HIDDEN = 4,
        SDL_TEXTINPUT_TYPE_TEXT_PASSWORD_VISIBLE = 5,
        SDL_TEXTINPUT_TYPE_NUMBER = 6,
        SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_HIDDEN = 7,
        SDL_TEXTINPUT_TYPE_NUMBER_PASSWORD_VISIBLE = 8,
    }

    public enum SDL_Capitalization
    {
        SDL_CAPITALIZE_NONE = 0,
        SDL_CAPITALIZE_SENTENCES = 1,
        SDL_CAPITALIZE_WORDS = 2,
        SDL_CAPITALIZE_LETTERS = 3,
    }

    public enum SDL_SystemCursor
    {
        SDL_SYSTEM_CURSOR_DEFAULT = 0,
        SDL_SYSTEM_CURSOR_TEXT = 1,
        SDL_SYSTEM_CURSOR_WAIT = 2,
        SDL_SYSTEM_CURSOR_CROSSHAIR = 3,
        SDL_SYSTEM_CURSOR_PROGRESS = 4,
        SDL_SYSTEM_CURSOR_NWSE_RESIZE = 5,
        SDL_SYSTEM_CURSOR_NESW_RESIZE = 6,
        SDL_SYSTEM_CURSOR_EW_RESIZE = 7,
        SDL_SYSTEM_CURSOR_NS_RESIZE = 8,
        SDL_SYSTEM_CURSOR_MOVE = 9,
        SDL_SYSTEM_CURSOR_NOT_ALLOWED = 10,
        SDL_SYSTEM_CURSOR_POINTER = 11,
        SDL_SYSTEM_CURSOR_NW_RESIZE = 12,
        SDL_SYSTEM_CURSOR_N_RESIZE = 13,
        SDL_SYSTEM_CURSOR_NE_RESIZE = 14,
        SDL_SYSTEM_CURSOR_E_RESIZE = 15,
        SDL_SYSTEM_CURSOR_SE_RESIZE = 16,
        SDL_SYSTEM_CURSOR_S_RESIZE = 17,
        SDL_SYSTEM_CURSOR_SW_RESIZE = 18,
        SDL_SYSTEM_CURSOR_W_RESIZE = 19,
        SDL_NUM_SYSTEM_CURSORS = 20,
    }

    public enum SDL_MouseWheelDirection
    {
        SDL_MOUSEWHEEL_NORMAL = 0,
        SDL_MOUSEWHEEL_FLIPPED = 1,
    }

    public enum SDL_PenAxis
    {
        SDL_PEN_AXIS_PRESSURE = 0,
        SDL_PEN_AXIS_XTILT = 1,
        SDL_PEN_AXIS_YTILT = 2,
        SDL_PEN_AXIS_DISTANCE = 3,
        SDL_PEN_AXIS_ROTATION = 4,
        SDL_PEN_AXIS_SLIDER = 5,
        SDL_PEN_AXIS_TANGENTIAL_PRESSURE = 6,
        SDL_PEN_NUM_AXES = 7,
    }

    public enum SDL_TouchDeviceType
    {
        SDL_TOUCH_DEVICE_INVALID = -1,
        SDL_TOUCH_DEVICE_DIRECT = 0,
        SDL_TOUCH_DEVICE_INDIRECT_ABSOLUTE = 1,
        SDL_TOUCH_DEVICE_INDIRECT_RELATIVE = 2,
    }

    public enum SDL_EventType
    {
        SDL_EVENT_FIRST = 0,
        SDL_EVENT_QUIT = 256,
        SDL_EVENT_TERMINATING = 257,
        SDL_EVENT_LOW_MEMORY = 258,
        SDL_EVENT_WILL_ENTER_BACKGROUND = 259,
        SDL_EVENT_DID_ENTER_BACKGROUND = 260,
        SDL_EVENT_WILL_ENTER_FOREGROUND = 261,
        SDL_EVENT_DID_ENTER_FOREGROUND = 262,
        SDL_EVENT_LOCALE_CHANGED = 263,
        SDL_EVENT_SYSTEM_THEME_CHANGED = 264,
        SDL_EVENT_DISPLAY_ORIENTATION = 337,
        SDL_EVENT_DISPLAY_ADDED = 338,
        SDL_EVENT_DISPLAY_REMOVED = 339,
        SDL_EVENT_DISPLAY_MOVED = 340,
        SDL_EVENT_DISPLAY_DESKTOP_MODE_CHANGED = 341,
        SDL_EVENT_DISPLAY_CURRENT_MODE_CHANGED = 342,
        SDL_EVENT_DISPLAY_CONTENT_SCALE_CHANGED = 343,
        SDL_EVENT_DISPLAY_FIRST = 337,
        SDL_EVENT_DISPLAY_LAST = 343,
        SDL_EVENT_WINDOW_SHOWN = 514,
        SDL_EVENT_WINDOW_HIDDEN = 515,
        SDL_EVENT_WINDOW_EXPOSED = 516,
        SDL_EVENT_WINDOW_MOVED = 517,
        SDL_EVENT_WINDOW_RESIZED = 518,
        SDL_EVENT_WINDOW_PIXEL_SIZE_CHANGED = 519,
        SDL_EVENT_WINDOW_METAL_VIEW_RESIZED = 520,
        SDL_EVENT_WINDOW_MINIMIZED = 521,
        SDL_EVENT_WINDOW_MAXIMIZED = 522,
        SDL_EVENT_WINDOW_RESTORED = 523,
        SDL_EVENT_WINDOW_MOUSE_ENTER = 524,
        SDL_EVENT_WINDOW_MOUSE_LEAVE = 525,
        SDL_EVENT_WINDOW_FOCUS_GAINED = 526,
        SDL_EVENT_WINDOW_FOCUS_LOST = 527,
        SDL_EVENT_WINDOW_CLOSE_REQUESTED = 528,
        SDL_EVENT_WINDOW_HIT_TEST = 529,
        SDL_EVENT_WINDOW_ICCPROF_CHANGED = 530,
        SDL_EVENT_WINDOW_DISPLAY_CHANGED = 531,
        SDL_EVENT_WINDOW_DISPLAY_SCALE_CHANGED = 532,
        SDL_EVENT_WINDOW_SAFE_AREA_CHANGED = 533,
        SDL_EVENT_WINDOW_OCCLUDED = 534,
        SDL_EVENT_WINDOW_ENTER_FULLSCREEN = 535,
        SDL_EVENT_WINDOW_LEAVE_FULLSCREEN = 536,
        SDL_EVENT_WINDOW_DESTROYED = 537,
        SDL_EVENT_WINDOW_HDR_STATE_CHANGED = 538,
        SDL_EVENT_WINDOW_FIRST = 514,
        SDL_EVENT_WINDOW_LAST = 538,
        SDL_EVENT_KEY_DOWN = 768,
        SDL_EVENT_KEY_UP = 769,
        SDL_EVENT_TEXT_EDITING = 770,
        SDL_EVENT_TEXT_INPUT = 771,
        SDL_EVENT_KEYMAP_CHANGED = 772,
        SDL_EVENT_KEYBOARD_ADDED = 773,
        SDL_EVENT_KEYBOARD_REMOVED = 774,
        SDL_EVENT_TEXT_EDITING_CANDIDATES = 775,
        SDL_EVENT_MOUSE_MOTION = 1024,
        SDL_EVENT_MOUSE_BUTTON_DOWN = 1025,
        SDL_EVENT_MOUSE_BUTTON_UP = 1026,
        SDL_EVENT_MOUSE_WHEEL = 1027,
        SDL_EVENT_MOUSE_ADDED = 1028,
        SDL_EVENT_MOUSE_REMOVED = 1029,
        SDL_EVENT_JOYSTICK_AXIS_MOTION = 1536,
        SDL_EVENT_JOYSTICK_BALL_MOTION = 1537,
        SDL_EVENT_JOYSTICK_HAT_MOTION = 1538,
        SDL_EVENT_JOYSTICK_BUTTON_DOWN = 1539,
        SDL_EVENT_JOYSTICK_BUTTON_UP = 1540,
        SDL_EVENT_JOYSTICK_ADDED = 1541,
        SDL_EVENT_JOYSTICK_REMOVED = 1542,
        SDL_EVENT_JOYSTICK_BATTERY_UPDATED = 1543,
        SDL_EVENT_JOYSTICK_UPDATE_COMPLETE = 1544,
        SDL_EVENT_GAMEPAD_AXIS_MOTION = 1616,
        SDL_EVENT_GAMEPAD_BUTTON_DOWN = 1617,
        SDL_EVENT_GAMEPAD_BUTTON_UP = 1618,
        SDL_EVENT_GAMEPAD_ADDED = 1619,
        SDL_EVENT_GAMEPAD_REMOVED = 1620,
        SDL_EVENT_GAMEPAD_REMAPPED = 1621,
        SDL_EVENT_GAMEPAD_TOUCHPAD_DOWN = 1622,
        SDL_EVENT_GAMEPAD_TOUCHPAD_MOTION = 1623,
        SDL_EVENT_GAMEPAD_TOUCHPAD_UP = 1624,
        SDL_EVENT_GAMEPAD_SENSOR_UPDATE = 1625,
        SDL_EVENT_GAMEPAD_UPDATE_COMPLETE = 1626,
        SDL_EVENT_GAMEPAD_STEAM_HANDLE_UPDATED = 1627,
        SDL_EVENT_FINGER_DOWN = 1792,
        SDL_EVENT_FINGER_UP = 1793,
        SDL_EVENT_FINGER_MOTION = 1794,
        SDL_EVENT_CLIPBOARD_UPDATE = 2304,
        SDL_EVENT_DROP_FILE = 4096,
        SDL_EVENT_DROP_TEXT = 4097,
        SDL_EVENT_DROP_BEGIN = 4098,
        SDL_EVENT_DROP_COMPLETE = 4099,
        SDL_EVENT_DROP_POSITION = 4100,
        SDL_EVENT_AUDIO_DEVICE_ADDED = 4352,
        SDL_EVENT_AUDIO_DEVICE_REMOVED = 4353,
        SDL_EVENT_AUDIO_DEVICE_FORMAT_CHANGED = 4354,
        SDL_EVENT_SENSOR_UPDATE = 4608,
        SDL_EVENT_PEN_PROXIMITY_IN = 4864,
        SDL_EVENT_PEN_PROXIMITY_OUT = 4865,
        SDL_EVENT_PEN_DOWN = 4866,
        SDL_EVENT_PEN_UP = 4867,
        SDL_EVENT_PEN_BUTTON_DOWN = 4868,
        SDL_EVENT_PEN_BUTTON_UP = 4869,
        SDL_EVENT_PEN_MOTION = 4870,
        SDL_EVENT_PEN_AXIS = 4871,
        SDL_EVENT_CAMERA_DEVICE_ADDED = 5120,
        SDL_EVENT_CAMERA_DEVICE_REMOVED = 5121,
        SDL_EVENT_CAMERA_DEVICE_APPROVED = 5122,
        SDL_EVENT_CAMERA_DEVICE_DENIED = 5123,
        SDL_EVENT_RENDER_TARGETS_RESET = 8192,
        SDL_EVENT_RENDER_DEVICE_RESET = 8193,
        SDL_EVENT_POLL_SENTINEL = 32512,
        SDL_EVENT_USER = 32768,
        SDL_EVENT_LAST = 65535,
        SDL_EVENT_ENUM_PADDING = 2147483647,
    }

    public enum SDL_EventAction
    {
        SDL_ADDEVENT = 0,
        SDL_PEEKEVENT = 1,
        SDL_GETEVENT = 2,
    }

    public enum SDL_Folder
    {
        SDL_FOLDER_HOME = 0,
        SDL_FOLDER_DESKTOP = 1,
        SDL_FOLDER_DOCUMENTS = 2,
        SDL_FOLDER_DOWNLOADS = 3,
        SDL_FOLDER_MUSIC = 4,
        SDL_FOLDER_PICTURES = 5,
        SDL_FOLDER_PUBLICSHARE = 6,
        SDL_FOLDER_SAVEDGAMES = 7,
        SDL_FOLDER_SCREENSHOTS = 8,
        SDL_FOLDER_TEMPLATES = 9,
        SDL_FOLDER_VIDEOS = 10,
        SDL_FOLDER_TOTAL = 11,
    }

    public enum SDL_PathType
    {
        SDL_PATHTYPE_NONE = 0,
        SDL_PATHTYPE_FILE = 1,
        SDL_PATHTYPE_DIRECTORY = 2,
        SDL_PATHTYPE_OTHER = 3,
    }

    public enum SDL_GpuPrimitiveType
    {
        SDL_GPU_PRIMITIVETYPE_POINTLIST = 0,
        SDL_GPU_PRIMITIVETYPE_LINELIST = 1,
        SDL_GPU_PRIMITIVETYPE_LINESTRIP = 2,
        SDL_GPU_PRIMITIVETYPE_TRIANGLELIST = 3,
        SDL_GPU_PRIMITIVETYPE_TRIANGLESTRIP = 4,
    }

    public enum SDL_GpuLoadOp
    {
        SDL_GPU_LOADOP_LOAD = 0,
        SDL_GPU_LOADOP_CLEAR = 1,
        SDL_GPU_LOADOP_DONT_CARE = 2,
    }

    public enum SDL_GpuStoreOp
    {
        SDL_GPU_STOREOP_STORE = 0,
        SDL_GPU_STOREOP_DONT_CARE = 1,
    }

    public enum SDL_GpuIndexElementSize
    {
        SDL_GPU_INDEXELEMENTSIZE_16BIT = 0,
        SDL_GPU_INDEXELEMENTSIZE_32BIT = 1,
    }

    public enum SDL_GpuTextureFormat
    {
        SDL_GPU_TEXTUREFORMAT_INVALID = -1,
        SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM = 0,
        SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM = 1,
        SDL_GPU_TEXTUREFORMAT_B5G6R5_UNORM = 2,
        SDL_GPU_TEXTUREFORMAT_B5G5R5A1_UNORM = 3,
        SDL_GPU_TEXTUREFORMAT_B4G4R4A4_UNORM = 4,
        SDL_GPU_TEXTUREFORMAT_R10G10B10A2_UNORM = 5,
        SDL_GPU_TEXTUREFORMAT_R16G16_UNORM = 6,
        SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UNORM = 7,
        SDL_GPU_TEXTUREFORMAT_R8_UNORM = 8,
        SDL_GPU_TEXTUREFORMAT_A8_UNORM = 9,
        SDL_GPU_TEXTUREFORMAT_BC1_UNORM = 10,
        SDL_GPU_TEXTUREFORMAT_BC2_UNORM = 11,
        SDL_GPU_TEXTUREFORMAT_BC3_UNORM = 12,
        SDL_GPU_TEXTUREFORMAT_BC7_UNORM = 13,
        SDL_GPU_TEXTUREFORMAT_R8G8_SNORM = 14,
        SDL_GPU_TEXTUREFORMAT_R8G8B8A8_SNORM = 15,
        SDL_GPU_TEXTUREFORMAT_R16_FLOAT = 16,
        SDL_GPU_TEXTUREFORMAT_R16G16_FLOAT = 17,
        SDL_GPU_TEXTUREFORMAT_R16G16B16A16_FLOAT = 18,
        SDL_GPU_TEXTUREFORMAT_R32_FLOAT = 19,
        SDL_GPU_TEXTUREFORMAT_R32G32_FLOAT = 20,
        SDL_GPU_TEXTUREFORMAT_R32G32B32A32_FLOAT = 21,
        SDL_GPU_TEXTUREFORMAT_R8_UINT = 22,
        SDL_GPU_TEXTUREFORMAT_R8G8_UINT = 23,
        SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UINT = 24,
        SDL_GPU_TEXTUREFORMAT_R16_UINT = 25,
        SDL_GPU_TEXTUREFORMAT_R16G16_UINT = 26,
        SDL_GPU_TEXTUREFORMAT_R16G16B16A16_UINT = 27,
        SDL_GPU_TEXTUREFORMAT_R8G8B8A8_UNORM_SRGB = 28,
        SDL_GPU_TEXTUREFORMAT_B8G8R8A8_UNORM_SRGB = 29,
        SDL_GPU_TEXTUREFORMAT_BC3_UNORM_SRGB = 30,
        SDL_GPU_TEXTUREFORMAT_BC7_UNORM_SRGB = 31,
        SDL_GPU_TEXTUREFORMAT_D16_UNORM = 32,
        SDL_GPU_TEXTUREFORMAT_D24_UNORM = 33,
        SDL_GPU_TEXTUREFORMAT_D32_FLOAT = 34,
        SDL_GPU_TEXTUREFORMAT_D24_UNORM_S8_UINT = 35,
        SDL_GPU_TEXTUREFORMAT_D32_FLOAT_S8_UINT = 36,
    }

    public enum SDL_GpuTextureUsageFlagBits
    {
        SDL_GPU_TEXTUREUSAGE_SAMPLER_BIT = 1,
        SDL_GPU_TEXTUREUSAGE_COLOR_TARGET_BIT = 2,
        SDL_GPU_TEXTUREUSAGE_DEPTH_STENCIL_TARGET_BIT = 4,
        SDL_GPU_TEXTUREUSAGE_GRAPHICS_STORAGE_READ_BIT = 8,
        SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_READ_BIT = 32,
        SDL_GPU_TEXTUREUSAGE_COMPUTE_STORAGE_WRITE_BIT = 64,
    }

    public enum SDL_GpuTextureType
    {
        SDL_GPU_TEXTURETYPE_2D = 0,
        SDL_GPU_TEXTURETYPE_2D_ARRAY = 1,
        SDL_GPU_TEXTURETYPE_3D = 2,
        SDL_GPU_TEXTURETYPE_CUBE = 3,
    }

    public enum SDL_GpuSampleCount
    {
        SDL_GPU_SAMPLECOUNT_1 = 0,
        SDL_GPU_SAMPLECOUNT_2 = 1,
        SDL_GPU_SAMPLECOUNT_4 = 2,
        SDL_GPU_SAMPLECOUNT_8 = 3,
    }

    public enum SDL_GpuCubeMapFace
    {
        SDL_GPU_CUBEMAPFACE_POSITIVEX = 0,
        SDL_GPU_CUBEMAPFACE_NEGATIVEX = 1,
        SDL_GPU_CUBEMAPFACE_POSITIVEY = 2,
        SDL_GPU_CUBEMAPFACE_NEGATIVEY = 3,
        SDL_GPU_CUBEMAPFACE_POSITIVEZ = 4,
        SDL_GPU_CUBEMAPFACE_NEGATIVEZ = 5,
    }

    public enum SDL_GpuBufferUsageFlagBits
    {
        SDL_GPU_BUFFERUSAGE_VERTEX_BIT = 1,
        SDL_GPU_BUFFERUSAGE_INDEX_BIT = 2,
        SDL_GPU_BUFFERUSAGE_INDIRECT_BIT = 4,
        SDL_GPU_BUFFERUSAGE_GRAPHICS_STORAGE_READ_BIT = 8,
        SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_READ_BIT = 32,
        SDL_GPU_BUFFERUSAGE_COMPUTE_STORAGE_WRITE_BIT = 64,
    }

    public enum SDL_GpuTransferBufferUsage
    {
        SDL_GPU_TRANSFERBUFFERUSAGE_UPLOAD = 0,
        SDL_GPU_TRANSFERBUFFERUSAGE_DOWNLOAD = 1,
    }

    public enum SDL_GpuShaderStage
    {
        SDL_GPU_SHADERSTAGE_VERTEX = 0,
        SDL_GPU_SHADERSTAGE_FRAGMENT = 1,
    }

    public enum SDL_GpuShaderFormatFlagBits
    {
        SDL_GPU_SHADERFORMAT_INVALID = 0,
        SDL_GPU_SHADERFORMAT_SECRET = 1,
        SDL_GPU_SHADERFORMAT_SPIRV = 2,
        SDL_GPU_SHADERFORMAT_DXBC = 4,
        SDL_GPU_SHADERFORMAT_DXIL = 8,
        SDL_GPU_SHADERFORMAT_MSL = 16,
        SDL_GPU_SHADERFORMAT_METALLIB = 32,
    }

    public enum SDL_GpuVertexElementFormat
    {
        SDL_GPU_VERTEXELEMENTFORMAT_INT = 0,
        SDL_GPU_VERTEXELEMENTFORMAT_INT2 = 1,
        SDL_GPU_VERTEXELEMENTFORMAT_INT3 = 2,
        SDL_GPU_VERTEXELEMENTFORMAT_INT4 = 3,
        SDL_GPU_VERTEXELEMENTFORMAT_UINT = 4,
        SDL_GPU_VERTEXELEMENTFORMAT_UINT2 = 5,
        SDL_GPU_VERTEXELEMENTFORMAT_UINT3 = 6,
        SDL_GPU_VERTEXELEMENTFORMAT_UINT4 = 7,
        SDL_GPU_VERTEXELEMENTFORMAT_FLOAT = 8,
        SDL_GPU_VERTEXELEMENTFORMAT_FLOAT2 = 9,
        SDL_GPU_VERTEXELEMENTFORMAT_FLOAT3 = 10,
        SDL_GPU_VERTEXELEMENTFORMAT_FLOAT4 = 11,
        SDL_GPU_VERTEXELEMENTFORMAT_BYTE2 = 12,
        SDL_GPU_VERTEXELEMENTFORMAT_BYTE4 = 13,
        SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2 = 14,
        SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4 = 15,
        SDL_GPU_VERTEXELEMENTFORMAT_BYTE2_NORM = 16,
        SDL_GPU_VERTEXELEMENTFORMAT_BYTE4_NORM = 17,
        SDL_GPU_VERTEXELEMENTFORMAT_UBYTE2_NORM = 18,
        SDL_GPU_VERTEXELEMENTFORMAT_UBYTE4_NORM = 19,
        SDL_GPU_VERTEXELEMENTFORMAT_SHORT2 = 20,
        SDL_GPU_VERTEXELEMENTFORMAT_SHORT4 = 21,
        SDL_GPU_VERTEXELEMENTFORMAT_USHORT2 = 22,
        SDL_GPU_VERTEXELEMENTFORMAT_USHORT4 = 23,
        SDL_GPU_VERTEXELEMENTFORMAT_SHORT2_NORM = 24,
        SDL_GPU_VERTEXELEMENTFORMAT_SHORT4_NORM = 25,
        SDL_GPU_VERTEXELEMENTFORMAT_USHORT2_NORM = 26,
        SDL_GPU_VERTEXELEMENTFORMAT_USHORT4_NORM = 27,
        SDL_GPU_VERTEXELEMENTFORMAT_HALF2 = 28,
        SDL_GPU_VERTEXELEMENTFORMAT_HALF4 = 29,
    }

    public enum SDL_GpuVertexInputRate
    {
        SDL_GPU_VERTEXINPUTRATE_VERTEX = 0,
        SDL_GPU_VERTEXINPUTRATE_INSTANCE = 1,
    }

    public enum SDL_GpuFillMode
    {
        SDL_GPU_FILLMODE_FILL = 0,
        SDL_GPU_FILLMODE_LINE = 1,
    }

    public enum SDL_GpuCullMode
    {
        SDL_GPU_CULLMODE_NONE = 0,
        SDL_GPU_CULLMODE_FRONT = 1,
        SDL_GPU_CULLMODE_BACK = 2,
    }

    public enum SDL_GpuFrontFace
    {
        SDL_GPU_FRONTFACE_COUNTER_CLOCKWISE = 0,
        SDL_GPU_FRONTFACE_CLOCKWISE = 1,
    }

    public enum SDL_GpuCompareOp
    {
        SDL_GPU_COMPAREOP_NEVER = 0,
        SDL_GPU_COMPAREOP_LESS = 1,
        SDL_GPU_COMPAREOP_EQUAL = 2,
        SDL_GPU_COMPAREOP_LESS_OR_EQUAL = 3,
        SDL_GPU_COMPAREOP_GREATER = 4,
        SDL_GPU_COMPAREOP_NOT_EQUAL = 5,
        SDL_GPU_COMPAREOP_GREATER_OR_EQUAL = 6,
        SDL_GPU_COMPAREOP_ALWAYS = 7,
    }

    public enum SDL_GpuStencilOp
    {
        SDL_GPU_STENCILOP_KEEP = 0,
        SDL_GPU_STENCILOP_ZERO = 1,
        SDL_GPU_STENCILOP_REPLACE = 2,
        SDL_GPU_STENCILOP_INCREMENT_AND_CLAMP = 3,
        SDL_GPU_STENCILOP_DECREMENT_AND_CLAMP = 4,
        SDL_GPU_STENCILOP_INVERT = 5,
        SDL_GPU_STENCILOP_INCREMENT_AND_WRAP = 6,
        SDL_GPU_STENCILOP_DECREMENT_AND_WRAP = 7,
    }

    public enum SDL_GpuBlendOp
    {
        SDL_GPU_BLENDOP_ADD = 0,
        SDL_GPU_BLENDOP_SUBTRACT = 1,
        SDL_GPU_BLENDOP_REVERSE_SUBTRACT = 2,
        SDL_GPU_BLENDOP_MIN = 3,
        SDL_GPU_BLENDOP_MAX = 4,
    }

    public enum SDL_GpuBlendFactor
    {
        SDL_GPU_BLENDFACTOR_ZERO = 0,
        SDL_GPU_BLENDFACTOR_ONE = 1,
        SDL_GPU_BLENDFACTOR_SRC_COLOR = 2,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_COLOR = 3,
        SDL_GPU_BLENDFACTOR_DST_COLOR = 4,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_COLOR = 5,
        SDL_GPU_BLENDFACTOR_SRC_ALPHA = 6,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_SRC_ALPHA = 7,
        SDL_GPU_BLENDFACTOR_DST_ALPHA = 8,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_DST_ALPHA = 9,
        SDL_GPU_BLENDFACTOR_CONSTANT_COLOR = 10,
        SDL_GPU_BLENDFACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
        SDL_GPU_BLENDFACTOR_SRC_ALPHA_SATURATE = 12,
    }

    public enum SDL_GpuColorComponentFlagBits
    {
        SDL_GPU_COLORCOMPONENT_R_BIT = 1,
        SDL_GPU_COLORCOMPONENT_G_BIT = 2,
        SDL_GPU_COLORCOMPONENT_B_BIT = 4,
        SDL_GPU_COLORCOMPONENT_A_BIT = 8,
    }

    public enum SDL_GpuFilter
    {
        SDL_GPU_FILTER_NEAREST = 0,
        SDL_GPU_FILTER_LINEAR = 1,
    }

    public enum SDL_GpuSamplerMipmapMode
    {
        SDL_GPU_SAMPLERMIPMAPMODE_NEAREST = 0,
        SDL_GPU_SAMPLERMIPMAPMODE_LINEAR = 1,
    }

    public enum SDL_GpuSamplerAddressMode
    {
        SDL_GPU_SAMPLERADDRESSMODE_REPEAT = 0,
        SDL_GPU_SAMPLERADDRESSMODE_MIRRORED_REPEAT = 1,
        SDL_GPU_SAMPLERADDRESSMODE_CLAMP_TO_EDGE = 2,
    }

    public enum SDL_GpuPresentMode
    {
        SDL_GPU_PRESENTMODE_VSYNC = 0,
        SDL_GPU_PRESENTMODE_IMMEDIATE = 1,
        SDL_GPU_PRESENTMODE_MAILBOX = 2,
    }

    public enum SDL_GpuSwapchainComposition
    {
        SDL_GPU_SWAPCHAINCOMPOSITION_SDR = 0,
        SDL_GPU_SWAPCHAINCOMPOSITION_SDR_LINEAR = 1,
        SDL_GPU_SWAPCHAINCOMPOSITION_HDR_EXTENDED_LINEAR = 2,
        SDL_GPU_SWAPCHAINCOMPOSITION_HDR10_ST2048 = 3,
    }

    public enum SDL_GpuDriver
    {
        SDL_GPU_DRIVER_INVALID = -1,
        SDL_GPU_DRIVER_SECRET = 0,
        SDL_GPU_DRIVER_VULKAN = 1,
        SDL_GPU_DRIVER_D3D11 = 2,
        SDL_GPU_DRIVER_D3D12 = 3,
        SDL_GPU_DRIVER_METAL = 4,
    }

    public enum SDL_hid_bus_type
    {
        SDL_HID_API_BUS_UNKNOWN = 0,
        SDL_HID_API_BUS_USB = 1,
        SDL_HID_API_BUS_BLUETOOTH = 2,
        SDL_HID_API_BUS_I2C = 3,
        SDL_HID_API_BUS_SPI = 4,
    }

    public enum SDL_HintPriority
    {
        SDL_HINT_DEFAULT = 0,
        SDL_HINT_NORMAL = 1,
        SDL_HINT_OVERRIDE = 2,
    }

    public enum SDL_AppResult
    {
        SDL_APP_CONTINUE = 0,
        SDL_APP_SUCCESS = 1,
        SDL_APP_FAILURE = 2,
    }

    public enum SDL_LogCategory
    {
        SDL_LOG_CATEGORY_APPLICATION = 0,
        SDL_LOG_CATEGORY_ERROR = 1,
        SDL_LOG_CATEGORY_ASSERT = 2,
        SDL_LOG_CATEGORY_SYSTEM = 3,
        SDL_LOG_CATEGORY_AUDIO = 4,
        SDL_LOG_CATEGORY_VIDEO = 5,
        SDL_LOG_CATEGORY_RENDER = 6,
        SDL_LOG_CATEGORY_GPU = 7,
        SDL_LOG_CATEGORY_INPUT = 8,
        SDL_LOG_CATEGORY_TEST = 9,
        SDL_LOG_CATEGORY_RESERVED1 = 10,
        SDL_LOG_CATEGORY_RESERVED2 = 11,
        SDL_LOG_CATEGORY_RESERVED3 = 12,
        SDL_LOG_CATEGORY_RESERVED4 = 13,
        SDL_LOG_CATEGORY_RESERVED5 = 14,
        SDL_LOG_CATEGORY_RESERVED6 = 15,
        SDL_LOG_CATEGORY_RESERVED7 = 16,
        SDL_LOG_CATEGORY_RESERVED8 = 17,
        SDL_LOG_CATEGORY_RESERVED9 = 18,
        SDL_LOG_CATEGORY_RESERVED10 = 19,
        SDL_LOG_CATEGORY_CUSTOM = 20,
    }

    public enum SDL_LogPriority
    {
        SDL_LOG_PRIORITY_VERBOSE = 1,
        SDL_LOG_PRIORITY_DEBUG = 2,
        SDL_LOG_PRIORITY_INFO = 3,
        SDL_LOG_PRIORITY_WARN = 4,
        SDL_LOG_PRIORITY_ERROR = 5,
        SDL_LOG_PRIORITY_CRITICAL = 6,
        SDL_NUM_LOG_PRIORITIES = 7,
    }

    public enum SDL_MessageBoxColorType
    {
        SDL_MESSAGEBOX_COLOR_BACKGROUND = 0,
        SDL_MESSAGEBOX_COLOR_TEXT = 1,
        SDL_MESSAGEBOX_COLOR_BUTTON_BORDER = 2,
        SDL_MESSAGEBOX_COLOR_BUTTON_BACKGROUND = 3,
        SDL_MESSAGEBOX_COLOR_BUTTON_SELECTED = 4,
        SDL_MESSAGEBOX_COLOR_MAX = 5,
    }

    public enum SDL_TextureAccess
    {
        SDL_TEXTUREACCESS_STATIC = 0,
        SDL_TEXTUREACCESS_STREAMING = 1,
        SDL_TEXTUREACCESS_TARGET = 2,
    }

    public enum SDL_RendererLogicalPresentation
    {
        SDL_LOGICAL_PRESENTATION_DISABLED = 0,
        SDL_LOGICAL_PRESENTATION_STRETCH = 1,
        SDL_LOGICAL_PRESENTATION_LETTERBOX = 2,
        SDL_LOGICAL_PRESENTATION_OVERSCAN = 3,
        SDL_LOGICAL_PRESENTATION_INTEGER_SCALE = 4,
    }

    public enum SDL_DateFormat
    {
        SDL_DATE_FORMAT_YYYYMMDD = 0,
        SDL_DATE_FORMAT_DDMMYYYY = 1,
        SDL_DATE_FORMAT_MMDDYYYY = 2,
    }

    public enum SDL_TimeFormat
    {
        SDL_TIME_FORMAT_24HR = 0,
        SDL_TIME_FORMAT_12HR = 1,
    }


    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_iconv_data_t
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AssertData
    {
        public int always_ignore;
        public uint trigger_count;
        public IntPtr condition;
        public IntPtr filename;
        public int linenum;
        public IntPtr function;
        public IntPtr next;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AtomicInt
    {
        public int value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Mutex
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_RWLock
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Semaphore
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Condition
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_IOStreamInterface
    {
        public IntPtr size;
        public IntPtr seek;
        public IntPtr read;
        public IntPtr write;
        public IntPtr close;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_IOStream
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Thread
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioSpec
    {
        public SDL_AudioFormat format;
        public int channels;
        public int freq;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioStream
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Color
    {
        public byte r;
        public byte g;
        public byte b;
        public byte a;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_FColor
    {
        public float r;
        public float g;
        public float b;
        public float a;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Palette
    {
        public int ncolors;
        public IntPtr colors;
        public UInt32 version;
        public int refcount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_PixelFormatDetails
    {
        public SDL_PixelFormat format;
        public byte bits_per_pixel;
        public byte bytes_per_pixel;
        public byte[] padding;
        public UInt32 Rmask;
        public UInt32 Gmask;
        public UInt32 Bmask;
        public UInt32 Amask;
        public byte Rbits;
        public byte Gbits;
        public byte Bbits;
        public byte Abits;
        public byte Rshift;
        public byte Gshift;
        public byte Bshift;
        public byte Ashift;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Point
    {
        public int x;
        public int y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_FPoint
    {
        public float x;
        public float y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Rect
    {
        public int x;
        public int y;
        public int w;
        public int h;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_FRect
    {
        public float x;
        public float y;
        public float w;
        public float h;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_SurfaceData
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Surface
    {
        public UInt32 flags;
        public SDL_PixelFormat format;
        public int w;
        public int h;
        public int pitch;
        public IntPtr pixels;
        public int refcount;
        public IntPtr @internal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_DisplayModeData
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_DisplayMode
    {
        public UInt32 displayID;
        public SDL_PixelFormat format;
        public int w;
        public int h;
        public float pixel_density;
        public float refresh_rate;
        public int refresh_rate_numerator;
        public int refresh_rate_denominator;
        public IntPtr @internal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Window
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GLContextState
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Camera
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_CameraSpec
    {
        public SDL_PixelFormat format;
        public SDL_Colorspace colorspace;
        public int width;
        public int height;
        public int framerate_numerator;
        public int framerate_denominator;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_DialogFileFilter
    {
        public IntPtr name;
        public IntPtr pattern;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GUID
    {
        public byte[] data;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Sensor
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Joystick
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_VirtualJoystickTouchpadDesc
    {
        public UInt16 nfingers;
        public UInt16[] padding;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_VirtualJoystickSensorDesc
    {
        public SDL_SensorType type;
        public float rate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_VirtualJoystickDesc
    {
        public UInt16 type;
        public UInt16 padding;
        public UInt16 vendor_id;
        public UInt16 product_id;
        public UInt16 naxes;
        public UInt16 nbuttons;
        public UInt16 nballs;
        public UInt16 nhats;
        public UInt16 ntouchpads;
        public UInt16 nsensors;
        public UInt16[] padding2;
        public UInt32 button_mask;
        public UInt32 axis_mask;
        public IntPtr name;
        public IntPtr touchpads;
        public IntPtr sensors;
        public IntPtr userdata;
        public IntPtr Update;
        public IntPtr SetPlayerIndex;
        public IntPtr Rumble;
        public IntPtr RumbleTriggers;
        public IntPtr SetLED;
        public IntPtr SendEffect;
        public IntPtr SetSensorsEnabled;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Gamepad
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GamepadBinding
    {
        public SDL_GamepadBindingType input_type;
        // public UNION_SDL_GamepadBinding_input input; // TODO: unhandled union
        public SDL_GamepadBindingType output_type;
        // public UNION_SDL_GamepadBinding_output output; // TODO: unhandled union
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Cursor
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Finger
    {
        public UInt64 id;
        public float x;
        public float y;
        public float pressure;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_CommonEvent
    {
        public UInt32 type;
        public UInt32 reserved;
        public UInt64 timestamp;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_DisplayEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 displayID;
        public Int32 data1;
        public Int32 data2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_WindowEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public Int32 data1;
        public Int32 data2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_KeyboardDeviceEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_KeyboardEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public UInt32 which;
        public SDL_Scancode scancode;
        public UInt32 key;
        public UInt16 mod;
        public UInt16 raw;
        public byte state;
        public byte repeat;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_TextEditingEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public IntPtr text;
        public Int32 start;
        public Int32 length;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_TextEditingCandidatesEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public IntPtr candidates;
        public Int32 num_candidates;
        public Int32 selected_candidate;
        public int horizontal;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_TextInputEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public IntPtr text;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_MouseDeviceEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_MouseMotionEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public UInt32 which;
        public UInt32 state;
        public float x;
        public float y;
        public float xrel;
        public float yrel;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_MouseButtonEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public UInt32 which;
        public byte button;
        public byte state;
        public byte clicks;
        public byte padding;
        public float x;
        public float y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_MouseWheelEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public UInt32 which;
        public float x;
        public float y;
        public SDL_MouseWheelDirection direction;
        public float mouse_x;
        public float mouse_y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_JoyAxisEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public byte axis;
        public byte padding1;
        public byte padding2;
        public byte padding3;
        public Int16 value;
        public UInt16 padding4;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_JoyBallEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public byte ball;
        public byte padding1;
        public byte padding2;
        public byte padding3;
        public Int16 xrel;
        public Int16 yrel;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_JoyHatEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public byte hat;
        public byte value;
        public byte padding1;
        public byte padding2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_JoyButtonEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public byte button;
        public byte state;
        public byte padding1;
        public byte padding2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_JoyDeviceEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_JoyBatteryEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public SDL_PowerState state;
        public int percent;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GamepadAxisEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public byte axis;
        public byte padding1;
        public byte padding2;
        public byte padding3;
        public Int16 value;
        public UInt16 padding4;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GamepadButtonEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public byte button;
        public byte state;
        public byte padding1;
        public byte padding2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GamepadDeviceEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GamepadTouchpadEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public Int32 touchpad;
        public Int32 finger;
        public float x;
        public float y;
        public float pressure;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GamepadSensorEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public Int32 sensor;
        public float[] data;
        public UInt64 sensor_timestamp;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_AudioDeviceEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public byte recording;
        public byte padding1;
        public byte padding2;
        public byte padding3;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_CameraDeviceEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_TouchFingerEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt64 touchID;
        public UInt64 fingerID;
        public float x;
        public float y;
        public float dx;
        public float dy;
        public float pressure;
        public UInt32 windowID;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_PenProximityEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public UInt32 which;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_PenMotionEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public UInt32 which;
        public UInt32 pen_state;
        public float x;
        public float y;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_PenTouchEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public UInt32 which;
        public UInt32 pen_state;
        public float x;
        public float y;
        public byte eraser;
        public byte state;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_PenButtonEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public UInt32 which;
        public UInt32 pen_state;
        public float x;
        public float y;
        public byte button;
        public byte state;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_PenAxisEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public UInt32 which;
        public UInt32 pen_state;
        public float x;
        public float y;
        public SDL_PenAxis axis;
        public float value;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_DropEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public float x;
        public float y;
        public IntPtr source;
        public IntPtr data;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_ClipboardEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_SensorEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 which;
        public float[] data;
        public UInt64 sensor_timestamp;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_QuitEvent
    {
        public SDL_EventType type;
        public UInt32 reserved;
        public UInt64 timestamp;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_UserEvent
    {
        public UInt32 type;
        public UInt32 reserved;
        public UInt64 timestamp;
        public UInt32 windowID;
        public Int32 code;
        public IntPtr data1;
        public IntPtr data2;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_PathInfo
    {
        public SDL_PathType type;
        public UInt64 size;
        public Int64 create_time;
        public Int64 modify_time;
        public Int64 access_time;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuDevice
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuBuffer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuTransferBuffer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuTexture
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuSampler
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuShader
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuComputePipeline
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuGraphicsPipeline
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuCommandBuffer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuRenderPass
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuComputePass
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuCopyPass
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuFence
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuDepthStencilValue
    {
        public float depth;
        public byte stencil;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuViewport
    {
        public float x;
        public float y;
        public float w;
        public float h;
        public float minDepth;
        public float maxDepth;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuTextureTransferInfo
    {
        public IntPtr transferBuffer;
        public UInt32 offset;
        public UInt32 imagePitch;
        public UInt32 imageHeight;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuTransferBufferLocation
    {
        public IntPtr transferBuffer;
        public UInt32 offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuTextureLocation
    {
        public IntPtr texture;
        public UInt32 mipLevel;
        public UInt32 layer;
        public UInt32 x;
        public UInt32 y;
        public UInt32 z;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuTextureRegion
    {
        public IntPtr texture;
        public UInt32 mipLevel;
        public UInt32 layer;
        public UInt32 x;
        public UInt32 y;
        public UInt32 z;
        public UInt32 w;
        public UInt32 h;
        public UInt32 d;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuBlitRegion
    {
        public IntPtr texture;
        public UInt32 mipLevel;
        public UInt32 layerOrDepthPlane;
        public UInt32 x;
        public UInt32 y;
        public UInt32 w;
        public UInt32 h;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuBufferLocation
    {
        public IntPtr buffer;
        public UInt32 offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuBufferRegion
    {
        public IntPtr buffer;
        public UInt32 offset;
        public UInt32 size;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuIndirectDrawCommand
    {
        public UInt32 vertexCount;
        public UInt32 instanceCount;
        public UInt32 firstVertex;
        public UInt32 firstInstance;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuIndexedIndirectDrawCommand
    {
        public UInt32 indexCount;
        public UInt32 instanceCount;
        public UInt32 firstIndex;
        public UInt32 vertexOffset;
        public UInt32 firstInstance;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuIndirectDispatchCommand
    {
        public UInt32 groupCountX;
        public UInt32 groupCountY;
        public UInt32 groupCountZ;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuSamplerCreateInfo
    {
        public SDL_GpuFilter minFilter;
        public SDL_GpuFilter magFilter;
        public SDL_GpuSamplerMipmapMode mipmapMode;
        public SDL_GpuSamplerAddressMode addressModeU;
        public SDL_GpuSamplerAddressMode addressModeV;
        public SDL_GpuSamplerAddressMode addressModeW;
        public float mipLodBias;
        public int anisotropyEnable;
        public float maxAnisotropy;
        public int compareEnable;
        public SDL_GpuCompareOp compareOp;
        public float minLod;
        public float maxLod;
        public UInt32 props;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuVertexBinding
    {
        public UInt32 binding;
        public UInt32 stride;
        public SDL_GpuVertexInputRate inputRate;
        public UInt32 instanceStepRate;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuVertexAttribute
    {
        public UInt32 location;
        public UInt32 binding;
        public SDL_GpuVertexElementFormat format;
        public UInt32 offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuVertexInputState
    {
        public IntPtr vertexBindings;
        public UInt32 vertexBindingCount;
        public IntPtr vertexAttributes;
        public UInt32 vertexAttributeCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuStencilOpState
    {
        public SDL_GpuStencilOp failOp;
        public SDL_GpuStencilOp passOp;
        public SDL_GpuStencilOp depthFailOp;
        public SDL_GpuCompareOp compareOp;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuColorAttachmentBlendState
    {
        public int blendEnable;
        public SDL_GpuBlendFactor srcColorBlendFactor;
        public SDL_GpuBlendFactor dstColorBlendFactor;
        public SDL_GpuBlendOp colorBlendOp;
        public SDL_GpuBlendFactor srcAlphaBlendFactor;
        public SDL_GpuBlendFactor dstAlphaBlendFactor;
        public SDL_GpuBlendOp alphaBlendOp;
        public byte colorWriteMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuShaderCreateInfo
    {
        public UInt32 codeSize;
        public IntPtr code;
        public IntPtr entryPointName;
        public UInt32 format;
        public SDL_GpuShaderStage stage;
        public UInt32 samplerCount;
        public UInt32 storageTextureCount;
        public UInt32 storageBufferCount;
        public UInt32 uniformBufferCount;
        public UInt32 props;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuTextureCreateInfo
    {
        public SDL_GpuTextureType type;
        public SDL_GpuTextureFormat format;
        public UInt32 usageFlags;
        public UInt32 width;
        public UInt32 height;
        public UInt32 layerCountOrDepth;
        public UInt32 levelCount;
        public SDL_GpuSampleCount sampleCount;
        public UInt32 props;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuBufferCreateInfo
    {
        public UInt32 usageFlags;
        public UInt32 sizeInBytes;
        public UInt32 props;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuTransferBufferCreateInfo
    {
        public SDL_GpuTransferBufferUsage usage;
        public UInt32 sizeInBytes;
        public UInt32 props;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuRasterizerState
    {
        public SDL_GpuFillMode fillMode;
        public SDL_GpuCullMode cullMode;
        public SDL_GpuFrontFace frontFace;
        public int depthBiasEnable;
        public float depthBiasConstantFactor;
        public float depthBiasClamp;
        public float depthBiasSlopeFactor;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuMultisampleState
    {
        public SDL_GpuSampleCount sampleCount;
        public UInt32 sampleMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuDepthStencilState
    {
        public int depthTestEnable;
        public int depthWriteEnable;
        public SDL_GpuCompareOp compareOp;
        public int stencilTestEnable;
        public SDL_GpuStencilOpState backStencilState;
        public SDL_GpuStencilOpState frontStencilState;
        public byte compareMask;
        public byte writeMask;
        public byte reference;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuColorAttachmentDescription
    {
        public SDL_GpuTextureFormat format;
        public SDL_GpuColorAttachmentBlendState blendState;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuGraphicsPipelineAttachmentInfo
    {
        public IntPtr colorAttachmentDescriptions;
        public UInt32 colorAttachmentCount;
        public int hasDepthStencilAttachment;
        public SDL_GpuTextureFormat depthStencilFormat;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuGraphicsPipelineCreateInfo
    {
        public IntPtr vertexShader;
        public IntPtr fragmentShader;
        public SDL_GpuVertexInputState vertexInputState;
        public SDL_GpuPrimitiveType primitiveType;
        public SDL_GpuRasterizerState rasterizerState;
        public SDL_GpuMultisampleState multisampleState;
        public SDL_GpuDepthStencilState depthStencilState;
        public SDL_GpuGraphicsPipelineAttachmentInfo attachmentInfo;
        public float[] blendConstants;
        public UInt32 props;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuComputePipelineCreateInfo
    {
        public UInt32 codeSize;
        public IntPtr code;
        public IntPtr entryPointName;
        public UInt32 format;
        public UInt32 readOnlyStorageTextureCount;
        public UInt32 readOnlyStorageBufferCount;
        public UInt32 writeOnlyStorageTextureCount;
        public UInt32 writeOnlyStorageBufferCount;
        public UInt32 uniformBufferCount;
        public UInt32 threadCountX;
        public UInt32 threadCountY;
        public UInt32 threadCountZ;
        public UInt32 props;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuColorAttachmentInfo
    {
        public IntPtr texture;
        public UInt32 mipLevel;
        public UInt32 layerOrDepthPlane;
        public SDL_FColor clearColor;
        public SDL_GpuLoadOp loadOp;
        public SDL_GpuStoreOp storeOp;
        public int cycle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuDepthStencilAttachmentInfo
    {
        public IntPtr texture;
        public SDL_GpuDepthStencilValue depthStencilClearValue;
        public SDL_GpuLoadOp loadOp;
        public SDL_GpuStoreOp storeOp;
        public SDL_GpuLoadOp stencilLoadOp;
        public SDL_GpuStoreOp stencilStoreOp;
        public int cycle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuBufferBinding
    {
        public IntPtr buffer;
        public UInt32 offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuTextureSamplerBinding
    {
        public IntPtr texture;
        public IntPtr sampler;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuStorageBufferWriteOnlyBinding
    {
        public IntPtr buffer;
        public int cycle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_GpuStorageTextureWriteOnlyBinding
    {
        public IntPtr texture;
        public UInt32 mipLevel;
        public UInt32 layer;
        public int cycle;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Haptic
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HapticDirection
    {
        public byte type;
        public Int32[] dir;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HapticConstant
    {
        public UInt16 type;
        public SDL_HapticDirection direction;
        public UInt32 length;
        public UInt16 delay;
        public UInt16 button;
        public UInt16 interval;
        public Int16 level;
        public UInt16 attack_length;
        public UInt16 attack_level;
        public UInt16 fade_length;
        public UInt16 fade_level;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HapticPeriodic
    {
        public UInt16 type;
        public SDL_HapticDirection direction;
        public UInt32 length;
        public UInt16 delay;
        public UInt16 button;
        public UInt16 interval;
        public UInt16 period;
        public Int16 magnitude;
        public Int16 offset;
        public UInt16 phase;
        public UInt16 attack_length;
        public UInt16 attack_level;
        public UInt16 fade_length;
        public UInt16 fade_level;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HapticCondition
    {
        public UInt16 type;
        public SDL_HapticDirection direction;
        public UInt32 length;
        public UInt16 delay;
        public UInt16 button;
        public UInt16 interval;
        public UInt16[] right_sat;
        public UInt16[] left_sat;
        public Int16[] right_coeff;
        public Int16[] left_coeff;
        public UInt16[] deadband;
        public Int16[] center;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HapticRamp
    {
        public UInt16 type;
        public SDL_HapticDirection direction;
        public UInt32 length;
        public UInt16 delay;
        public UInt16 button;
        public UInt16 interval;
        public Int16 start;
        public Int16 end;
        public UInt16 attack_length;
        public UInt16 attack_level;
        public UInt16 fade_length;
        public UInt16 fade_level;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HapticLeftRight
    {
        public UInt16 type;
        public UInt32 length;
        public UInt16 large_magnitude;
        public UInt16 small_magnitude;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_HapticCustom
    {
        public UInt16 type;
        public SDL_HapticDirection direction;
        public UInt32 length;
        public UInt16 delay;
        public UInt16 button;
        public UInt16 interval;
        public byte channels;
        public UInt16 period;
        public UInt16 samples;
        public IntPtr data;
        public UInt16 attack_length;
        public UInt16 attack_level;
        public UInt16 fade_length;
        public UInt16 fade_level;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_hid_device
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_hid_device_info
    {
        public IntPtr path;
        public ushort vendor_id;
        public ushort product_id;
        public IntPtr serial_number;
        public ushort release_number;
        public IntPtr manufacturer_string;
        public IntPtr product_string;
        public ushort usage_page;
        public ushort usage;
        public int interface_number;
        public int interface_class;
        public int interface_subclass;
        public int interface_protocol;
        public SDL_hid_bus_type bus_type;
        public IntPtr next;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Locale
    {
        public IntPtr language;
        public IntPtr country;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_MessageBoxButtonData
    {
        public UInt32 flags;
        public int buttonID;
        public IntPtr text;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_MessageBoxColor
    {
        public byte r;
        public byte g;
        public byte b;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_MessageBoxColorScheme
    {
        public SDL_MessageBoxColor[] colors;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_MessageBoxData
    {
        public UInt32 flags;
        public IntPtr window;
        public IntPtr title;
        public IntPtr message;
        public int numbuttons;
        public IntPtr buttons;
        public IntPtr colorScheme;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Vertex
    {
        public SDL_FPoint position;
        public SDL_FColor color;
        public SDL_FPoint tex_coord;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Renderer
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Texture
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_StorageInterface
    {
        public IntPtr close;
        public IntPtr ready;
        public IntPtr enumerate;
        public IntPtr info;
        public IntPtr read_file;
        public IntPtr write_file;
        public IntPtr mkdir;
        public IntPtr remove;
        public IntPtr rename;
        public IntPtr copy;
        public IntPtr space_remaining;
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_Storage
    {
    }

    [StructLayout(LayoutKind.Sequential)]
    public struct SDL_DateTime
    {
        public int year;
        public int month;
        public int day;
        public int hour;
        public int minute;
        public int second;
        public int nanosecond;
        public int day_of_week;
        public int utc_offset;
    }


    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr alloca(UInt32 _);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_malloc(UInt32 size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_calloc(UInt32 nmemb, UInt32 size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_realloc(IntPtr mem, UInt32 size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_free(IntPtr mem);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetOriginalMemoryFunctions(IntPtr malloc_func, IntPtr calloc_func, IntPtr realloc_func, IntPtr free_func);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetMemoryFunctions(IntPtr malloc_func, IntPtr calloc_func, IntPtr realloc_func, IntPtr free_func);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetMemoryFunctions(IntPtr malloc_func, IntPtr calloc_func, IntPtr realloc_func, IntPtr free_func);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_aligned_alloc(UInt32 alignment, UInt32 size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_aligned_free(IntPtr mem);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumAllocations();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_getenv(IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_setenv(IntPtr name, IntPtr value, int overwrite);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_unsetenv(IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_qsort(IntPtr @base, UInt32 nmemb, UInt32 size, IntPtr compare);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_bsearch(IntPtr key, IntPtr @base, UInt32 nmemb, UInt32 size, IntPtr compare);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_qsort_r(IntPtr @base, UInt32 nmemb, UInt32 size, IntPtr compare, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_bsearch_r(IntPtr key, IntPtr @base, UInt32 nmemb, UInt32 size, IntPtr compare, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_abs(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isalpha(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isalnum(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isblank(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_iscntrl(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isdigit(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isxdigit(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ispunct(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isspace(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isupper(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_islower(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isprint(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isgraph(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_toupper(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_tolower(int x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_crc16(UInt16 crc, IntPtr data, UInt32 len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_crc32(UInt32 crc, IntPtr data, UInt32 len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_memcpy(IntPtr dst, IntPtr src, UInt32 len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_memmove(IntPtr dst, IntPtr src, UInt32 len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_memset(IntPtr dst, int c, UInt32 len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_memset4(IntPtr dst, UInt32 val, UInt32 dwords);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_memcmp(IntPtr s1, IntPtr s2, UInt32 len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_wcslen(IntPtr wstr);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_wcsnlen(IntPtr wstr, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_wcslcpy(IntPtr dst, IntPtr src, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_wcslcat(IntPtr dst, IntPtr src, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_wcsdup(IntPtr wstr);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_wcsstr(IntPtr haystack, IntPtr needle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_wcsnstr(IntPtr haystack, IntPtr needle, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_wcscmp(IntPtr str1, IntPtr str2);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_wcsncmp(IntPtr str1, IntPtr str2, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_wcscasecmp(IntPtr str1, IntPtr str2);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_wcsncasecmp(IntPtr str1, IntPtr str2, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern long SDL_wcstol(IntPtr str, IntPtr endp, int @base);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_strlen(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_strnlen(IntPtr str, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_strlcpy(IntPtr dst, IntPtr src, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_utf8strlcpy(IntPtr dst, IntPtr src, UInt32 dst_bytes);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_strlcat(IntPtr dst, IntPtr src, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strdup(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strndup(IntPtr str, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strrev(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strupr(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strlwr(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strchr(IntPtr str, int c);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strrchr(IntPtr str, int c);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strstr(IntPtr haystack, IntPtr needle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strnstr(IntPtr haystack, IntPtr needle, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strcasestr(IntPtr haystack, IntPtr needle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_strtok_r(IntPtr s1, IntPtr s2, IntPtr saveptr);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_utf8strlen(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_utf8strnlen(IntPtr str, UInt32 bytes);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_itoa(int value, IntPtr str, int radix);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_uitoa(uint value, IntPtr str, int radix);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_ltoa(long value, IntPtr str, int radix);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_ultoa(ulong value, IntPtr str, int radix);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_lltoa(Int64 value, IntPtr str, int radix);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_ulltoa(UInt64 value, IntPtr str, int radix);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_atoi(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_atof(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern long SDL_strtol(IntPtr str, IntPtr endp, int @base);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern ulong SDL_strtoul(IntPtr str, IntPtr endp, int @base);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int64 SDL_strtoll(IntPtr str, IntPtr endp, int @base);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_strtoull(IntPtr str, IntPtr endp, int @base);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_strtod(IntPtr str, IntPtr endp);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_strcmp(IntPtr str1, IntPtr str2);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_strncmp(IntPtr str1, IntPtr str2, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_strcasecmp(IntPtr str1, IntPtr str2);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_strncasecmp(IntPtr str1, IntPtr str2, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_StepUTF8(IntPtr pstr, IntPtr pslen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_UCS4ToUTF8(UInt32 codepoint, IntPtr dst);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_sscanf(IntPtr text, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_vsscanf(IntPtr text, IntPtr fmt, IntPtr ap);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_snprintf(IntPtr text, UInt32 maxlen, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_swprintf(IntPtr text, UInt32 maxlen, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_vsnprintf(IntPtr text, UInt32 maxlen, IntPtr fmt, IntPtr ap);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_vswprintf(IntPtr text, UInt32 maxlen, IntPtr fmt, IntPtr ap);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_asprintf(IntPtr strp, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_vasprintf(IntPtr strp, IntPtr fmt, IntPtr ap);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_srand(UInt64 seed);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int32 SDL_rand(Int32 n);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_randf();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_rand_bits();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int32 SDL_rand_r(IntPtr state, Int32 n);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_randf_r(IntPtr state);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_rand_bits_r(IntPtr state);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_acos(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_acosf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_asin(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_asinf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_atan(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_atanf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_atan2(double y, double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_atan2f(float y, float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_ceil(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_ceilf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_copysign(double x, double y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_copysignf(float x, float y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_cos(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_cosf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_exp(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_expf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_fabs(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_fabsf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_floor(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_floorf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_trunc(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_truncf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_fmod(double x, double y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_fmodf(float x, float y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isinf(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isinff(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isnan(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_isnanf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_log(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_logf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_log10(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_log10f(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_modf(double x, IntPtr y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_modff(float x, IntPtr y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_pow(double x, double y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_powf(float x, float y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_round(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_roundf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern long SDL_lround(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern long SDL_lroundf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_scalbn(double x, int n);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_scalbnf(float x, int n);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_sin(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_sinf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_sqrt(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_sqrtf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern double SDL_tan(double x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_tanf(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_iconv_open(IntPtr tocode, IntPtr fromcode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_iconv_close(IntPtr cd);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_iconv(IntPtr cd, IntPtr inbuf, IntPtr inbytesleft, IntPtr outbuf, IntPtr outbytesleft);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_iconv_string(IntPtr tocode, IntPtr fromcode, IntPtr inbuf, UInt32 inbytesleft);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_size_mul_overflow(UInt32 a, UInt32 b, IntPtr ret);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_size_mul_overflow_builtin(UInt32 a, UInt32 b, IntPtr ret);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_size_add_overflow(UInt32 a, UInt32 b, IntPtr ret);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_size_add_overflow_builtin(UInt32 a, UInt32 b, IntPtr ret);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_AssertState SDL_ReportAssertion(IntPtr data, IntPtr func, IntPtr file, int line);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetAssertionHandler(IntPtr handler, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetDefaultAssertionHandler();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAssertionHandler(IntPtr puserdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAssertionReport();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ResetAssertionReport();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TryLockSpinlock(IntPtr @lock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LockSpinlock(IntPtr @lock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockSpinlock(IntPtr @lock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_MemoryBarrierReleaseFunction();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_MemoryBarrierAcquireFunction();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AtomicCompareAndSwap(IntPtr a, int oldval, int newval);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AtomicSet(IntPtr a, int v);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AtomicGet(IntPtr a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AtomicAdd(IntPtr a, int v);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AtomicCompareAndSwapPointer(IntPtr a, IntPtr oldval, IntPtr newval);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_AtomicSetPtr(IntPtr a, IntPtr v);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_AtomicGetPtr(IntPtr a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_SwapFloat(float x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetError(IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_OutOfMemory();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetError();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ClearError();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateMutex();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LockMutex(IntPtr mutex);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TryLockMutex(IntPtr mutex);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockMutex(IntPtr mutex);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyMutex(IntPtr mutex);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateRWLock();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LockRWLockForReading(IntPtr rwlock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LockRWLockForWriting(IntPtr rwlock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TryLockRWLockForReading(IntPtr rwlock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TryLockRWLockForWriting(IntPtr rwlock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockRWLock(IntPtr rwlock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyRWLock(IntPtr rwlock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateSemaphore(UInt32 initial_value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroySemaphore(IntPtr sem);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitSemaphore(IntPtr sem);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TryWaitSemaphore(IntPtr sem);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitSemaphoreTimeout(IntPtr sem, Int32 timeoutMS);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SignalSemaphore(IntPtr sem);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetSemaphoreValue(IntPtr sem);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateCondition();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyCondition(IntPtr cond);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SignalCondition(IntPtr cond);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BroadcastCondition(IntPtr cond);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitCondition(IntPtr cond, IntPtr mutex);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitConditionTimeout(IntPtr cond, IntPtr mutex, Int32 timeoutMS);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetGlobalProperties();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_CreateProperties();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CopyProperties(UInt32 src, UInt32 dst);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockProperties(UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockProperties(UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetPointerPropertyWithCleanup(UInt32 props, IntPtr name, IntPtr value, IntPtr cleanup, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetPointerProperty(UInt32 props, IntPtr name, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetStringProperty(UInt32 props, IntPtr name, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetNumberProperty(UInt32 props, IntPtr name, Int64 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetFloatProperty(UInt32 props, IntPtr name, float value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetBooleanProperty(UInt32 props, IntPtr name, int value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasProperty(UInt32 props, IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_PropertyType SDL_GetPropertyType(UInt32 props, IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetPointerProperty(UInt32 props, IntPtr name, IntPtr default_value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetStringProperty(UInt32 props, IntPtr name, IntPtr default_value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int64 SDL_GetNumberProperty(UInt32 props, IntPtr name, Int64 default_value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetFloatProperty(UInt32 props, IntPtr name, float default_value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetBooleanProperty(UInt32 props, IntPtr name, int default_value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ClearProperty(UInt32 props, IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_EnumerateProperties(UInt32 props, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyProperties(UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_IOFromFile(IntPtr file, IntPtr mode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_IOFromMem(IntPtr mem, UInt32 size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_IOFromConstMem(IntPtr mem, UInt32 size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_IOFromDynamicMem();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenIO(IntPtr iface, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CloseIO(IntPtr context);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetIOProperties(IntPtr context);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_IOStatus SDL_GetIOStatus(IntPtr context);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int64 SDL_GetIOSize(IntPtr context);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int64 SDL_SeekIO(IntPtr context, Int64 offset, SDL_IOWhence whence);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int64 SDL_TellIO(IntPtr context);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_ReadIO(IntPtr context, IntPtr ptr, UInt32 size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_WriteIO(IntPtr context, IntPtr ptr, UInt32 size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_IOprintf(IntPtr context, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_IOvprintf(IntPtr context, IntPtr fmt, IntPtr ap);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_LoadFile_IO(IntPtr src, IntPtr datasize, int closeio);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_LoadFile(IntPtr file, IntPtr datasize);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadU8(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadS8(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadU16LE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadS16LE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadU16BE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadS16BE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadU32LE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadS32LE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadU32BE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadS32BE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadU64LE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadS64LE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadU64BE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadS64BE(IntPtr src, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteU8(IntPtr dst, byte value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteS8(IntPtr dst, sbyte value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteU16LE(IntPtr dst, UInt16 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteS16LE(IntPtr dst, Int16 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteU16BE(IntPtr dst, UInt16 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteS16BE(IntPtr dst, Int16 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteU32LE(IntPtr dst, UInt32 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteS32LE(IntPtr dst, Int32 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteU32BE(IntPtr dst, UInt32 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteS32BE(IntPtr dst, Int32 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteU64LE(IntPtr dst, UInt64 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteS64LE(IntPtr dst, Int64 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteU64BE(IntPtr dst, UInt64 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteS64BE(IntPtr dst, Int64 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateThreadRuntime(IntPtr fn, IntPtr name, IntPtr data, IntPtr pfnBeginThread, IntPtr pfnEndThread);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateThreadWithPropertiesRuntime(UInt32 props, IntPtr pfnBeginThread, IntPtr pfnEndThread);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetThreadName(IntPtr thread);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_GetCurrentThreadID();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_GetThreadID(IntPtr thread);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetThreadPriority(SDL_ThreadPriority priority);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_WaitThread(IntPtr thread, IntPtr status);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DetachThread(IntPtr thread);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetTLS(IntPtr id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTLS(IntPtr id, IntPtr value, IntPtr destructor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CleanupTLS();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumAudioDrivers();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAudioDriver(int index);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetCurrentAudioDriver();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAudioPlaybackDevices(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAudioRecordingDevices(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAudioDeviceName(UInt32 devid);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetAudioDeviceFormat(UInt32 devid, IntPtr spec, IntPtr sample_frames);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAudioDeviceChannelMap(UInt32 devid, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_OpenAudioDevice(UInt32 devid, IntPtr spec);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PauseAudioDevice(UInt32 dev);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ResumeAudioDevice(UInt32 dev);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AudioDevicePaused(UInt32 dev);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetAudioDeviceGain(UInt32 devid);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioDeviceGain(UInt32 devid, float gain);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseAudioDevice(UInt32 devid);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BindAudioStreams(UInt32 devid, IntPtr streams, int num_streams);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BindAudioStream(UInt32 devid, IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnbindAudioStreams(IntPtr streams, int num_streams);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnbindAudioStream(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetAudioStreamDevice(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateAudioStream(IntPtr src_spec, IntPtr dst_spec);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetAudioStreamProperties(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetAudioStreamFormat(IntPtr stream, IntPtr src_spec, IntPtr dst_spec);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamFormat(IntPtr stream, IntPtr src_spec, IntPtr dst_spec);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetAudioStreamFrequencyRatio(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamFrequencyRatio(IntPtr stream, float ratio);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetAudioStreamGain(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamGain(IntPtr stream, float gain);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAudioStreamInputChannelMap(IntPtr stream, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAudioStreamOutputChannelMap(IntPtr stream, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamInputChannelMap(IntPtr stream, IntPtr chmap, int count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamOutputChannelMap(IntPtr stream, IntPtr chmap, int count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PutAudioStreamData(IntPtr stream, IntPtr buf, int len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetAudioStreamData(IntPtr stream, IntPtr buf, int len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetAudioStreamAvailable(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetAudioStreamQueued(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FlushAudioStream(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ClearAudioStream(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PauseAudioStreamDevice(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ResumeAudioStreamDevice(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockAudioStream(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UnlockAudioStream(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamGetCallback(IntPtr stream, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioStreamPutCallback(IntPtr stream, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyAudioStream(IntPtr stream);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenAudioDeviceStream(UInt32 devid, IntPtr spec, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAudioPostmixCallback(UInt32 devid, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LoadWAV_IO(IntPtr src, int closeio, IntPtr spec, IntPtr audio_buf, IntPtr audio_len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LoadWAV(IntPtr path, IntPtr spec, IntPtr audio_buf, IntPtr audio_len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_MixAudio(IntPtr dst, IntPtr src, SDL_AudioFormat format, UInt32 len, float volume);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ConvertAudioSamples(IntPtr src_spec, IntPtr src_data, int src_len, IntPtr dst_spec, IntPtr dst_data, IntPtr dst_len);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAudioFormatName(SDL_AudioFormat format);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSilenceValueForFormat(SDL_AudioFormat format);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_MostSignificantBitIndex32(UInt32 x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasExactlyOneBitSet32(UInt32 x);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetPixelFormatName(SDL_PixelFormat format);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetMasksForPixelFormat(SDL_PixelFormat format, IntPtr bpp, IntPtr Rmask, IntPtr Gmask, IntPtr Bmask, IntPtr Amask);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_PixelFormat SDL_GetPixelFormatForMasks(int bpp, UInt32 Rmask, UInt32 Gmask, UInt32 Bmask, UInt32 Amask);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetPixelFormatDetails(SDL_PixelFormat format);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreatePalette(int ncolors);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetPaletteColors(IntPtr palette, IntPtr colors, int firstcolor, int ncolors);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyPalette(IntPtr palette);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_MapRGB(IntPtr format, IntPtr palette, byte r, byte g, byte b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_MapRGBA(IntPtr format, IntPtr palette, byte r, byte g, byte b, byte a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetRGB(UInt32 pixel, IntPtr format, IntPtr palette, IntPtr r, IntPtr g, IntPtr b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetRGBA(UInt32 pixel, IntPtr format, IntPtr palette, IntPtr r, IntPtr g, IntPtr b, IntPtr a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_RectToFRect(IntPtr rect, IntPtr frect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PointInRect(IntPtr p, IntPtr r);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RectEmpty(IntPtr r);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RectsEqual(IntPtr a, IntPtr b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasRectIntersection(IntPtr A, IntPtr B);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectIntersection(IntPtr A, IntPtr B, IntPtr result);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectUnion(IntPtr A, IntPtr B, IntPtr result);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectEnclosingPoints(IntPtr points, int count, IntPtr clip, IntPtr result);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectAndLineIntersection(IntPtr rect, IntPtr X1, IntPtr Y1, IntPtr X2, IntPtr Y2);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PointInRectFloat(IntPtr p, IntPtr r);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RectEmptyFloat(IntPtr r);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RectsEqualEpsilon(IntPtr a, IntPtr b, float epsilon);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RectsEqualFloat(IntPtr a, IntPtr b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasRectIntersectionFloat(IntPtr A, IntPtr B);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectIntersectionFloat(IntPtr A, IntPtr B, IntPtr result);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectUnionFloat(IntPtr A, IntPtr B, IntPtr result);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectEnclosingPointsFloat(IntPtr points, int count, IntPtr clip, IntPtr result);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRectAndLineIntersectionFloat(IntPtr rect, IntPtr X1, IntPtr Y1, IntPtr X2, IntPtr Y2);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateSurface(int width, int height, SDL_PixelFormat format);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, IntPtr pixels, int pitch);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroySurface(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetSurfaceProperties(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceColorspace(IntPtr surface, SDL_Colorspace colorspace);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Colorspace SDL_GetSurfaceColorspace(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateSurfacePalette(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfacePalette(IntPtr surface, IntPtr palette);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetSurfacePalette(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddSurfaceAlternateImage(IntPtr surface, IntPtr image);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SurfaceHasAlternateImages(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetSurfaceImages(IntPtr surface, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_RemoveSurfaceAlternateImages(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockSurface(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockSurface(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_LoadBMP_IO(IntPtr src, int closeio);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_LoadBMP(IntPtr file);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SaveBMP_IO(IntPtr surface, IntPtr dst, int closeio);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SaveBMP(IntPtr surface, IntPtr file);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceRLE(IntPtr surface, int enabled);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SurfaceHasRLE(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceColorKey(IntPtr surface, int enabled, UInt32 key);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SurfaceHasColorKey(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceColorKey(IntPtr surface, IntPtr key);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceColorMod(IntPtr surface, byte r, byte g, byte b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceColorMod(IntPtr surface, IntPtr r, IntPtr g, IntPtr b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceAlphaMod(IntPtr surface, byte alpha);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceAlphaMod(IntPtr surface, IntPtr alpha);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceBlendMode(IntPtr surface, UInt32 blendMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceBlendMode(IntPtr surface, IntPtr blendMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetSurfaceClipRect(IntPtr surface, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSurfaceClipRect(IntPtr surface, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FlipSurface(IntPtr surface, SDL_FlipMode flip);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_DuplicateSurface(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_ScaleSurface(IntPtr surface, int width, int height, SDL_ScaleMode scaleMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_ConvertSurface(IntPtr surface, SDL_PixelFormat format);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_ConvertSurfaceAndColorspace(IntPtr surface, SDL_PixelFormat format, IntPtr palette, SDL_Colorspace colorspace, UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, IntPtr src, int src_pitch, SDL_PixelFormat dst_format, IntPtr dst, int dst_pitch);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, UInt32 src_properties, IntPtr src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, UInt32 dst_properties, IntPtr dst, int dst_pitch);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, IntPtr src, int src_pitch, SDL_PixelFormat dst_format, IntPtr dst, int dst_pitch, int linear);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PremultiplySurfaceAlpha(IntPtr surface, int linear);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ClearSurface(IntPtr surface, float r, float g, float b, float a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FillSurfaceRect(IntPtr dst, IntPtr rect, UInt32 color);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FillSurfaceRects(IntPtr dst, IntPtr rects, int count, UInt32 color);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurface(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurfaceUnchecked(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurfaceScaled(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect, SDL_ScaleMode scaleMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurfaceUncheckedScaled(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect, SDL_ScaleMode scaleMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurfaceTiled(IntPtr src, IntPtr srcrect, IntPtr dst, IntPtr dstrect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurfaceTiledWithScale(IntPtr src, IntPtr srcrect, float scale, SDL_ScaleMode scaleMode, IntPtr dst, IntPtr dstrect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_BlitSurface9Grid(IntPtr src, IntPtr srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, IntPtr dst, IntPtr dstrect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_MapSurfaceRGB(IntPtr surface, byte r, byte g, byte b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_MapSurfaceRGBA(IntPtr surface, byte r, byte g, byte b, byte a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadSurfacePixel(IntPtr surface, int x, int y, IntPtr r, IntPtr g, IntPtr b, IntPtr a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadSurfacePixelFloat(IntPtr surface, int x, int y, IntPtr r, IntPtr g, IntPtr b, IntPtr a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteSurfacePixel(IntPtr surface, int x, int y, byte r, byte g, byte b, byte a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteSurfacePixelFloat(IntPtr surface, int x, int y, float r, float g, float b, float a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumVideoDrivers();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetVideoDriver(int index);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetCurrentVideoDriver();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_SystemTheme SDL_GetSystemTheme();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetDisplays(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetPrimaryDisplay();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetDisplayProperties(UInt32 displayID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetDisplayName(UInt32 displayID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetDisplayBounds(UInt32 displayID, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetDisplayUsableBounds(UInt32 displayID, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(UInt32 displayID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(UInt32 displayID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetDisplayContentScale(UInt32 displayID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetFullscreenDisplayModes(UInt32 displayID, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetClosestFullscreenDisplayMode(UInt32 displayID, int w, int h, float refresh_rate, int include_high_density_modes, IntPtr mode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetDesktopDisplayMode(UInt32 displayID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetCurrentDisplayMode(UInt32 displayID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetDisplayForPoint(IntPtr point);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetDisplayForRect(IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetDisplayForWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetWindowPixelDensity(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetWindowDisplayScale(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowFullscreenMode(IntPtr window, IntPtr mode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetWindowFullscreenMode(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetWindowICCProfile(IntPtr window, IntPtr size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_PixelFormat SDL_GetWindowPixelFormat(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetWindows(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateWindow(IntPtr title, int w, int h, UInt64 flags);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreatePopupWindow(IntPtr parent, int offset_x, int offset_y, int w, int h, UInt64 flags);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateWindowWithProperties(UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetWindowID(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetWindowFromID(UInt32 id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetWindowParent(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetWindowProperties(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_GetWindowFlags(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowTitle(IntPtr window, IntPtr title);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetWindowTitle(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowIcon(IntPtr window, IntPtr icon);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowPosition(IntPtr window, int x, int y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowPosition(IntPtr window, IntPtr x, IntPtr y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowSize(IntPtr window, int w, int h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowSize(IntPtr window, IntPtr w, IntPtr h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowSafeArea(IntPtr window, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowAspectRatio(IntPtr window, float min_aspect, float max_aspect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowAspectRatio(IntPtr window, IntPtr min_aspect, IntPtr max_aspect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowBordersSize(IntPtr window, IntPtr top, IntPtr left, IntPtr bottom, IntPtr right);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowSizeInPixels(IntPtr window, IntPtr w, IntPtr h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowMinimumSize(IntPtr window, int min_w, int min_h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowMinimumSize(IntPtr window, IntPtr w, IntPtr h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowMaximumSize(IntPtr window, int max_w, int max_h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowMaximumSize(IntPtr window, IntPtr w, IntPtr h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowBordered(IntPtr window, int bordered);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowResizable(IntPtr window, int resizable);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowAlwaysOnTop(IntPtr window, int on_top);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HideWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RaiseWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_MaximizeWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_MinimizeWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RestoreWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowFullscreen(IntPtr window, int fullscreen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SyncWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WindowHasSurface(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetWindowSurface(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowSurfaceVSync(IntPtr window, int vsync);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowSurfaceVSync(IntPtr window, IntPtr vsync);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateWindowSurface(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateWindowSurfaceRects(IntPtr window, IntPtr rects, int numrects);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_DestroyWindowSurface(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowKeyboardGrab(IntPtr window, int grabbed);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowMouseGrab(IntPtr window, int grabbed);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowKeyboardGrab(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowMouseGrab(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGrabbedWindow();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowMouseRect(IntPtr window, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetWindowMouseRect(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowOpacity(IntPtr window, float opacity);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetWindowOpacity(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowModalFor(IntPtr modal_window, IntPtr parent_window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowFocusable(IntPtr window, int focusable);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowWindowSystemMenu(IntPtr window, int x, int y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowHitTest(IntPtr window, IntPtr callback, IntPtr callback_data);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowShape(IntPtr window, IntPtr shape);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FlashWindow(IntPtr window, SDL_FlashOperation operation);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ScreenSaverEnabled();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_EnableScreenSaver();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_DisableScreenSaver();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_LoadLibrary(IntPtr path);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GL_GetProcAddress(IntPtr proc);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_EGL_GetProcAddress(IntPtr proc);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GL_UnloadLibrary();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_ExtensionSupported(IntPtr extension);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GL_ResetAttributes();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_SetAttribute(SDL_GLattr attr, int value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_GetAttribute(SDL_GLattr attr, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GL_CreateContext(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_MakeCurrent(IntPtr window, IntPtr context);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GL_GetCurrentWindow();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GL_GetCurrentContext();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_EGL_GetCurrentDisplay();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_EGL_GetCurrentConfig();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_EGL_GetWindowSurface(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_EGL_SetAttributeCallbacks(IntPtr platformAttribCallback, IntPtr surfaceAttribCallback, IntPtr contextAttribCallback);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_SetSwapInterval(int interval);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_GetSwapInterval(IntPtr interval);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_SwapWindow(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GL_DestroyContext(IntPtr context);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumCameraDrivers();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetCameraDriver(int index);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetCurrentCameraDriver();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetCameras(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetCameraSupportedFormats(UInt32 devid, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetCameraName(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_CameraPosition SDL_GetCameraPosition(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenCamera(UInt32 instance_id, IntPtr spec);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetCameraPermissionState(IntPtr camera);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetCameraID(IntPtr camera);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetCameraProperties(IntPtr camera);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetCameraFormat(IntPtr camera, IntPtr spec);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_AcquireCameraFrame(IntPtr camera, IntPtr timestampNS);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReleaseCameraFrame(IntPtr camera, IntPtr frame);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseCamera(IntPtr camera);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetClipboardText(IntPtr text);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetClipboardText();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasClipboardText();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetPrimarySelectionText(IntPtr text);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetPrimarySelectionText();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasPrimarySelectionText();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetClipboardData(IntPtr callback, IntPtr cleanup, IntPtr userdata, IntPtr mime_types, UInt32 num_mime_types);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ClearClipboardData();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetClipboardData(IntPtr mime_type, IntPtr size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasClipboardData(IntPtr mime_type);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetCPUCount();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetCPUCacheLineSize();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasAltiVec();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasMMX();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasSSE();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasSSE2();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasSSE3();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasSSE41();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasSSE42();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasAVX();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasAVX2();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasAVX512F();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasARMSIMD();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasNEON();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasLSX();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasLASX();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSystemRAM();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetSIMDAlignment();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ShowOpenFileDialog(IntPtr callback, IntPtr userdata, IntPtr window, IntPtr filters, int nfilters, IntPtr default_location, int allow_many);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ShowSaveFileDialog(IntPtr callback, IntPtr userdata, IntPtr window, IntPtr filters, int nfilters, IntPtr default_location);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ShowOpenFolderDialog(IntPtr callback, IntPtr userdata, IntPtr window, IntPtr default_location, int allow_many);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GUIDToString(SDL_GUID guid, IntPtr pszGUID, int cbGUID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GUID SDL_StringToGUID(IntPtr pchGUID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_PowerState SDL_GetPowerInfo(IntPtr seconds, IntPtr percent);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetSensors(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetSensorNameForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_SensorType SDL_GetSensorTypeForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSensorNonPortableTypeForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenSensor(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetSensorFromID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetSensorProperties(IntPtr sensor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetSensorName(IntPtr sensor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_SensorType SDL_GetSensorType(IntPtr sensor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSensorNonPortableType(IntPtr sensor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetSensorID(IntPtr sensor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetSensorData(IntPtr sensor, IntPtr data, int num_values);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseSensor(IntPtr sensor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UpdateSensors();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LockJoysticks();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockJoysticks();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasJoystick();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetJoysticks(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetJoystickNameForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetJoystickPathForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetJoystickPlayerIndexForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GUID SDL_GetJoystickGUIDForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetJoystickVendorForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetJoystickProductForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetJoystickProductVersionForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickType SDL_GetJoystickTypeForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenJoystick(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetJoystickFromID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetJoystickFromPlayerIndex(int player_index);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_AttachVirtualJoystick(IntPtr desc);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_DetachVirtualJoystick(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_IsJoystickVirtual(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickVirtualAxis(IntPtr joystick, int axis, Int16 value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickVirtualBall(IntPtr joystick, int ball, Int16 xrel, Int16 yrel);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickVirtualButton(IntPtr joystick, int button, byte value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickVirtualHat(IntPtr joystick, int hat, byte value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickVirtualTouchpad(IntPtr joystick, int touchpad, int finger, byte state, float x, float y, float pressure);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SendJoystickVirtualSensorData(IntPtr joystick, SDL_SensorType type, UInt64 sensor_timestamp, IntPtr data, int num_values);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetJoystickProperties(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetJoystickName(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetJoystickPath(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetJoystickPlayerIndex(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickPlayerIndex(IntPtr joystick, int player_index);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GUID SDL_GetJoystickGUID(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetJoystickVendor(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetJoystickProduct(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetJoystickProductVersion(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetJoystickFirmwareVersion(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetJoystickSerial(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickType SDL_GetJoystickType(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetJoystickGUIDInfo(SDL_GUID guid, IntPtr vendor, IntPtr product, IntPtr version, IntPtr crc16);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_JoystickConnected(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetJoystickID(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumJoystickAxes(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumJoystickBalls(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumJoystickHats(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumJoystickButtons(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetJoystickEventsEnabled(int enabled);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_JoystickEventsEnabled();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UpdateJoysticks();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int16 SDL_GetJoystickAxis(IntPtr joystick, int axis);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetJoystickAxisInitialState(IntPtr joystick, int axis, IntPtr state);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetJoystickBall(IntPtr joystick, int ball, IntPtr dx, IntPtr dy);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern byte SDL_GetJoystickHat(IntPtr joystick, int hat);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern byte SDL_GetJoystickButton(IntPtr joystick, int button);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RumbleJoystick(IntPtr joystick, UInt16 low_frequency_rumble, UInt16 high_frequency_rumble, UInt32 duration_ms);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RumbleJoystickTriggers(IntPtr joystick, UInt16 left_rumble, UInt16 right_rumble, UInt32 duration_ms);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetJoystickLED(IntPtr joystick, byte red, byte green, byte blue);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SendJoystickEffect(IntPtr joystick, IntPtr data, int size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseJoystick(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickConnectionState SDL_GetJoystickConnectionState(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_PowerState SDL_GetJoystickPowerInfo(IntPtr joystick, IntPtr percent);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddGamepadMapping(IntPtr mapping);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddGamepadMappingsFromIO(IntPtr src, int closeio);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddGamepadMappingsFromFile(IntPtr file);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReloadGamepadMappings();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadMappings(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadMappingForGUID(SDL_GUID guid);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadMapping(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetGamepadMapping(UInt32 instance_id, IntPtr mapping);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasGamepad();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepads(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_IsGamepad(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadNameForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadPathForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetGamepadPlayerIndexForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GUID SDL_GetGamepadGUIDForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetGamepadVendorForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetGamepadProductForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetGamepadProductVersionForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetGamepadTypeForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetRealGamepadTypeForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadMappingForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenGamepad(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadFromID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadFromPlayerIndex(int player_index);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetGamepadProperties(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetGamepadID(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadName(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadPath(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetGamepadType(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetRealGamepadType(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetGamepadPlayerIndex(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetGamepadPlayerIndex(IntPtr gamepad, int player_index);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetGamepadVendor(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetGamepadProduct(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetGamepadProductVersion(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetGamepadFirmwareVersion(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadSerial(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_GetGamepadSteamHandle(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_JoystickConnectionState SDL_GetGamepadConnectionState(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_PowerState SDL_GetGamepadPowerInfo(IntPtr gamepad, IntPtr percent);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GamepadConnected(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadJoystick(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetGamepadEventsEnabled(int enabled);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GamepadEventsEnabled();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadBindings(IntPtr gamepad, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UpdateGamepads();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadType SDL_GetGamepadTypeFromString(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadStringForType(SDL_GamepadType type);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadAxis SDL_GetGamepadAxisFromString(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GamepadHasAxis(IntPtr gamepad, SDL_GamepadAxis axis);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int16 SDL_GetGamepadAxis(IntPtr gamepad, SDL_GamepadAxis axis);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadButton SDL_GetGamepadButtonFromString(IntPtr str);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadStringForButton(SDL_GamepadButton button);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GamepadHasButton(IntPtr gamepad, SDL_GamepadButton button);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern byte SDL_GetGamepadButton(IntPtr gamepad, SDL_GamepadButton button);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadButtonLabel SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GamepadButtonLabel SDL_GetGamepadButtonLabel(IntPtr gamepad, SDL_GamepadButton button);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumGamepadTouchpads(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumGamepadTouchpadFingers(IntPtr gamepad, int touchpad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetGamepadTouchpadFinger(IntPtr gamepad, int touchpad, int finger, IntPtr state, IntPtr x, IntPtr y, IntPtr pressure);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GamepadHasSensor(IntPtr gamepad, SDL_SensorType type);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetGamepadSensorEnabled(IntPtr gamepad, SDL_SensorType type, int enabled);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GamepadSensorEnabled(IntPtr gamepad, SDL_SensorType type);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern float SDL_GetGamepadSensorDataRate(IntPtr gamepad, SDL_SensorType type);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetGamepadSensorData(IntPtr gamepad, SDL_SensorType type, IntPtr data, int num_values);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RumbleGamepad(IntPtr gamepad, UInt16 low_frequency_rumble, UInt16 high_frequency_rumble, UInt32 duration_ms);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RumbleGamepadTriggers(IntPtr gamepad, UInt16 left_rumble, UInt16 right_rumble, UInt32 duration_ms);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetGamepadLED(IntPtr gamepad, byte red, byte green, byte blue);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SendGamepadEffect(IntPtr gamepad, IntPtr data, int size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseGamepad(IntPtr gamepad);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadAppleSFSymbolsNameForButton(IntPtr gamepad, SDL_GamepadButton button);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetGamepadAppleSFSymbolsNameForAxis(IntPtr gamepad, SDL_GamepadAxis axis);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasKeyboard();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetKeyboards(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetKeyboardNameForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetKeyboardFocus();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetKeyboardState(IntPtr numkeys);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ResetKeyboard();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt16 SDL_GetModState();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetModState(UInt16 modstate);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetKeyFromScancode(SDL_Scancode scancode, UInt16 modstate, int key_event);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Scancode SDL_GetScancodeFromKey(UInt32 key, IntPtr modstate);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetScancodeName(SDL_Scancode scancode, IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetScancodeName(SDL_Scancode scancode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_Scancode SDL_GetScancodeFromName(IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetKeyName(UInt32 key);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetKeyFromName(IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_StartTextInput(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_StartTextInputWithProperties(IntPtr window, UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TextInputActive(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_StopTextInput(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ClearComposition(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextInputArea(IntPtr window, IntPtr rect, int cursor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextInputArea(IntPtr window, IntPtr rect, IntPtr cursor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasScreenKeyboardSupport();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ScreenKeyboardShown(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasMouse();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetMice(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetMouseNameForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetMouseFocus();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetMouseState(IntPtr x, IntPtr y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetGlobalMouseState(IntPtr x, IntPtr y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetRelativeMouseState(IntPtr x, IntPtr y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_WarpMouseInWindow(IntPtr window, float x, float y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WarpMouseGlobal(float x, float y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetWindowRelativeMouseMode(IntPtr window, int enabled);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetWindowRelativeMouseMode(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CaptureMouse(int enabled);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateCursor(IntPtr data, IntPtr mask, int w, int h, int hot_x, int hot_y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateColorCursor(IntPtr surface, int hot_x, int hot_y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateSystemCursor(SDL_SystemCursor id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetCursor(IntPtr cursor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetCursor();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetDefaultCursor();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyCursor(IntPtr cursor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowCursor();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HideCursor();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CursorVisible();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetTouchDevices(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetTouchDeviceName(UInt64 touchID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_TouchDeviceType SDL_GetTouchDeviceType(UInt64 touchID);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetTouchFingers(UInt64 touchID, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_PumpEvents();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PeepEvents(IntPtr events, int numevents, SDL_EventAction action, UInt32 minType, UInt32 maxType);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasEvent(UInt32 type);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HasEvents(UInt32 minType, UInt32 maxType);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_FlushEvent(UInt32 type);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_FlushEvents(UInt32 minType, UInt32 maxType);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PollEvent(IntPtr @event);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitEvent(IntPtr @event);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WaitEventTimeout(IntPtr @event, Int32 timeoutMS);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PushEvent(IntPtr @event);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetEventFilter(IntPtr filter, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetEventFilter(IntPtr filter, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddEventWatch(IntPtr filter, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DelEventWatch(IntPtr filter, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_FilterEvents(IntPtr filter, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetEventEnabled(UInt32 type, int enabled);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_EventEnabled(UInt32 type);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_RegisterEvents(int numevents);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetWindowFromEvent(IntPtr @event);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetBasePath();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetPrefPath(IntPtr org, IntPtr app);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetUserFolder(SDL_Folder folder);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CreateDirectory(IntPtr path);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_EnumerateDirectory(IntPtr path, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RemovePath(IntPtr path);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenamePath(IntPtr oldpath, IntPtr newpath);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CopyFile(IntPtr oldpath, IntPtr newpath);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetPathInfo(IntPtr path, IntPtr info);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GlobDirectory(IntPtr path, IntPtr pattern, UInt32 flags, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuCreateDevice(UInt32 formatFlags, int debugMode, int preferLowPower, IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuCreateDeviceWithProperties(UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuDestroyDevice(IntPtr device);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GpuDriver SDL_GpuGetDriver(IntPtr device);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuCreateComputePipeline(IntPtr device, IntPtr computePipelineCreateInfo);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuCreateGraphicsPipeline(IntPtr device, IntPtr pipelineCreateInfo);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuCreateSampler(IntPtr device, IntPtr samplerCreateInfo);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuCreateShader(IntPtr device, IntPtr shaderCreateInfo);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuCreateTexture(IntPtr device, IntPtr textureCreateInfo);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuCreateBuffer(IntPtr device, IntPtr bufferCreateInfo);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuCreateTransferBuffer(IntPtr device, IntPtr transferBufferCreateInfo);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuSetBufferName(IntPtr device, IntPtr buffer, IntPtr text);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuSetTextureName(IntPtr device, IntPtr texture, IntPtr text);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuInsertDebugLabel(IntPtr commandBuffer, IntPtr text);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuPushDebugGroup(IntPtr commandBuffer, IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuPopDebugGroup(IntPtr commandBuffer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuReleaseTexture(IntPtr device, IntPtr texture);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuReleaseSampler(IntPtr device, IntPtr sampler);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuReleaseBuffer(IntPtr device, IntPtr buffer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuReleaseTransferBuffer(IntPtr device, IntPtr transferBuffer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuReleaseComputePipeline(IntPtr device, IntPtr computePipeline);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuReleaseShader(IntPtr device, IntPtr shader);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuReleaseGraphicsPipeline(IntPtr device, IntPtr graphicsPipeline);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuAcquireCommandBuffer(IntPtr device);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuPushVertexUniformData(IntPtr commandBuffer, UInt32 slotIndex, IntPtr data, UInt32 dataLengthInBytes);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuPushFragmentUniformData(IntPtr commandBuffer, UInt32 slotIndex, IntPtr data, UInt32 dataLengthInBytes);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuPushComputeUniformData(IntPtr commandBuffer, UInt32 slotIndex, IntPtr data, UInt32 dataLengthInBytes);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuBeginRenderPass(IntPtr commandBuffer, IntPtr colorAttachmentInfos, UInt32 colorAttachmentCount, IntPtr depthStencilAttachmentInfo);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindGraphicsPipeline(IntPtr renderPass, IntPtr graphicsPipeline);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuSetViewport(IntPtr renderPass, IntPtr viewport);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuSetScissor(IntPtr renderPass, IntPtr scissor);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindVertexBuffers(IntPtr renderPass, UInt32 firstBinding, IntPtr pBindings, UInt32 bindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindIndexBuffer(IntPtr renderPass, IntPtr pBinding, SDL_GpuIndexElementSize indexElementSize);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindVertexSamplers(IntPtr renderPass, UInt32 firstSlot, IntPtr textureSamplerBindings, UInt32 bindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindVertexStorageTextures(IntPtr renderPass, UInt32 firstSlot, IntPtr storageTextures, UInt32 bindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindVertexStorageBuffers(IntPtr renderPass, UInt32 firstSlot, IntPtr storageBuffers, UInt32 bindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindFragmentSamplers(IntPtr renderPass, UInt32 firstSlot, IntPtr textureSamplerBindings, UInt32 bindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindFragmentStorageTextures(IntPtr renderPass, UInt32 firstSlot, IntPtr storageTextures, UInt32 bindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindFragmentStorageBuffers(IntPtr renderPass, UInt32 firstSlot, IntPtr storageBuffers, UInt32 bindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuDrawIndexedPrimitives(IntPtr renderPass, UInt32 baseVertex, UInt32 startIndex, UInt32 vertexCount, UInt32 instanceCount, UInt32 baseInstance);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuDrawPrimitives(IntPtr renderPass, UInt32 vertexStart, UInt32 vertexCount, UInt32 instanceCount, UInt32 baseInstance);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuDrawPrimitivesIndirect(IntPtr renderPass, IntPtr buffer, UInt32 offsetInBytes, UInt32 drawCount, UInt32 stride);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuDrawIndexedPrimitivesIndirect(IntPtr renderPass, IntPtr buffer, UInt32 offsetInBytes, UInt32 drawCount, UInt32 stride);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuEndRenderPass(IntPtr renderPass);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuBeginComputePass(IntPtr commandBuffer, IntPtr storageTextureBindings, UInt32 storageTextureBindingCount, IntPtr storageBufferBindings, UInt32 storageBufferBindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindComputePipeline(IntPtr computePass, IntPtr computePipeline);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindComputeStorageTextures(IntPtr computePass, UInt32 firstSlot, IntPtr storageTextures, UInt32 bindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBindComputeStorageBuffers(IntPtr computePass, UInt32 firstSlot, IntPtr storageBuffers, UInt32 bindingCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuDispatchCompute(IntPtr computePass, UInt32 groupCountX, UInt32 groupCountY, UInt32 groupCountZ);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuDispatchComputeIndirect(IntPtr computePass, IntPtr buffer, UInt32 offsetInBytes);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuEndComputePass(IntPtr computePass);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuMapTransferBuffer(IntPtr device, IntPtr transferBuffer, int cycle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuUnmapTransferBuffer(IntPtr device, IntPtr transferBuffer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuBeginCopyPass(IntPtr commandBuffer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuUploadToTexture(IntPtr copyPass, IntPtr source, IntPtr destination, int cycle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuUploadToBuffer(IntPtr copyPass, IntPtr source, IntPtr destination, int cycle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuCopyTextureToTexture(IntPtr copyPass, IntPtr source, IntPtr destination, UInt32 w, UInt32 h, UInt32 d, int cycle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuCopyBufferToBuffer(IntPtr copyPass, IntPtr source, IntPtr destination, UInt32 size, int cycle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuDownloadFromTexture(IntPtr copyPass, IntPtr source, IntPtr destination);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuDownloadFromBuffer(IntPtr copyPass, IntPtr source, IntPtr destination);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuEndCopyPass(IntPtr copyPass);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuGenerateMipmaps(IntPtr commandBuffer, IntPtr texture);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuBlit(IntPtr commandBuffer, IntPtr source, IntPtr destination, SDL_FlipMode flipMode, SDL_GpuFilter filterMode, int cycle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GpuSupportsSwapchainComposition(IntPtr device, IntPtr window, SDL_GpuSwapchainComposition swapchainComposition);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GpuSupportsPresentMode(IntPtr device, IntPtr window, SDL_GpuPresentMode presentMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GpuClaimWindow(IntPtr device, IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuUnclaimWindow(IntPtr device, IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GpuSetSwapchainParameters(IntPtr device, IntPtr window, SDL_GpuSwapchainComposition swapchainComposition, SDL_GpuPresentMode presentMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_GpuTextureFormat SDL_GpuGetSwapchainTextureFormat(IntPtr device, IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuAcquireSwapchainTexture(IntPtr commandBuffer, IntPtr window, IntPtr pWidth, IntPtr pHeight);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuSubmit(IntPtr commandBuffer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GpuSubmitAndAcquireFence(IntPtr commandBuffer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuWait(IntPtr device);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuWaitForFences(IntPtr device, int waitAll, IntPtr pFences, UInt32 fenceCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GpuQueryFence(IntPtr device, IntPtr fence);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GpuReleaseFence(IntPtr device, IntPtr fence);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GpuTextureFormatTexelBlockSize(SDL_GpuTextureFormat textureFormat);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GpuSupportsTextureFormat(IntPtr device, SDL_GpuTextureFormat format, SDL_GpuTextureType type, UInt32 usage);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GpuSupportsSampleCount(IntPtr device, SDL_GpuTextureFormat format, SDL_GpuSampleCount sampleCount);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetHaptics(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetHapticNameForID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenHaptic(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetHapticFromID(UInt32 instance_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetHapticID(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetHapticName(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_IsMouseHaptic();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenHapticFromMouse();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_IsJoystickHaptic(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenHapticFromJoystick(IntPtr joystick);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_CloseHaptic(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetMaxHapticEffects(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetMaxHapticEffectsPlaying(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetHapticFeatures(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumHapticAxes(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticEffectSupported(IntPtr haptic, IntPtr effect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CreateHapticEffect(IntPtr haptic, IntPtr effect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateHapticEffect(IntPtr haptic, int effect, IntPtr data);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RunHapticEffect(IntPtr haptic, int effect, UInt32 iterations);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_StopHapticEffect(IntPtr haptic, int effect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyHapticEffect(IntPtr haptic, int effect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetHapticEffectStatus(IntPtr haptic, int effect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetHapticGain(IntPtr haptic, int gain);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetHapticAutocenter(IntPtr haptic, int autocenter);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PauseHaptic(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ResumeHaptic(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_StopHapticEffects(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_HapticRumbleSupported(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_InitHapticRumble(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_PlayHapticRumble(IntPtr haptic, float strength, UInt32 length);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_StopHapticRumble(IntPtr haptic);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_init();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_exit();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_hid_device_change_count();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_hid_enumerate(ushort vendor_id, ushort product_id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_hid_free_enumeration(IntPtr devs);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_hid_open(ushort vendor_id, ushort product_id, IntPtr serial_number);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_hid_open_path(IntPtr path);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_write(IntPtr dev, IntPtr data, UInt32 length);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_read_timeout(IntPtr dev, IntPtr data, UInt32 length, int milliseconds);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_read(IntPtr dev, IntPtr data, UInt32 length);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_set_nonblocking(IntPtr dev, int nonblock);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_send_feature_report(IntPtr dev, IntPtr data, UInt32 length);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_feature_report(IntPtr dev, IntPtr data, UInt32 length);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_input_report(IntPtr dev, IntPtr data, UInt32 length);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_close(IntPtr dev);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_manufacturer_string(IntPtr dev, IntPtr @string, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_product_string(IntPtr dev, IntPtr @string, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_serial_number_string(IntPtr dev, IntPtr @string, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_indexed_string(IntPtr dev, int string_index, IntPtr @string, UInt32 maxlen);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_hid_get_device_info(IntPtr dev);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_hid_get_report_descriptor(IntPtr dev, IntPtr buf, UInt32 buf_size);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_hid_ble_scan(int active);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetHintWithPriority(IntPtr name, IntPtr value, SDL_HintPriority priority);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetHint(IntPtr name, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ResetHint(IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ResetHints();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetHint(IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetHintBoolean(IntPtr name, int default_value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddHintCallback(IntPtr name, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DelHintCallback(IntPtr name, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_Init(UInt32 flags);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_InitSubSystem(UInt32 flags);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_QuitSubSystem(UInt32 flags);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_WasInit(UInt32 flags);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_Quit();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAppMetadata(IntPtr appname, IntPtr appversion, IntPtr appidentifier);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetAppMetadataProperty(IntPtr name, IntPtr value);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetAppMetadataProperty(IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_LoadObject(IntPtr sofile);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_LoadFunction(IntPtr handle, IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnloadObject(IntPtr handle);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetPreferredLocales(IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetLogPriorities(SDL_LogPriority priority);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetLogPriority(int category, SDL_LogPriority priority);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern SDL_LogPriority SDL_GetLogPriority(int category);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_ResetLogPriorities();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetLogPriorityPrefix(SDL_LogPriority priority, IntPtr prefix);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_Log(IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogVerbose(int category, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogDebug(int category, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogInfo(int category, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogWarn(int category, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogError(int category, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogCritical(int category, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogMessage(int category, SDL_LogPriority priority, IntPtr fmt);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_LogMessageV(int category, SDL_LogPriority priority, IntPtr fmt, IntPtr ap);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_GetLogOutputFunction(IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetLogOutputFunction(IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowMessageBox(IntPtr messageboxdata, IntPtr buttonid);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ShowSimpleMessageBox(UInt32 flags, IntPtr title, IntPtr message, IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_Metal_CreateView(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_Metal_DestroyView(IntPtr view);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_Metal_GetLayer(IntPtr view);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_OpenURL(IntPtr url);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetPlatform();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetNumRenderDrivers();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetRenderDriver(int index);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CreateWindowAndRenderer(IntPtr title, int width, int height, UInt64 window_flags, IntPtr window, IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateRenderer(IntPtr window, IntPtr name);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateRendererWithProperties(UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateSoftwareRenderer(IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetRenderer(IntPtr window);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetRenderWindow(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetRendererName(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetRendererProperties(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderOutputSize(IntPtr renderer, IntPtr w, IntPtr h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetCurrentRenderOutputSize(IntPtr renderer, IntPtr w, IntPtr h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateTexture(IntPtr renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateTextureFromSurface(IntPtr renderer, IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_CreateTextureWithProperties(IntPtr renderer, UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_GetTextureProperties(IntPtr texture);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetRendererFromTexture(IntPtr texture);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureSize(IntPtr texture, IntPtr w, IntPtr h);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureColorMod(IntPtr texture, byte r, byte g, byte b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureColorModFloat(IntPtr texture, float r, float g, float b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureColorMod(IntPtr texture, IntPtr r, IntPtr g, IntPtr b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureColorModFloat(IntPtr texture, IntPtr r, IntPtr g, IntPtr b);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureAlphaMod(IntPtr texture, byte alpha);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureAlphaModFloat(IntPtr texture, float alpha);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureAlphaMod(IntPtr texture, IntPtr alpha);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureAlphaModFloat(IntPtr texture, IntPtr alpha);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureBlendMode(IntPtr texture, UInt32 blendMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureBlendMode(IntPtr texture, IntPtr blendMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetTextureScaleMode(IntPtr texture, SDL_ScaleMode scaleMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetTextureScaleMode(IntPtr texture, IntPtr scaleMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateTexture(IntPtr texture, IntPtr rect, IntPtr pixels, int pitch);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateYUVTexture(IntPtr texture, IntPtr rect, IntPtr Yplane, int Ypitch, IntPtr Uplane, int Upitch, IntPtr Vplane, int Vpitch);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_UpdateNVTexture(IntPtr texture, IntPtr rect, IntPtr Yplane, int Ypitch, IntPtr UVplane, int UVpitch);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockTexture(IntPtr texture, IntPtr rect, IntPtr pixels, IntPtr pitch);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_LockTextureToSurface(IntPtr texture, IntPtr rect, IntPtr surface);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_UnlockTexture(IntPtr texture);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderTarget(IntPtr renderer, IntPtr texture);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetRenderTarget(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderLogicalPresentation(IntPtr renderer, int w, int h, SDL_RendererLogicalPresentation mode, SDL_ScaleMode scale_mode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderLogicalPresentation(IntPtr renderer, IntPtr w, IntPtr h, IntPtr mode, IntPtr scale_mode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderLogicalPresentationRect(IntPtr renderer, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderCoordinatesFromWindow(IntPtr renderer, float window_x, float window_y, IntPtr x, IntPtr y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderCoordinatesToWindow(IntPtr renderer, float x, float y, IntPtr window_x, IntPtr window_y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ConvertEventToRenderCoordinates(IntPtr renderer, IntPtr @event);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderViewport(IntPtr renderer, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderViewport(IntPtr renderer, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderViewportSet(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderSafeArea(IntPtr renderer, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderClipRect(IntPtr renderer, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderClipRect(IntPtr renderer, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderClipEnabled(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderScale(IntPtr renderer, float scaleX, float scaleY);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderScale(IntPtr renderer, IntPtr scaleX, IntPtr scaleY);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderDrawColor(IntPtr renderer, byte r, byte g, byte b, byte a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderDrawColorFloat(IntPtr renderer, float r, float g, float b, float a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderDrawColor(IntPtr renderer, IntPtr r, IntPtr g, IntPtr b, IntPtr a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderDrawColorFloat(IntPtr renderer, IntPtr r, IntPtr g, IntPtr b, IntPtr a);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderColorScale(IntPtr renderer, float scale);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderColorScale(IntPtr renderer, IntPtr scale);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderDrawBlendMode(IntPtr renderer, UInt32 blendMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderDrawBlendMode(IntPtr renderer, IntPtr blendMode);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderClear(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderPoint(IntPtr renderer, float x, float y);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderPoints(IntPtr renderer, IntPtr points, int count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderLine(IntPtr renderer, float x1, float y1, float x2, float y2);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderLines(IntPtr renderer, IntPtr points, int count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderRect(IntPtr renderer, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderRects(IntPtr renderer, IntPtr rects, int count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderFillRect(IntPtr renderer, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderFillRects(IntPtr renderer, IntPtr rects, int count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderTexture(IntPtr renderer, IntPtr texture, IntPtr srcrect, IntPtr dstrect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderTextureRotated(IntPtr renderer, IntPtr texture, IntPtr srcrect, IntPtr dstrect, double angle, IntPtr center, SDL_FlipMode flip);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderTextureTiled(IntPtr renderer, IntPtr texture, IntPtr srcrect, float scale, IntPtr dstrect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderTexture9Grid(IntPtr renderer, IntPtr texture, IntPtr srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, IntPtr dstrect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderGeometry(IntPtr renderer, IntPtr texture, IntPtr vertices, int num_vertices, IntPtr indices, int num_indices);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderGeometryRaw(IntPtr renderer, IntPtr texture, IntPtr xy, int xy_stride, IntPtr color, int color_stride, IntPtr uv, int uv_stride, int num_vertices, IntPtr indices, int num_indices, int size_indices);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_RenderReadPixels(IntPtr renderer, IntPtr rect);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenderPresent(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyTexture(IntPtr texture);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DestroyRenderer(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_FlushRenderer(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetRenderMetalLayer(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetRenderMetalCommandEncoder(IntPtr renderer);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_AddVulkanRenderSemaphores(IntPtr renderer, UInt32 wait_stage_mask, Int64 wait_semaphore, Int64 signal_semaphore);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetRenderVSync(IntPtr renderer, int vsync);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetRenderVSync(IntPtr renderer, IntPtr vsync);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenTitleStorage(IntPtr @override, UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenUserStorage(IntPtr org, IntPtr app, UInt32 props);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenFileStorage(IntPtr path);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_OpenStorage(IntPtr iface, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CloseStorage(IntPtr storage);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_StorageReady(IntPtr storage);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetStorageFileSize(IntPtr storage, IntPtr path, IntPtr length);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_ReadStorageFile(IntPtr storage, IntPtr path, IntPtr destination, UInt64 length);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_WriteStorageFile(IntPtr storage, IntPtr path, IntPtr source, UInt64 length);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CreateStorageDirectory(IntPtr storage, IntPtr path);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_EnumerateStorageDirectory(IntPtr storage, IntPtr path, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RemoveStoragePath(IntPtr storage, IntPtr path);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RenameStoragePath(IntPtr storage, IntPtr oldpath, IntPtr newpath);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_CopyStorageFile(IntPtr storage, IntPtr oldpath, IntPtr newpath);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetStoragePathInfo(IntPtr storage, IntPtr path, IntPtr info);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_GetStorageSpaceRemaining(IntPtr storage);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GlobStorageDirectory(IntPtr storage, IntPtr path, IntPtr pattern, UInt32 flags, IntPtr count);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_SetX11EventHook(IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetLinuxThreadPriority(Int64 threadID, int priority);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_SetLinuxThreadPriorityAndPolicy(Int64 threadID, int sdlPriority, int schedPolicy);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_IsTablet();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationWillTerminate();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationDidReceiveMemoryWarning();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationWillEnterBackground();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationDidEnterBackground();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationWillEnterForeground();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_OnApplicationDidEnterForeground();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetDateTimeLocalePreferences(IntPtr dateFormat, IntPtr timeFormat);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetCurrentTime(IntPtr ticks);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_TimeToDateTime(Int64 ticks, IntPtr dt, int localTime);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_DateTimeToTime(IntPtr dt, IntPtr ticks);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_TimeToWindows(Int64 ticks, IntPtr dwLowDateTime, IntPtr dwHighDateTime);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern Int64 SDL_TimeFromWindows(UInt32 dwLowDateTime, UInt32 dwHighDateTime);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetDaysInMonth(int year, int month);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetDayOfYear(int year, int month, int day);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetDayOfWeek(int year, int month, int day);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_GetTicks();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_GetTicksNS();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_GetPerformanceCounter();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt64 SDL_GetPerformanceFrequency();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_Delay(UInt32 ms);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern void SDL_DelayNS(UInt64 ns);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_AddTimer(UInt32 interval, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern UInt32 SDL_AddTimerNS(UInt64 interval, IntPtr callback, IntPtr userdata);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_RemoveTimer(UInt32 id);

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern int SDL_GetVersion();

    [DllImport(nativeLibName, CallingConvention = CallingConvention.Cdecl)]
    public static extern IntPtr SDL_GetRevision();


}
